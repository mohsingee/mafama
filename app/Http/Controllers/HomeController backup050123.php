<?php
namespace App\Http\Controllers;
use App\Discount;
use App\AffiliateRegistration;use App\AppointmentBanner;use App\AppointmentTutorial;use App\ArchivesBanner;use App\ArchiveTutorial;use App\BusinessCategory;use App\BusinessRegister;use App\CardCategory;use App\Chat;use App\ClientAppointmentList;use App\ClientManagementBanner;use App\ClientTutorial;use App\Comune;use App\Contacts;use App\EmailCampaign;use App\EmailManagementBanner;use App\EmailTutorial;use App\FinanceTutorial;use App\FinancialInvoiceSetup;use App\FinancialManagementBanner;use App\Folders;use App\HomeMainVideo;use App\HomeTopVideo;use App\HomeVideo;use App\Http\Requests;use App\IntroVideo;use App\LeadsCategory;use App\Levels;use App\LibraryForm;use App\Mail\SendMail;use App\Menulinks;use App\Mlm_transaction;use App\Payment as Transactionhistory;use App\PhotoSlides;use App\Religion;use App\ScriptCategory;use App\SendCard;use App\SendEmail;use App\SendSms;use App\SendVideo;use App\Setting;use App\SettingBanner;use App\SettingTutorial;use App\TempAffiliateRegistration;use App\TextBanner;use App\TopBanner;use App\UploadCard;use App\UploadScript;use App\User;use App\User_invite;use Auth;use Carbon\Carbon;use Charts;use DB;use Exception;use Illuminate\Http\Request;use Illuminate\Support\Facades\Hash;use Illuminate\Support\Facades\Mail;use Redirect;use Session;use Twilio\Rest\Client;use URL;use Validator;
// use Input;
// use PayPal\Rest\ApiContext;
// use PayPal\Auth\OAuthTokenCredential;
// use PayPal\Api\Amount;
// use PayPal\Api\Details;
// use PayPal\Api\Item;
// use PayPal\Api\ItemList;
// use PayPal\Api\Payer;
// use PayPal\Api\Payment;
// use PayPal\Api\RedirectUrls;
// use PayPal\Api\ExecutePayment;
// use PayPal\Api\PaymentExecution;
// use PayPal\Api\Transaction;
class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
      // private $_api_context;
    public function __construct()
    {
        // $paypal_configuration = \Config::get('paypal');
        // $this->_api_context = new ApiContext(new OAuthTokenCredential($paypal_configuration['client_id'], $paypal_configuration['secret']));
        // $this->_api_context->setConfig($paypal_configuration['settings']);
        // $this->middleware('auth');
    }
    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
         if(permission_access('dashboard_view')!=1)
           {
              echo '<header class="text-center">
                <h1>Access Denied!</h1>
                </header>';
                 die();
           }
        //  print_r($data);die;
        // if(Auth::id() == NULL){
        //     return redirect('/')->with('status',"Please login or register to access this page.");
        // }
        if (Auth::id() == NULL) {
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        else{
            if(Auth::user()->role != "admin"){
                Auth::logout();
                return redirect('/login');
            }
            else{
                // Session::put('popup', "abc");
                $topbanner = TopBanner::get();
                $topbannercount = count($topbanner);
                Session::put('topbannercount', $topbannercount);
                $textbanner = TextBanner::get();
                $textbannercount = count($textbanner);
                Session::put('textbannercount', $textbannercount);
                $homevideo = HomeVideo::get();
                $homevideocount = count($homevideo);
                Session::put('homevideocount', $homevideocount);
                $hometopvideo = HomeTopVideo::get();
                $hometopvideocount = count($hometopvideo);
                Session::put('hometopvideocount', $hometopvideocount);
                $homemainvideo = HomeMainVideo::get();
                $homemainvideocount = count($homemainvideo);
                Session::put('homemainvideocount', $homemainvideocount);
                $settingbanner = SettingBanner::get();
                $settingbannercount = count($settingbanner);
                Session::put('settingbannercount', $settingbannercount);
                $appointmentbanner = AppointmentBanner::get();
                $appointmentbannercount = count($appointmentbanner);
                Session::put('appointmentbannercount', $appointmentbannercount);
                $clientmanagementbanner = ClientManagementBanner::get();
                $clientmanagementbannercount = count($clientmanagementbanner);
                Session::put('clientmanagementbannercount', $clientmanagementbannercount);
                $emailmanagementbanner = EmailManagementBanner::get();
                $emailmanagementbannercount = count($emailmanagementbanner);
                Session::put('emailmanagementbannercount', $emailmanagementbannercount);
                $financialmanagementbanner = FinancialManagementBanner::get();
                $financialmanagementbannercount = count($financialmanagementbanner);
                Session::put('financialmanagementbannercount', $financialmanagementbannercount);
                $archivesbanner = ArchivesBanner::get();
                $archivesbannercount = count($archivesbanner);
                Session::put('archivesbannercount', $archivesbannercount);
                $data['chat'] = "";
                $data['tools'] = "";
                if(Auth::user()->role == "affiliate_user"){
                    $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
                    if($cdet->chat == "on"){
                        $data['chat'] = "on";
                    }
                    else{
                        $data['chat'] = "off";
                    }
                    if($cdet->tools == "on"){
                        $data['tools'] = "on";
                    }
                    else{
                        $data['tools'] = "off";
                    }
                }
                  $data['total_users']=User::where('status',1)->count();
               $data['user_month']=User::where('status',1)->whereMonth('created_at', Carbon::now()->month)->count();
               $data['user_week']=User::where('status',1)->whereBetween('created_at', [Carbon::now()->startOfWeek(), Carbon::now()->endOfWeek()])->count();
               $data['affiliate_users']=AffiliateRegistration::where('status',1)->count();
               $data['aff_month']=AffiliateRegistration::where('status',1)->whereMonth('created_at', Carbon::now()->month)->count();
               $data['aff_week']=AffiliateRegistration::where('status',1)->whereBetween('created_at', [Carbon::now()->startOfWeek(), Carbon::now()->endOfWeek()])->count();
                return view('admin')->with($data);
            }
        }
    }

    public function myView(Request $request)
    {

        return 123;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $changeappointmentid = $request->id;
        Session::put('changeappointmentid', $changeappointmentid);
        $data = DB::table('appointments')->join('client_appointment_lists', 'appointments.appointment_id', 'client_appointment_lists.id')->where('appointments.id', $request->id)->where('appointments.cstatus', "on")->first();
        $first_name = $data->first_name;
        $last_name = $data->last_name;
        $company = $data->company;
        Session::put('first_name', $first_name);
        Session::put('last_name', $last_name);
        Session::put('company', $company);
        Session::put('clientid', $data->appointment_id);
        return redirect('appointment_step3');
    }

    public function mainpage()
    {
        $today = date('m-d');
        $data['abanner'] = "";
        $data['folders'] = "";
        $data['contacts'] = "";
        $data['popup_setting'] = "";
        $data['popup_mail'] = "";
        if((Auth::id() != "") && (Auth::user()->role == "affiliate")){
            $uid = Auth::id();
            $uemail = Auth::user()->email;
            $data['popup_setting'] = DB::table('popup_settings')->first();
            if($data['popup_setting']->category == 2){
                $category1 = DB::table('affiliate_registrations')->select('lead_category')->where('email', Auth::user()->email)->first();
                $category = DB::table('business_categories')->where('id', $category1->lead_category)->first();
                $data['details'] = DB::table('upload_popup2s')->where('category', $category1->lead_category)->get();
            }
            else{
                $category1 = DB::table('affiliate_registrations')->select('business_category')->where('email', Auth::user()->email)->first();
                $category = DB::table('business_categories')->where('id', $category1->business_category)->first();
                $data['details'] = DB::table('upload_popup1s')->where('category', $category1->business_category)->get();
            }
            $data['birthdays'] = ClientAppointmentList::where('dob', 'like', '%' .$today. '%')->where('uid', $uid)->get();
            $data['meeting_task'] = DB::table('meeting_task')->where('affiliate_id', Auth::id())->where('date', date('Y-m-d'))->get();
            $data['abanner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
            $data['folders'] = DB::table('folders')->where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->get();
            $data['popup_mail'] = DB::table('popup_mail')->where('uid', Auth::id())->orderBy('id', 'desc')->first();
            $data['contacts'] = Contacts::where('uid', $uid)->where('folder', '!=', '11')->where('status', 1)->get();
            $aaid = "";
            if((Auth::user()->role) == "affiliate"){
                $aaid = Auth::user()->email;
            }
            else{
                $aaid = Auth::user()->affiliate_user_email;
            }
            $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        }
        elseif((Auth::id() != "") && (Auth::user()->role == "affiliate_user")){
            Session::put('popup', "");
            $data['details'] = DB::table('upload_popup1s')->first();
            $data['meeting_task'] = DB::table('meeting_task')->where('date', date('Y-m-d'))->get();
            $data['birthdays'] = ClientAppointmentList::where('dob', 'like', '%' .$today. '%')->get();
            $aaid = "";
            if((Auth::user()->role) == "affiliate"){
                $aaid = Auth::user()->email;
            }
            else{
                $aaid = Auth::user()->affiliate_user_email;
            }
            $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        }
        else{
            Session::put('popup', "");
            $data['details'] = DB::table('upload_popup1s')->first();
            $data['meeting_task'] = DB::table('meeting_task')->where('date', date('Y-m-d'))->get();
            $data['birthdays'] = ClientAppointmentList::where('dob', 'like', '%' .$today. '%')->get();
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['slidetime2'] = DB::table('carouselplaytime2')->where('id', 1)->get();
        $data['slides'] = PhotoSlides::select('*')->where('status', "active")->get();
        $data['text_banners'] = TextBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['home_videos'] = HomeVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
          $data['transactions']=Mlm_transaction::get_usertransaction_list();
             $data['recent_achievers']=User::get_recent_achievers();

             if (Auth::user()) {
                $data['usr'] = DB::table('affiliate_registrations')->where('email', Auth::user()->email)->first();
             }

            //  dd($usr);


        // echo "<pre>";
        // print_r($data['top_banners']);die();

        return view('main')->with($data);
    }
	public function testmainpage()
    {
        $today = date('m-d');
        $data['abanner'] = "";
        $data['folders'] = "";
        $data['contacts'] = "";
        $data['popup_setting'] = "";
        $data['popup_mail'] = "";
        if((Auth::id() != "") && (Auth::user()->role == "affiliate")){
            $uid = Auth::id();
            $uemail = Auth::user()->email;
            $data['popup_setting'] = DB::table('popup_settings')->first();
            if($data['popup_setting']->category == 2){
                $category1 = DB::table('affiliate_registrations')->select('lead_category')->where('email', Auth::user()->email)->first();
                $category = DB::table('business_categories')->where('id', $category1->lead_category)->first();
                $data['details'] = DB::table('upload_popup2s')->where('category', $category1->lead_category)->get();
            }
            else{
                $category1 = DB::table('affiliate_registrations')->select('business_category')->where('email', Auth::user()->email)->first();
                $category = DB::table('business_categories')->where('id', $category1->business_category)->first();
                $data['details'] = DB::table('upload_popup1s')->where('category', $category1->business_category)->get();
            }
            $data['birthdays'] = ClientAppointmentList::where('dob', 'like', '%' .$today. '%')->where('uid', $uid)->get();
            $data['meeting_task'] = DB::table('meeting_task')->where('affiliate_id', Auth::id())->where('date', date('Y-m-d'))->get();
            $data['abanner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
            $data['folders'] = DB::table('folders')->where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->get();
            $data['popup_mail'] = DB::table('popup_mail')->where('uid', Auth::id())->orderBy('id', 'desc')->first();
            $data['contacts'] = Contacts::where('uid', $uid)->where('folder', '!=', '11')->where('status', 1)->get();
            $aaid = "";
            if((Auth::user()->role) == "affiliate"){
                $aaid = Auth::user()->email;
            }
            else{
                $aaid = Auth::user()->affiliate_user_email;
            }
            $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        }
        elseif((Auth::id() != "") && (Auth::user()->role == "affiliate_user")){
            Session::put('popup', "");
            $data['details'] = DB::table('upload_popup1s')->first();
            $data['meeting_task'] = DB::table('meeting_task')->where('date', date('Y-m-d'))->get();
            $data['birthdays'] = ClientAppointmentList::where('dob', 'like', '%' .$today. '%')->get();
            $aaid = "";
            if((Auth::user()->role) == "affiliate"){
                $aaid = Auth::user()->email;
            }
            else{
                $aaid = Auth::user()->affiliate_user_email;
            }
            $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        }
        else{
            Session::put('popup', "");
            $data['details'] = DB::table('upload_popup1s')->first();
            $data['meeting_task'] = DB::table('meeting_task')->where('date', date('Y-m-d'))->get();
            $data['birthdays'] = ClientAppointmentList::where('dob', 'like', '%' .$today. '%')->get();
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['slidetime2'] = DB::table('carouselplaytime2')->where('id', 1)->get();
        $data['slides'] = PhotoSlides::select('*')->where('status', "active")->get();
        $data['text_banners'] = TextBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['home_videos'] = HomeVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
          $data['transactions']=Mlm_transaction::get_usertransaction_list();
             $data['recent_achievers']=User::get_recent_achievers();
        // echo "<pre>";
        // print_r($data['top_banners']);die();
        return view('testmain')->with($data);
    }
    public function calender_meeting()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
            return redirect('/')->with('status',"Admin can't access this page.");
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        // print_r($data['top_banners']);die();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('calender_meeting')->with($data);
    }
    public function calendarcheck()
    {
        $id = Auth::id();
        // print_r($doctor); die();
        $affiliate = DB::table('meeting_task')
            ->select('*')
            ->where('affiliate_id', $id)
            ->get();
        $events = array();
        for ($i=0; $i < count($affiliate) ; $i++) {
            $title = $affiliate[$i]->title;
            $startdate = $affiliate[$i]->start;
            $enddate= $affiliate[$i]->end;
            $color = "#0173fd";
            $textColor = "white";
            $e = array();
            $e['title'] = $title;
            $e['start'] = $startdate;
            $e['end'] = $enddate;
            $e['color'] = $color;
            $e['textColor'] = $textColor;
            array_push($events, $e);
        }
        echo json_encode($events);
        exit();
    }
    public function addevents(Request $request)
    {
        $id = Auth::id();
        $start = $request->start;
        $end = $request->end;
        $title = $request->title;
        $description = $request->description;
        $datee = explode('T', $start);
        $date = $datee[0];
        $data = DB::table('meeting_task')->insert(
                array('affiliate_id' => $id,
                      'title' => $title,
                      'start' => $start,
                      'end' => $end,
                      'description' => $description,
                      'date' => $date,
                  )
            );
        return redirect('calender_meeting');
    }
    public function profile()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "temp_user")
        {
            return redirect('temp_user_profile');
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        // print_r($data['top_banners']);die();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['details'] = AffiliateRegistration::where('email', $uemail)->get();
        $data['religion'] = Religion::get();
        $data['communes'] = Comune::get();
        $data['business_category'] = BusinessCategory::get();
        $data['lead_category'] = LeadsCategory::get();
          $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
          $data['my_referral_link'] ='';
          $data['my_profile_link'] ='';
          if(!empty($aff_data->code)){
              $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
               $data['my_referral_link'] =$sponsor_link;
                $data['my_profile_link']=url('user/'.$aff_data->username);
          }
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['is_medical_user'] = BusinessCategory::is_medical_user($aaid);
        return view('profile')->with($data);
    }
    public function chat()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['affiliate_banner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->first();
        $data['affiliate_details'] = DB::table('affiliate_registrations')->where('email', $aaid)->first();
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['colors'] = DB::table('background_color')->get();
        $data['attachments'] = Chat::whereNull('video_link')->whereNotNull('attachment')->where('from_user_id',Auth::id())->get();
        $data['videos'] = Chat::whereNull('attachment')->whereNotNull('video_link')->where('from_user_id',Auth::id())->get();
        return view('chat')->with($data);
    }
    public function banner()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['affiliate_banner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $data['affiliate_details'] = DB::table('affiliate_registrations')->where('email', $uemail)->first();
        // if($data['affiliate_banner'] == null){
        //     $data['affiliate_banner']['background'] = "";
        // }
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('banner')->with($data);
    }
    public function import_contacts()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['folders'] = DB::table('import_contact_folder')->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('import_contacts')->with($data);
    }
    public function client_survey_records()
    {
      if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
         return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
            $uid = Auth::user()->id;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
              $uid = Auth::user()->affiliate_user_id;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['survey'] = DB::table('user_survey_records')->where('client_appointment_lists.uid',$uid)
                          ->join('users', 'users.id', '=', 'user_survey_records.user_id')
                          ->join('client_appointment_lists', 'users.email', '=', 'client_appointment_lists.email')
                         ->select('user_survey_records.*','client_appointment_lists.first_name','client_appointment_lists.last_name','client_appointment_lists.email')
                        ->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('main.client_survey_records')->with($data);
    }
    public function user_access_rights()
    {
      if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
         return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        // echo "<pre>";
        //         print_r($links[19]->main_menu);die;

        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['users'] = DB::table('user_access_role')->where('sponsor_id', Auth::id())->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('user_access_rights')->with($data);
    }
    public function edit_user_access_rights(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $email = base64_decode($request->id);
        $data['users'] = DB::table('user_access_role')->join('user_day_access', 'user_access_role.email', 'user_day_access.uemail')->join('user_menu_access', 'user_access_role.email', 'user_menu_access.uemail')->join('user_menu_access2', 'user_access_role.email', 'user_menu_access2.uemail')->where('email', $email)->first();
        $data['religion'] = Religion::get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('edit_user_access_rights')->with($data);
    }
    public function add_user_access_rights()
    {
         if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['appointment_link'] = DB::table('menulinks')->where('main_menu', "Appointment")->get();
        $data['email_management_link'] = DB::table('menulinks')->where('main_menu', "Email Management")->get();
        $data['financial_management_link'] = DB::table('menulinks')->where('main_menu', "Financial Management")->get();
        $data['archive_link'] = DB::table('menulinks')->where('main_menu', "Archives")->get();
        $data['religion'] = Religion::get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('add_user_access_rights')->with($data);
    }
    public function add_appointment_setting()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['users'] = DB::table('appointment_settings')->where('uemail', $uemail)->get();
        $data['excount'] = count($data['users']);
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('add_appointment_setting')->with($data);
    }
    public function block_appointment_date()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['block_appointment'] = DB::table('block_appointment_date')->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('block_appointment_date')->with($data);
    }
    public function manag_date_settings()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('manag_date_settings')->with($data);
    }
    public function client_mgmt_setting()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('client_mgmt_setting')->with($data);
    }
    public function email_mgmt_setting()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('email_mgmt_setting')->with($data);
    }
    public function financial_mgmt_setting()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if(((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")) || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
         $category = AffiliateRegistration::where('email', Auth::user()->email)->first();
        $data['revenue'] = DB::table('revenue_account')->where(['uid'=> $uid,'category'=>$category->business_category])->get();
        $data['expenses'] = DB::table('expenses_account')->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('financial_mgmt_setting')->with($data);
    }
    public function financial_mgmt_expenses_settings()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
         $category = AffiliateRegistration::where('email', Auth::user()->email)->first();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('revenue_account')->where(['uid'=> $uid,'category'=>$category->business_category])->get();
        $data['expenses'] = DB::table('expenses_account')->where(['uid'=> $uid,'category'=>$category->business_category])->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('financial_mgmt_expenses_settings')->with($data);
    }
    public function financial_mgmt_invoice_setup()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
         if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['invoice_setup'] = FinancialInvoiceSetup::where('uid', $uid)->first();
        //print_r($data['invoice_setup']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        $uid123 = Auth::id();

        $data['disc'] = Discount::where('uid', $uid123)->first();

        // dd($data['disc']);

        return view('financial_mgmt_invoice_setup')->with($data);
        // return view('financial_mgmt_invoice_setup')->with($data);
    }
    public function financial_mgmt_choose_template()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $admin = User::where('role', 'admin')->first();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $usr = User::where('id', $uid)->first();
        $affiliate = AffiliateRegistration::where('email', $usr->email)->first();
        $business_category = BusinessCategory::where('id', $affiliate->business_category)->first();
      //  $category1 = DB::table('financial_template_categories')->where('category', $business_category->category)->first();
        $category1 = BusinessCategory::where('id', $affiliate->business_category)->first();;
        $category2 = "";
        $data['revenue_account'] = "";
        $data['expenses_account'] = "";
        $data['business_category'] = $affiliate->business_category;
        if($affiliate->lead_category != ""){
            $lead_category = LeadsCategory::where('id', $affiliate->lead_category)->first();
            $category2 = DB::table('financial_template_categories')->where('category', $lead_category->category)->first();
        }
        if(($category1 != "") && ($category2 != "")){
            $data['revenue_account'] = DB::table('revenue_account')->where('uid', $admin->id)->where('category', $category1->id)
           // ->orWhere('category', $category2->id)
            ->get();
            $data['expenses_account'] = DB::table('expenses_account')->where('uid', $admin->id)->where('category', $category1->id)
           // ->orWhere('category', $category2->id)
            ->get();
        }
        elseif(($category1 != "") && ($category2 == "")){
            $data['revenue_account'] = DB::table('revenue_account')->where('uid', $admin->id)->where('category', $category1->id)->get();
            $data['expenses_account'] = DB::table('expenses_account')->where('uid', $admin->id)->where('category', $category1->id)->get();
        }
        elseif(($category1 == "") && ($category2 != "")){
            $data['revenue_account'] = DB::table('revenue_account')->where('uid', $admin->id)->where('category', $category2->id)->get();
            $data['expenses_account'] = DB::table('expenses_account')->where('uid', $admin->id)->where('category', $category2->id)->get();
        }
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('financial_mgmt_choose_template')->with($data);
    }
    public function balancesheet_template1()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $admin = User::where('role', 'admin')->first();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $affiliate=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $business_category=$affiliate->business_category;
         $data['balancesheet_assets'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'main_category'=>'assets','category'=>$business_category])->get();
         $data['balancesheet_nonassets'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'main_category'=>'non_assets','category'=>$business_category])->get();
         $data['balancesheet_liability'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'main_category'=>'liability','category'=>$business_category])->get();
         $data['balancesheet_nonliability'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'main_category'=>'non_liability','category'=>$business_category])->get();
         $data['balancesheet_equity'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'main_category'=>'equity','category'=>$business_category])->get();
        $data['revenue_amount'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->sum('balance');
        $data['expense_amount'] = DB::table('expense_record')->where('uid',$uid)->sum('balance');
        $data['receivable_amount']=$data['revenue_amount'];
        $data['record1']=DB::table('current_asset_balancesheet')->where('uid',$uid)->orderBy('id','desc')->first();
        $data['record2']=DB::table('noncurrent_asset_balancesheet')->where('uid',$uid)->orderBy('id','desc')->first();
        $data['record3']=DB::table('current_liability_balancesheet')->where('uid',$uid)->orderBy('id','desc')->first();
        $data['record4']=DB::table('noncurrent_liability_balancesheet')->where('uid',$uid)->orderBy('id','desc')->first();
        $data['record5']=DB::table('equity_balancesheet')->where('uid',$uid)->orderBy('id','desc')->first();
        return view('balancesheet_template1')->with($data);
    }
    public function manage_clients(Request $request)
    {
        $data['mode']='';
       $daily=$request->input('daily');
       $sdate=$request->input('sdate');
       $edate=$request->input('edate');
       $monthly=$request->input('monthly');



        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();

        if(!empty($daily)){
         $data['mode']='daily';

         $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('uid', $uid)->whereDate('created_at', '=', $daily)->get();
        }elseif(!empty($monthly)){
          $data['mode']='monthly';

          $data['clients'] = ClientAppointmentList::where('uid', $uid)->whereMonth('created_at',$monthly)->whereYear('created_at', date('Y'))->get();
        }elseif (!empty($sdate) && !empty($edate)) {
           $data['mode']='weekly';

           $data['clients'] = ClientAppointmentList::where('uid', $uid)->whereBetween('created_at', [$sdate, $edate])->get();
        }else{
        $data['clients'] = ClientAppointmentList::where('uid', $uid)->get();
        }
        $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('manage_clients')->with($data);
    }

    public function client_list(Request $request)
    {
        $data['mode']='';
       $daily=$request->input('daily');
       $sdate=$request->input('sdate');
       $edate=$request->input('edate');
       $monthly=$request->input('monthly');



        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();

        if(!empty($daily)){
         $data['mode']='daily';

         $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('uid', $uid)->whereDate('created_at', '=', $daily)->get();
        }elseif(!empty($monthly)){
          $data['mode']='monthly';

          $data['clients'] = ClientAppointmentList::where('uid', $uid)->whereMonth('created_at',$monthly)->whereYear('created_at', date('Y'))->get();
        }elseif (!empty($sdate) && !empty($edate)) {
           $data['mode']='weekly';

           $data['clients'] = ClientAppointmentList::where('uid', $uid)->whereBetween('created_at', [$sdate, $edate])->get();
        }else{
        $data['clients'] = ClientAppointmentList::where('uid', $uid)->get();
        }
        $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('client_list')->with($data);
    }
    public function view_client_profiles()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = ClientAppointmentList::where('uid', $uid)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('view_client_profiles')->with($data);
    }
    public function appointment_step3(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['id'] = $request->id;
        $data['appointment_settings_day'] = DB::table('appointment_settings')->where('uemail',$uemail)->first();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_step3')->with($data);
    }
    public function appointment_step2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $religion = $request->religion;
        $country = $request->country;
        $state = $request->state;
        $city = $request->city;
        $zipcode = $request->zipcode;
        Session::put('religion', $religion);
        Session::put('country', $country);
        Session::put('state', $state);
        Session::put('city', $city);
        Session::put('zipcode', $zipcode);
        return redirect('appointment_step2_detail');
    }
    public function appointment_step2_detail()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $religion = Session::get('religion');
        $country = Session::get('country');
        $state = Session::get('state');
        $city = Session::get('city');
        $zipcode = Session::get('zipcode');
        $data['clients'] = "";
        $data['searchf'] = "";
        $data['affiliates'] = "";
        $data['clients2'] = "";
        $data['users'] = "";
        if(($religion != "all") && ($country != "") && ($state != "") && ($city != "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state.", ".$city.", ".$zipcode;
        }
        elseif (($religion != "all") && ($country != "") && ($state == "") && ($city != "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$city.", ".$zipcode;
        }
        elseif (($religion != "all") && ($country != "") && ($state == "") && ($city == "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$zipcode;
        }
        elseif (($religion != "all") && ($country != "") && ($state == "") && ($city != "") && ($zipcode == "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$city;
        }
        elseif(($religion != "all") && ($country != "") && ($state != "") && ($city == "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state.", ".$zipcode;
        }
        elseif(($religion != "all") && ($country != "") && ($state != "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state;
        }
        elseif(($religion != "all") && ($country != "") && ($state != "") && ($city != "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state.", ".$city;
        }
        elseif(($religion != "all") && ($country != "") && ($state == "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['religion', '=', $religion],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['religion', '=', $religion],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['religion', '=', $religion],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['religion', '=', $religion],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country;
        }
        elseif(($religion == "all") && ($country != "") && ($state != "") && ($city != "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state.", ".$city.", ".$zipcode;
        }
        elseif (($religion == "all") && ($country != "") && ($state == "") && ($city != "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$city.", ".$zipcode;
        }
        elseif (($religion == "all") && ($country != "") && ($state == "") && ($city == "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$zipcode;
        }
        elseif (($religion == "all") && ($country != "") && ($state == "") && ($city != "") && ($zipcode == "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$city;
        }
        elseif(($religion == "all") && ($country != "") && ($state != "") && ($city == "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state.", ".$zipcode;
        }
        elseif(($religion == "all") && ($country != "") && ($state != "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state;
        }
        elseif(($religion == "all") && ($country != "") && ($state != "") && ($city != "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city],['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city],['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city],['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city],['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$state.", ".$city;
        }
        elseif(($religion == "all") && ($country != "") && ($state == "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['country', '=', $country]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['country', '=', $country]])->get();
            $data['users'] = DB::table('user_access_role')->where([['country', '=', $country]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['country', '=', $country]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country;
        }
        elseif(($religion != "all") && ($country == "") && ($state != "") && ($city != "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state.", ".$city.", ".$zipcode;
        }
        elseif (($religion != "all") && ($country == "") && ($state == "") && ($city != "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$city.", ".$zipcode;
        }
        elseif (($religion != "all") && ($country == "") && ($state == "") && ($city == "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$zipcode;
        }
        elseif (($religion != "all") && ($country == "") && ($state == "") && ($city != "") && ($zipcode == "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city],['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city],['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city],['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city],['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$city;
        }
        elseif(($religion != "all") && ($country == "") && ($state != "") && ($city == "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode],['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state.", ".$zipcode;
        }
        elseif(($religion != "all") && ($country == "") && ($state != "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state;
        }
        elseif(($religion != "all") && ($country == "") && ($state != "") && ($city != "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city],['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state.", ".$city;
        }
        elseif(($religion != "all") && ($country == "") && ($state == "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['religion', '=', $religion]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['religion', '=', $religion]])->get();
            $data['users'] = DB::table('user_access_role')->where([['religion', '=', $religion]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['religion', '=', $religion]])->get();
            $data['searchf'] = "Search for ".$religion;
        }
        elseif(($religion == "all") && ($country == "") && ($state != "") && ($city != "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state.", ".$city.", ".$zipcode;
        }
        elseif (($religion == "all") && ($country == "") && ($state == "") && ($city != "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city],['zip_code', '=', $zipcode]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$city.", ".$zipcode;
        }
        elseif (($religion == "all") && ($country == "") && ($state == "") && ($city == "") && ($zipcode != "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['zip_code', '=', $zipcode]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['zip_code', '=', $zipcode]])->get();
            $data['users'] = DB::table('user_access_role')->where([['zip_code', '=', $zipcode]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['zip_code', '=', $zipcode]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$zipcode;
        }
        elseif (($religion == "all") && ($country == "") && ($state == "") && ($city != "") && ($zipcode == "")) {
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['city', '=', $city]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['city', '=', $city]])->get();
            $data['users'] = DB::table('user_access_role')->where([['city', '=', $city]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['city', '=', $city]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$country.", ".$city;
        }
        elseif(($religion == "all") && ($country == "") && ($state != "") && ($city == "") && ($zipcode != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['zip_code', '=', $zipcode]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['zip_code', '=', $zipcode]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['zip_code', '=', $zipcode]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state.", ".$zipcode;
        }
        elseif(($religion == "all") && ($country == "") && ($state != "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state;
        }
        elseif(($religion == "all") && ($country == "") && ($state != "") && ($city != "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where([['state', '=', $state],['city', '=', $city]])->get();
            $data['affiliates'] = AffiliateRegistration::where([['state', '=', $state],['city', '=', $city]])->get();
            $data['users'] = DB::table('user_access_role')->where([['state', '=', $state],['city', '=', $city]])->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where([['state', '=', $state],['city', '=', $city]])->get();
            $data['searchf'] = "Search for ".$religion.", ".$state.", ".$city;
        }
        elseif(($religion == "all") && ($country == "") && ($state == "") && ($city == "") && ($zipcode == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->get();
            $data['affiliates'] = AffiliateRegistration::get();
            $data['users'] = DB::table('user_access_role')->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->get();
            $data['searchf'] = "Search for ".$religion;
        }
        // print_r($data['clients']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_step2')->with($data);
    }
    public function appointment_stepp2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $first_name = $request->first_name;
        $last_name = $request->last_name;
        $company = $request->company;
        Session::put('first_name', $first_name);
        Session::put('last_name', $last_name);
        Session::put('company', $company);
        if(($first_name == "") && ($last_name == "") && ($company == "")){
            Session::flash('success', "Success!");
            return redirect()->back()->with('status',"Enter Details.");
        }
        return redirect('appointment_stepp2_detail');
    }
    public function appointment_stepp2_detail()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $first_name = Session::get('first_name');
        $last_name = Session::get('last_name');
        $company = Session::get('company');
        $data['clients'] = "";
        $data['searchf'] = "";
        $data['affiliates'] = "";
        $data['clients2'] = "";
        $data['users'] = "";
        if(($first_name != "") && ($last_name != "") && ($company != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->where('company', 'like', '%' .$company. '%')->get();
             $data['affiliates'] = AffiliateRegistration::where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['users'] = DB::table('user_access_role')->where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->where('company', 'like', '%' .$company. '%')->get();
            $data['searchf'] = "Search for ".$first_name.", ".$last_name.", ".$company;
        }
        elseif(($first_name == "") && ($last_name != "") && ($company != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('last_name', 'like', '%' .$last_name. '%')->where('company', 'like', '%' .$company. '%')->get();
             $data['affiliates'] = AffiliateRegistration::where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['users'] = DB::table('user_access_role')->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where('last_name', 'like', '%' .$last_name. '%')->where('company', 'like', '%' .$company. '%')->get();
            $data['searchf'] = "Search for ".$last_name.", ".$company;
        }
        elseif(($first_name == "") && ($last_name == "") && ($company != "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('company', 'like', '%' .$company. '%')->get();
             $data['affiliates'] = "";
            $data['users'] = "";
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where('company', 'like', '%' .$company. '%')->get();
            $data['searchf'] = "Search for ".$company;
        }
        elseif(($first_name == "") && ($last_name != "") && ($company == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('last_name', 'like', '%' .$last_name. '%')->get();
             $data['affiliates'] = AffiliateRegistration::where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['users'] = DB::table('user_access_role')->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['searchf'] = "Search for ".$last_name;
        }
        elseif(($first_name != "") && ($last_name == "") && ($company != "")){
            $data['clients'] = ClientAppointmentList::where('uid',$uid)->where('first_name', 'like', '%' .$first_name. '%')->where('company', 'like', '%' .$company. '%')->get();
             $data['affiliates'] = AffiliateRegistration::where('first_name', 'like', '%' .$first_name. '%')->get();
            $data['users'] = DB::table('user_access_role')->where('first_name', 'like', '%' .$first_name. '%')->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where('first_name', 'like', '%' .$first_name. '%')->where('company', 'like', '%' .$company. '%')->get();
            $data['searchf'] = "Search for ".$first_name.", ".$company;
        }
        elseif(($first_name != "") && ($last_name == "") && ($company == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('first_name', 'like', '%' .$first_name. '%')->get();
             $data['affiliates'] = AffiliateRegistration::where('first_name', 'like', '%' .$first_name. '%')->get();
            $data['users'] = DB::table('user_access_role')->where('first_name', 'like', '%' .$first_name. '%')->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where('first_name', 'like', '%' .$first_name. '%')->get();
            $data['searchf'] = "Search for ".$first_name;
        }
        elseif(($first_name != "") && ($last_name != "") && ($company == "")){
            $data['clients'] = ClientAppointmentList::where('uid', $uid)->where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->get();
             $data['affiliates'] = AffiliateRegistration::where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['users'] = DB::table('user_access_role')->where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['clients2'] = ClientAppointmentList::where('uid', '!=', $uid)->where('first_name', 'like', '%' .$first_name. '%')->where('last_name', 'like', '%' .$last_name. '%')->get();
            $data['searchf'] = "Search for ".$first_name.", ".$last_name;
        }
        // $data['clients'] = ClientAppointmentList::where('first_name', 'like', '%' .$first_name. '%')->orWhere('last_name', 'like', '%' .$last_name. '%')->orWhere('company', 'like', '%' .$company. '%')->get();
        // print_r($data['clients']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_step2')->with($data);
    }
    public function appointment_steppp2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $category = $request->category;
        Session::put('category', $category);
        return redirect('appointment_steppp2_detail');
    }
    public function appointment_steppp2_detail(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $category = Session::get('category');
        $data['clients'] = ClientAppointmentList::select('client_appointment_lists.first_name as first_name', 'client_appointment_lists.last_name as last_name', 'client_appointment_lists.email as email', 'client_appointment_lists.company as company', 'client_appointment_lists.address as address', 'client_appointment_lists.state as state','client_appointment_lists.country as country', 'client_appointment_lists.zip_code as zip', 'client_appointment_lists.city as city', 'client_appointment_lists.cell_phone as phone', 'client_appointment_lists.image as image')
                ->join('users', 'users.id', '=', 'client_appointment_lists.uid')
                ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                ->where('affiliate_registrations.business_category', $category)
                ->where('client_appointment_lists.uid', $uid)
                ->get();
        $data['affiliates'] = AffiliateRegistration::where('business_category', $category)->get();
        $data['clients2'] = ClientAppointmentList::select('client_appointment_lists.first_name as first_name', 'client_appointment_lists.last_name as last_name', 'client_appointment_lists.email as email', 'client_appointment_lists.company as company', 'client_appointment_lists.address as address', 'client_appointment_lists.state as state','client_appointment_lists.country as country', 'client_appointment_lists.zip_code as zip', 'client_appointment_lists.city as city', 'client_appointment_lists.cell_phone as phone', 'client_appointment_lists.image as image')
                ->join('users', 'users.id', '=', 'client_appointment_lists.uid')
                ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                ->where('affiliate_registrations.business_category', $category)
                ->where('client_appointment_lists.uid', '!=', $uid)
                ->get();
        $data['users'] = DB::table('user_access_role')
                ->join('users', 'users.id', '=', 'user_access_role.sponsor_id')
                ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                ->where('affiliate_registrations.business_category', $category)
                ->get();
        $category_name = BusinessCategory::where('id', $category)->first();
        $data['searchf'] = "Search for ".$category_name->category;
        // print_r($data['clients']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_step2')->with($data);
    }
    public function appointment_step1()
    {
        if(Auth::id() == NULL){
            return redirect('appointment_login');
            // return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "client")){
            return redirect('/member_appointment_step1');
        }
        if(Auth::user()->role == "admin"){
            return redirect('/')->with('status',"Admin can't access this page.");
        }
        if((Auth::user()->role == "temp_user")){
            return redirect('/user_appointment_step1');
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['category'] = BusinessCategory::get();
        $data['religion'] = Religion::get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_step1')->with($data);
    }
    public function appointment_step4()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['appointment_date'] = Session::get('appointment_date');
        $data['appointment_time'] = Session::get('appointment_time');
        $data['appointment_reason'] = Session::get('appointment_reason');
        $data['appointment_id'] = Session::get('appointment_id');
        // print_r($data['appointment_id']);die();
        $data['day'] =  Carbon::parse($data['appointment_date'])->format('l');
        $data['client'] = DB::table('client_appointment_lists')
                ->select('client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.company as affiliate_company')
                ->join('users', 'users.id', '=', 'client_appointment_lists.uid')
                ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                ->where('client_appointment_lists.id', $data['appointment_id'])
                ->first();
        //print_r($data['top_banners']);die();
        $data['user'] = DB::table('affiliate_registrations')->where('email',Auth::user()->email)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_step4')->with($data);
    }
    public function appointment_step5()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();
        $data['contacts'] = Contacts::where('uid', $uid)->where('status', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $changeappointmentid = Session::get('changeappointmentid');
        if($changeappointmentid != ""){
            return redirect('confirm_appointment');
        }
        else{
            return view('appointment_step5')->with($data);
        }
    }
    public function confirm_appointment()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['appointment_date'] = Session::get('appointment_date');
        $data['appointment_time'] = Session::get('appointment_time');
        $data['appointment_reason'] = Session::get('appointment_reason');
        $data['appointment_id'] = Session::get('appointment_id');
        $data['day'] =  Carbon::parse($data['appointment_date'])->format('l');
        $data['client'] = DB::table('client_appointment_lists')
                ->select('client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.company as affiliate_company')
                ->join('users', 'users.id', '=', 'client_appointment_lists.uid')
                ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                ->where('client_appointment_lists.id', $data['appointment_id'])
                ->first();
        //print_r($data['top_banners']);die();
        $data['user'] = DB::table('affiliate_registrations')->where('email',Auth::user()->email)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('confirm_appointment')->with($data);
    }
    public function final_appointment()
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $changeappointmentid = Session::get('changeappointmentid');
        if($changeappointmentid == ""){
            $slot = DB::table('appointment_settings')->where('uemail', $uemail)->first();
            $start = Session::get('appointment_time');
            $end = date("H:i", strtotime('+'.$slot->receive_time.' minutes', strtotime($start)));
            $values = array(
                'appointment_id' => Session::get('appointment_id'),
                'appointment_date' => date('Y-m-d', strtotime(Session::get('appointment_date'))),
                'appointment_time' => Session::get('appointment_time'),
                'appointment_end' => $end,
                'appointment_reason' => Session::get('appointment_reason'),
                'additional_comment' => Session::get('additional_comment'),
                'name1' => Session::get('name1'),
                'name2' => Session::get('name2'),
                'name3' => Session::get('name3'),
                'email1' => Session::get('email1'),
                'email2' => Session::get('email2'),
                'email3' => Session::get('email3'),
                'uid'   => $uid
            );
            DB::table('appointments')->insert($values);
            $adate=date('Y-m-d', strtotime(Session::get('appointment_date')));
            $atime=Session::get('appointment_time');
            $notification  = getNotificationMessage(3);
            $message = $notification;
            $subject = "Appointment Booked";
             addUserActivity($subject,'add',$notification,$message);
        }
        else{
            $slot = DB::table('appointment_settings')->where('uemail', $uemail)->first();
            $start = Session::get('appointment_time');
            $end = date("H:i", strtotime('+'.$slot->receive_time.' minutes', strtotime($start)));
            $values = array(
                'appointment_id' => Session::get('appointment_id'),
                'appointment_date' => date('Y-m-d', strtotime(Session::get('appointment_date'))),
                'appointment_time' => Session::get('appointment_time'),
                'appointment_end' => $end,
                'appointment_reason' => Session::get('appointment_reason'),
                'uid'   => $uid
            );
            $appointmentdet = DB::table('appointments')->where('appointments.cstatus', "on")->where('id', $changeappointmentid)->first();
                $prevdate = date('d F Y', strtotime($appointmentdet->appointment_date));
                $prevtime = date('H:i a', strtotime($appointmentdet->appointment_time));
                $newdate = date('d F Y', strtotime(Session::get('appointment_date')));
                $newtime = date('H:i a', strtotime(Session::get('appointment_time')));
                $notification  = getNotificationMessage(4);
            $message = $notification;
            $subject = "Appointment Changed";
            addUserActivity($subject,'update',$notification,$message);
            DB::table('appointments')->where('appointments.cstatus', "on")->where('id', $changeappointmentid)->update($values);
            DB::table('change_appointment')->insert($values);
            Session::put('changeappointmentid', "");
        }
        return redirect('print_appointment');
    }
    public function print_appointment()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['appointment_id'] = Session::get('appointment_id');
        $data['appointment_date'] = date('d F Y', strtotime(Session::get('appointment_date')));
        $data['appointment_time'] = Session::get('appointment_time');
        $data['day'] =  Carbon::parse($data['appointment_date'])->format('l');
        $data['banner1'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $data['banner'] = $data['banner1']->preview;
        $data['client'] = DB::table('client_appointment_lists')
                ->select('client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.company as affiliate_company')
                ->join('users', 'users.id', '=', 'client_appointment_lists.uid')
                ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                ->where('client_appointment_lists.id', $data['appointment_id'])
                ->first();
        //print_r($data['top_banners']);die();
       $data['user'] = DB::table('affiliate_registrations')->where('email',Auth::user()->email)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('print_appointment')->with($data);
    }
    public function add_client()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['category'] = BusinessCategory::get();
        $data['religion'] = Religion::get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('add_client')->with($data);
    }
    public function balancesheet_template2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
          $admin = User::where('role', 'admin')->first();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['uid']=$uid;
        $affiliate=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $category=$affiliate->business_category;
         $data['balancesheet_assets'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'category'=>$category,'main_category'=>'assets'])->get();
         $data['balancesheet_nonassets'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'category'=>$category,'main_category'=>'non_assets'])->get();
         $data['balancesheet_liability'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'category'=>$category,'main_category'=>'liability'])->get();
        // echo "<pre>";print_r($data['balancesheet_liability']);die;
         $data['balancesheet_nonliability'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'category'=>$category,'main_category'=>'non_liability'])->get();
         $data['balancesheet_equity'] = DB::table('balancesheet_account')->where(['uid'=>$uid,'category'=>$category,'main_category'=>'equity'])->get();
        $data['years']=DB::table('current_asset_balancesheet')->orderBy('created_at','desc')
         ->groupBy(DB::raw("DATE_FORMAT(created_at, '%Y-%m-%d')"))
        ->get(array(DB::raw('Year(created_at) as created_at')));
        // $data['record2']=DB::table('noncurrent_asset_balancesheet')->orderBy('created_at','desc')
        //  ->groupBy(DB::raw("DATE_FORMAT(created_at, '%Y-%m-%d')"))
        // ->get(array(DB::raw('Year(created_at) as created_at')));
        // $data['record3']=DB::table('current_liability_balancesheet')->orderBy('created_at','desc')
        //  ->groupBy(DB::raw("DATE_FORMAT(created_at, '%Y-%m-%d')"))
        // ->get(array(DB::raw('Year(created_at) as created_at')));
        // $data['record4']=DB::table('noncurrent_liability_balancesheet')->orderBy('created_at','desc')
        //  ->groupBy(DB::raw("DATE_FORMAT(created_at, '%Y-%m-%d')"))
        // ->get(array(DB::raw('Year(created_at) as created_at')));
        // $data['record5']=DB::table('equity_balancesheet')->orderBy('created_at','desc')
        //  ->groupBy(DB::raw("DATE_FORMAT(created_at, '%Y-%m-%d')"))
        // ->get(array(DB::raw('Year(created_at) as created_at')));
        return view('balancesheet_template2')->with($data);
    }
    public function balancesheet_settings()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $admin = User::where('role', 'admin')->first();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $usr = User::where('id', $uid)->first();
        $affiliate = AffiliateRegistration::where('email', $usr->email)->first();
        $business_category = BusinessCategory::where('id', $affiliate->business_category)->first();
        $category1 = DB::table('financial_template_categories')->where('category', $business_category->category)->first();
        $category2 = "";
        $data['balancesheet_assets'] = "";
        $data['balancesheet_liability'] = "";
        $data['balancesheet_equity'] = "";
        if($affiliate->lead_category != ""){
            $lead_category = LeadsCategory::where('id', $affiliate->lead_category)->first();
            $category2 = DB::table('financial_template_categories')->where('category', $lead_category->category)->first();
        }
    $data['balancesheet_assets'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $business_category->id,'main_category'=>'assets'])->get();
    $data['balancesheet_nonassets'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $business_category->id,'main_category'=>'non_assets'])->get();
    $data['balancesheet_liability'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=>$business_category->id,'main_category'=>'liability'])->get();
      $data['balancesheet_nonliability'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=>$business_category->id,'main_category'=>'non_liability'])->get();
    $data['balancesheet_equity'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=>$business_category->id,'main_category'=>'equity'])->get();
        // if(($category1 != "") && ($category2 != "")){
        //     $data['balancesheet_assets'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $category1->id,'main_category'=>'assets'])->orWhere('category', $category2->id)->get();
        //     $data['balancesheet_nonassets'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $category1->id,'main_category'=>'non_assets'])->orWhere('category', $category2->id)->get();
        //     $data['balancesheet_liability'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=>$category1->id,'main_category'=>'liability'])->orWhere('category', $category2->id)->get();
        //       $data['balancesheet_nonliability'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=>$category1->id,'main_category'=>'non_liability'])->orWhere('category', $category2->id)->get();
        //     $data['balancesheet_equity'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=>$category1->id,'main_category'=>'equity'])->orWhere('category', $category2->id)->get();
        // }
        // elseif(($category1 != "") && ($category2 == "")){
        //     $data['balancesheet_assets'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $category1->id,'main_category'=>'assets'])->get();
        //     $data['balancesheet_nonassets'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $category1->id,'main_category'=>'non_assets'])->get();
        //     $data['balancesheet_liability'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $category1->id,'main_category'=>'liability'])->get();
        //     $data['balancesheet_nonliability'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $category1->id,'main_category'=>'non_liability'])->get();
        //     $data['balancesheet_equity'] = DB::table('balancesheet_account')->where(['uid'=>$admin->id,'category'=> $category1->id,'main_category'=>'equity'])->get();
        // }
        // elseif(($category1 == "") && ($category2 != "")){
        //     $data['balancesheet_assets'] = DB::table('balancesheet_account')->where(['uid'=> $admin->id,'category'=> $category2->id,'main_category'=>'assets'])->get();
        //     $data['balancesheet_nonassets'] = DB::table('balancesheet_account')->where(['uid'=> $admin->id,'category'=> $category2->id,'main_category'=>'non_assets'])->get();
        //     $data['balancesheet_liability'] = DB::table('balancesheet_account')->where(['uid'=> $admin->id,'category'=> $category2->id,'main_category'=>'liability'])->get();
        //     $data['balancesheet_nonliability'] = DB::table('balancesheet_account')->where(['uid'=> $admin->id,'category'=> $category2->id,'main_category'=>'non_liability'])->get();
        //     $data['balancesheet_equity'] = DB::table('balancesheet_account')->where(['uid'=> $admin->id,'category'=> $category2->id,'main_category'=>'equity'])->get();
        // }
        return view('balancesheet_settings')->with($data);
    }
    public function create_expense_account()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('create_expense_account')->with($data);
    }
    public function create_revenue_account()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('create_revenue_account')->with($data);
    }
    public function invoice_setup()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('invoice_setup')->with($data);
    }
    public function client_access()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('client_access')->with($data);
    }
    public function chart_account()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('chart_account')->with($data);
    }
    public function templates()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('templates')->with($data);
    }
    public function setting_tutorials()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['tutorials'] = SettingTutorial::get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('setting_tutorials')->with($data);
    }

    public function introduction_videos()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        // if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
        //     return redirect('/')->with('status', "You can't access this page.");
        // }
        // if(Auth::user()->role == "admin"){
        //         return redirect('/')->with('status',"Admin can't access this page.");
        //     }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['tutorials'] = IntroVideo::get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('introduction_videos')->with($data);
    }
    public function profile_info()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
         $data['is_medical_user'] = BusinessCategory::is_medical_user($aaid);
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $af=AffiliateRegistration::where('email',Auth::user()->email)->first();
       $data["business_category"]=$af->business_category;
       $data['clients'] = ClientAppointmentList::where('uid', $uid)->groupBy('email')->get();
        return view('profile_info')->with($data);
    }
    public function tasks()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['is_medical_user'] = BusinessCategory::is_medical_user($aaid);
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
       // $data['clients'] = ClientAppointmentList::where('uid', $uid)->groupBy('email')->get();
        $data['clients'] = DB::table('user_access_role')->get();
        return view('tasks')->with($data);
    }
    public function forms_library()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
         return redirect('/')->with('status',"Admin can't access this page.");
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
         $data['general_forms']=LibraryForm::get_library_forms(1);
         $data['dentist_forms']=LibraryForm::get_library_forms(2);
         $data['medical_forms']=LibraryForm::get_library_forms(3);;
         $data['pedriatric_forms']=LibraryForm::get_library_forms(4);
        return view('forms_library')->with($data);
    }
    public function change_appointment_step(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $changeappointmentid = $request->id;
        Session::put('changeappointmentid', $changeappointmentid);
        $data = DB::table('appointments')->join('client_appointment_lists', 'appointments.appointment_id', 'client_appointment_lists.id')->where('appointments.id', $request->id)->where('appointments.cstatus', "on")->first();
        $first_name = $data->first_name;
        $last_name = $data->last_name;
        $company = $data->company;
        Session::put('first_name', $first_name);
        Session::put('last_name', $last_name);
        Session::put('company', $company);
        Session::put('clientid', $data->appointment_id);
        return redirect('appointment_step3');
    }


    public function change_appointment_view(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $changeappointmentid = $request->id;
        // $data['appointments'] = DB::table('appointments')->join('client_appointment_lists', 'appointments.appointment_id', 'client_appointment_lists.id')->where('appointments.id', $changeappointmentid)->first();
        $data['appointments'] = DB::table('appointments')
                ->select('client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category', 'affiliate_registrations.company as affiliate_company')
                ->join('users', 'users.id', '=', 'appointments.uid')
                ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
                ->where('appointments.id', $changeappointmentid)
                ->where('appointments.cstatus', "on")
                ->first();
                $data['appointment_date'] = date('d F Y', strtotime(Session::get('appointment_date')));
        // print_r($data['appointments']);
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('change_appointment_view')->with($data);
    }
    public function change_appointment()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "client")){
            return redirect('/member_change_appointment');
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        if(Auth::user()->role == "temp_user"){
            return redirect('user_change_appointment');
        }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['change_details'] = DB::table('appointment_settings')->where('uemail', $uemail)->first();
        $data['appointments'] = DB::table('appointments')->select('*', 'appointments.id AS aid')->join('client_appointment_lists', 'appointments.appointment_id', 'client_appointment_lists.id')->where('appointments.cstatus', "on")->where('appointments.uid', $uid)->orderBy('appointments.id', 'desc')->get();
        $month = Carbon::now()->format('m');
        $year = Carbon::now()->format('Y');
        $textdt=$year."-".$month."-01";
        // $textdt = "2021-02-02";
        $dt= strtotime( $textdt);
        $currdt=$dt;
        $nextmonth=strtotime($textdt."+1 month");
        $i=0;
        $weeklycnt = [];
        do
        {
            $weekday= date("w",$currdt);
            $nextday=7-$weekday;
            $endday=abs($weekday-6);
            $startarr[$i]=$currdt;
            $endarr[$i]=strtotime(date("Y-m-d",$currdt)."+$endday day");
            $currdt=strtotime(date("Y-m-d",$endarr[$i])."+1 day");
            // echo date("Y-m-d",$startarr[$i])." ".date("Y-m-d",$endarr[$i]);
            // $countweek = DB::table('change_appointment')->whereBetween('created_at', [date("Y-m-d",$startarr[$i]), date("Y-m-d",$endarr[$i])])->get();
            $countweek = DB::table('change_appointment')->whereDate('created_at', '>=', date("Y-m-d",$startarr[$i]))->whereDate('created_at', '<=', date("Y-m-d",$endarr[$i]))->where('uid', $uid)->count();
            // print_r($countweek);
            array_push($weeklycnt, $countweek);
            $i++;
        }while($endarr[$i-1]<$nextmonth);
        $data['week1'] = $weeklycnt[0];
        $data['week2'] = $weeklycnt[1];
        $data['week3'] = $weeklycnt[2];
        $data['week4'] = $weeklycnt[3];
        $data['week5'] = $weeklycnt[4];
        $data['weekcnt'] = $i;
        $data['jancount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '01')->where('uid', $uid)->count();
        $data['febcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '02')->where('uid', $uid)->count();
        $data['marcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '03')->where('uid', $uid)->count();
        $data['aprcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '04')->where('uid', $uid)->count();
        $data['maycount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '05')->where('uid', $uid)->count();
        $data['juncount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '06')->where('uid', $uid)->count();
        $data['julcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '07')->where('uid', $uid)->count();
        $data['augcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '08')->where('uid', $uid)->count();
        $data['sepcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '09')->where('uid', $uid)->count();
        $data['octcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '10')->where('uid', $uid)->count();
        $data['novcount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '11')->where('uid', $uid)->count();
        $data['deccount'] = DB::table('change_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '12')->where('uid', $uid)->count();
        $data['janmarcount'] = DB::table('change_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '01')->whereMonth('created_at', '<=', '03')->where('uid', $uid)->count();
        $data['aprjuncount'] = DB::table('change_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '04')->whereMonth('created_at', '<=', '06')->where('uid', $uid)->count();
        $data['julsepcount'] = DB::table('change_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '07')->whereMonth('created_at', '<=', '09')->where('uid', $uid)->count();
        $data['octdeccount'] = DB::table('change_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '10')->whereMonth('created_at', '<=', '12')->where('uid', $uid)->count();
        // print_r($data['jancount']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('change_appointment')->with($data);
    }
    public function cancel_appointment()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if(Auth::user()->role == "temp_user"){
            return redirect('/user_cancel_appointment');
        }
        if((Auth::user()->role == "client")){
            return redirect('/member_cancel_appointment');
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['change_details'] = DB::table('appointment_settings')->where('uemail', $uemail)->first();
        $data['appointments'] = DB::table('appointments')->select('*', 'appointments.id AS aid')->join('client_appointment_lists', 'appointments.appointment_id', 'client_appointment_lists.id')->where('appointments.uid', $uid)->orderBy('appointments.id', 'desc')->get();
        // print_r($data['appointments']);die();
        $month = Carbon::now()->format('m');
        $year = Carbon::now()->format('Y');
        $textdt=$year."-".$month."-01";
        // $textdt = "2021-02-02";
        $dt= strtotime( $textdt);
        $currdt=$dt;
        $nextmonth=strtotime($textdt."+1 month");
        $i=0;
        $weeklycnt = [];
        do
        {
            $weekday= date("w",$currdt);
            $nextday=7-$weekday;
            $endday=abs($weekday-6);
            $startarr[$i]=$currdt;
            $endarr[$i]=strtotime(date("Y-m-d",$currdt)."+$endday day");
            $currdt=strtotime(date("Y-m-d",$endarr[$i])."+1 day");
            // echo date("Y-m-d",$startarr[$i])." ".date("Y-m-d",$endarr[$i]);
            // $countweek = DB::table('cancel_appointment')->whereBetween('created_at', [date("Y-m-d",$startarr[$i]), date("Y-m-d",$endarr[$i])])->get();
            $countweek = DB::table('cancel_appointment')->whereDate('created_at', '>=', date("Y-m-d",$startarr[$i]))->whereDate('created_at', '<=', date("Y-m-d",$endarr[$i]))->where('uid', $uid)->count();
            // print_r($countweek);
            array_push($weeklycnt, $countweek);
            $i++;
        }while($endarr[$i-1]<$nextmonth);
        $data['week1'] = $weeklycnt[0];
        $data['week2'] = $weeklycnt[1];
        $data['week3'] = $weeklycnt[2];
        $data['week4'] = $weeklycnt[3];
        $data['week5'] = $weeklycnt[4];
        $data['weekcnt'] = $i;
        $data['jancount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '01')->where('uid', $uid)->count();
        $data['febcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '02')->where('uid', $uid)->count();
        $data['marcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '03')->where('uid', $uid)->count();
        $data['aprcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '04')->where('uid', $uid)->count();
        $data['maycount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '05')->where('uid', $uid)->count();
        $data['juncount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '06')->where('uid', $uid)->count();
        $data['julcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '07')->where('uid', $uid)->count();
        $data['augcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '08')->where('uid', $uid)->count();
        $data['sepcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '09')->where('uid', $uid)->count();
        $data['octcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '10')->where('uid', $uid)->count();
        $data['novcount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '11')->where('uid', $uid)->count();
        $data['deccount'] = DB::table('cancel_appointment')->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', '12')->where('uid', $uid)->count();
        $data['janmarcount'] = DB::table('cancel_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '01')->whereMonth('created_at', '<=', '03')->where('uid', $uid)->count();
        $data['aprjuncount'] = DB::table('cancel_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '04')->whereMonth('created_at', '<=', '06')->where('uid', $uid)->count();
        $data['julsepcount'] = DB::table('cancel_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '07')->whereMonth('created_at', '<=', '09')->where('uid', $uid)->count();
        $data['octdeccount'] = DB::table('cancel_appointment')->whereYear('created_at', $year)->whereMonth('created_at', '>=', '10')->whereMonth('created_at', '<=', '12')->where('uid', $uid)->count();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('cancel_appointment')->with($data);
    }
    public function delete_appointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $id = explode('delete', $request->id);
        $det = DB::table('appointments')->where('id', $id[1])->first();
        $values = array(
                'appointment_id' => $det->appointment_id,
                'appointment_date' => $det->appointment_date,
                'appointment_time' => $det->appointment_time,
                'appointment_end' => $det->appointment_end,
                'appointment_reason' => $det->appointment_reason,
                'additional_comment' => $det->additional_comment,
                'name1' => $det->name1,
                'name2' => $det->name2,
                'name3' => $det->name3,
                'email1' => $det->email1,
                'email2' => $det->email2,
                'email3' => $det->email3,
                'cancel_reason' => $request->delete_reason,
                'uid'   => $uid
            );
        $values2 = array('cstatus'  => "off");
        DB::table('cancel_appointment')->insert($values);
            $prevdate = date('d F Y', strtotime($det->appointment_date));
            $prevtime = date('H:i a', strtotime($det->appointment_time));

            $notification  = getNotificationMessage(5);
            $message = $notification;
            $subject="Appointment Cacelled";
          addUserActivity($subject,'cancel',$notification,$message);
        DB::table('appointments')->where('appointments.cstatus', "on")->where('id', $id[1])->update($values2);
    }
    public function comparison_appointment()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->join('appointments', 'client_appointment_lists.id', 'appointments.appointment_id')->groupBy('appointments.appointment_id')->get();
        $data['changedappointments'] = DB::table('client_appointment_lists')->join('change_appointment', 'client_appointment_lists.id', 'change_appointment.appointment_id')->groupBy('change_appointment.appointment_id')->get();
        // $clientarr = [];
        // foreach($clients as $value){
        //     array_push($clientarr, $value->id);
        // }
        // $data['client'] = DB::table('appointments')->join('client_appointment_lists', 'appointments.id', 'client_appointment_lists.id')->groupBy('appointments.appointment_id')->get();
        // print_r($data['client']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_appointment')->with($data);
    }
    public function comparison_appointment2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->join('appointments', 'client_appointment_lists.id', 'appointments.appointment_id')->groupBy('appointments.appointment_id')->get();
        $data['changedappointments'] = DB::table('client_appointment_lists')->join('change_appointment', 'client_appointment_lists.id', 'change_appointment.appointment_id')->groupBy('change_appointment.appointment_id')->get();
        // $clientarr = [];
        // foreach($clients as $value){
        //     array_push($clientarr, $value->id);
        // }
        // $data['client'] = DB::table('appointments')->join('client_appointment_lists', 'appointments.id', 'client_appointment_lists.id')->groupBy('appointments.appointment_id')->get();
        // print_r($data['client']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_appointment2')->with($data);
    }
    public function comparison_appointment3()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->join('appointments', 'client_appointment_lists.id', 'appointments.appointment_id')->groupBy('appointments.appointment_id')->get();
        $data['changedappointments'] = DB::table('client_appointment_lists')->join('change_appointment', 'client_appointment_lists.id', 'change_appointment.appointment_id')->groupBy('change_appointment.appointment_id')->get();
        // $clientarr = [];
        // foreach($clients as $value){
        //     array_push($clientarr, $value->id);
        // }
        // $data['client'] = DB::table('appointments')->join('client_appointment_lists', 'appointments.id', 'client_appointment_lists.id')->groupBy('appointments.appointment_id')->get();
        // print_r($data['client']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_appointment3')->with($data);
    }
    public function manage_appointment(Request $request)
    {

        $data['mode']='';
       $daily=$request->input('daily');
       $sdate=$request->input('sdate');
       $edate=$request->input('edate');
       $monthly=$request->input('monthly');

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        // $data['appointments'] = DB::table('appointments')->select('*', 'appointments.id AS aid')->join('client_appointment_lists', 'appointments.appointment_id', 'client_appointment_lists.id')->where('appointments.uid', Auth::id())->orderBy('appointments.id', 'desc')->get();


if(!empty($daily)){
         $data['mode']='daily';

          $data['appointments'] = DB::table('appointments')
                        ->select('appointments.id AS aid', 'appointments.appointment_date AS appointment_date', 'appointments.appointment_time AS appointment_time', 'appointments.cstatus AS cstatus', 'appointments.appointment_reason as appointment_reason',  'client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'client_appointment_lists.id as cid', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category', 'affiliate_registrations.company as affiliate_company')
                        ->join('users', 'users.id', '=', 'appointments.uid')
                        ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                        ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
                        ->where('appointments.uid', Auth::id())
                        ->whereDate('appointments.appointment_date', '=', $daily)
                        ->orderBy('appointments.id', 'desc')
                        ->get();
        }elseif(!empty($monthly)){

          $data['mode']='monthly';

           $data['appointments'] = DB::table('appointments')
                        ->select('appointments.id AS aid', 'appointments.appointment_date AS appointment_date', 'appointments.appointment_time AS appointment_time', 'appointments.cstatus AS cstatus', 'appointments.appointment_reason as appointment_reason',  'client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'client_appointment_lists.id as cid', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category', 'affiliate_registrations.company as affiliate_company')
                        ->join('users', 'users.id', '=', 'appointments.uid')
                        ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                        ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
                        ->where('appointments.uid', Auth::id())
                        ->whereMonth('appointments.appointment_date', '=', $monthly)
                        ->orderBy('appointments.id', 'desc')
                        ->get();
        }elseif (!empty($sdate) && !empty($edate)) {
           $data['mode']='weekly';

            $data['appointments'] = DB::table('appointments')
                        ->select('appointments.id AS aid', 'appointments.appointment_date AS appointment_date', 'appointments.appointment_time AS appointment_time', 'appointments.cstatus AS cstatus', 'appointments.appointment_reason as appointment_reason',  'client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'client_appointment_lists.id as cid', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category', 'affiliate_registrations.company as affiliate_company')
                        ->join('users', 'users.id', '=', 'appointments.uid')
                        ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                        ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
                        ->where('appointments.uid', Auth::id())
                        ->whereBetween('appointments.appointment_date', [$sdate, $edate])
                        ->orderBy('appointments.id', 'desc')
                        ->get();
        }else{
            $querey = DB::table('appointments')
            ->select('appointments.id AS aid', 'appointments.appointment_date AS appointment_date', 'appointments.appointment_time AS appointment_time', 'appointments.cstatus AS cstatus', 'appointments.appointment_reason as appointment_reason',  'client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'client_appointment_lists.id as cid', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category', 'affiliate_registrations.company as affiliate_company')
            ->join('users', 'users.id', '=', 'appointments.uid')
            ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
            ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
            ->where('appointments.uid', Auth::id())
            ->orderBy('appointments.id', 'desc');


            if(request()->has('client')) {
                // dd(request()->client);
                if(request()->client != '') {
                    $querey = $querey->where('appointments.appointment_id', request()->client);
                }
            }
            if(request()->has('month')) {
                if(request()->month != '' && request()->month != "all" && request()->month != "graph") {
                    $querey = $querey->whereMonth('appointments.appointment_date', request()->month);
                }
                elseif(request()->month == "graph") {
                    $y = date('Y');
                    $b_q = DB::table('appointments')->whereYear('appointment_date',$y)->get();

                    // dd($b_q);



                    $graph_data = [];

                    for($m = 1; $m <= 12; $m++) {
                        // $b_q = null;
                        if($m == 1) {
                            $temp_val = $this->grph_data($m);
                            // dd($temp_val);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Jan'] = array('val'=>$this->grph_data($m), 'month' => "Jan");
                            // dd($graph_data['Jan']);
                        }
                        elseif($m == 2) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Feb'] = array('val'=>$this->grph_data($m), 'month' => "Feb");
                        }
                        elseif($m == 3) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Mar'] = array('val'=>$this->grph_data($m), 'month' => "Mar");
                        }
                        elseif($m == 4) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Apr'] = array('val'=>$this->grph_data($m), 'month' => "Apr");
                        }
                        elseif($m == 5) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['May'] = array('val'=>$this->grph_data($m), 'month' => "May");
                        }
                        elseif($m == 6) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Jun'] = array('val'=>$temp_val, 'month' => "Jun");
                        }
                        elseif($m == 7) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Jul'] = array('val'=>$this->grph_data($m), 'month' => "Jul");
                        }
                        elseif($m == 8) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            // dd($this->grph_data(8));
                            $graph_data['Aug'] = array('val'=>$this->grph_data($m), 'month' => "Aug");
                        }
                        elseif($m == 9) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Sep'] = array('val'=>$this->grph_data($m), 'month' => "Sep");
                            // dd($graph_data['Sep']);

                        }
                        elseif($m == 10) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Oct'] = array('val'=>$this->grph_data($m), 'month' => "Oct");
                        }
                        elseif($m == 11) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Nov'] = array('val'=>$this->grph_data($m), 'month' => "Nov");
                        }
                        elseif($m == 12) {
                            $temp_val = $this->grph_data($m);
                            $graph_data_vals[] = $temp_val;
                            $graph_data['Dec'] = array('val'=>$this->grph_data($m), 'month' => "Dec");
                        }

                    }
                    // $a = rsort($graph_data);
                    $data['graph_data'] = collect($graph_data)->sortByDesc('val');
                    $data['graph_data_vals'] = $graph_data_vals;

                }

            }
        $data['appointments'] = $querey->get();




        }

        // dd($data['appointments']->appointment_date);
        // $graph = $data['appointments'];
        // $graph_counts = $graph->count();

        // for ($i=0; $i < $graph_counts; $i++) {
        //     $myMonth = $graph[$i]->appointment_date;
        //     $date1 = Carbon::createFromFormat('Y-m-d', $myMonth);
        //     $monthName = $date1->format('M');

        //     $monthGrapg = $date1->format('M');

            // dd($graph->where('appointment_date', $myMonth)->count());

// dd($monthGrapg);

            // $graph_counts2 = $graph->where($graph->appointment_date, $monthName)->count();

            // dd($graph_counts2);

            // $arr = array($i => $monthName);

            // dd($arr);
        // }



        // $graph_month_1 = $graph->where('appointment_date');
        // dd($graph_);

        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('manage_appointment')->with($data);
    }

    public function grph_data($m) {
        $y = date('Y');

        $o_q = $querey = DB::table('appointments')
                    ->select('appointments.id AS aid', 'appointments.appointment_date AS appointment_date', 'appointments.appointment_time AS appointment_time', 'appointments.cstatus AS cstatus', 'appointments.appointment_reason as appointment_reason',  'client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'client_appointment_lists.id as cid', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category', 'affiliate_registrations.company as affiliate_company')
                    ->join('users', 'users.id', '=', 'appointments.uid')
                    ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                    ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
                    ->where('appointments.uid', Auth::id())
                    ->orderBy('appointments.id', 'desc')->whereYear('appointment_date',$y)->whereMonth('appointment_date',$m)->count();

                // $o_q = DB::table('appointments')->whereYear('appointment_date',$y)->whereMonth('appointment_date',$m)->count();
                return $o_q;
    }
    public function appointment_tutorials()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['tutorials'] = AppointmentTutorial::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_tutorials')->with($data);
    }
    public function schedule_birthday()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = ClientAppointmentList::where('uid', $uid)->get();
        $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('schedule_birthday')->with($data);
    }
    public function schedule_holiday()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['holidays'] = DB::table('holiday')->get();
        $data['clients'] = ClientAppointmentList::where('uid', $uid)->get();
        $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('schedule_holiday')->with($data);
    }
    public function comparison_client()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparison_client')->with($data);
    }
    public function view_holiday()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('view_holiday')->with($data);
    }
    public function view_birthday()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('view_birthday')->with($data);
    }
    public function client_tutorials()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['tutorials'] = ClientTutorial::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('client_tutorials')->with($data);
    }
    public function email_campaign()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
         }
         // $isActivePlan=ActivePlan::is_active_plan();
         // if($isActivePlan==0){
         // return redirect('/')->with('status',"Your plan has been expired please renew your plan");
         // }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();
        $data['folders'] = "";
        $data['contacts'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
            $data['contacts'] = Contacts::where('uid', $uid)->where('folder', '!=', '12')->where('folder', '!=', '13')->where('status', 1)->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
            $data['contacts'] = Contacts::where('uid', $uid)->where('folder', '!=', '11')->where('status', 1)->get();
        }
        $data['scripts'] = ScriptCategory::get();
        $data['greetings'] = DB::table('personalised_greeting')->get();
        $data['titles'] = EmailCampaign::where('uid', $uid)
        ->orderBy('id', 'desc')
        ->groupBy('subject')
        ->get();
        // print_r($data['titles'][1]->subject);die();
        $data['user_banner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        // print_r($data['titles'][0]->subject);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['colors'] = DB::table('background_color')->get();
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('email_campaign')->with($data);
    }
    public function monthly_email_campaign_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->count();
        $data['febmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->count();
        $data['marmail'] = EmailCampaign::where('uid',$uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->count();
        $data['aprmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->count();
        $data['maymail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->count();
        $data['junmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->count();
        $data['julmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->count();
        $data['augmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->count();
        $data['sepmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->count();
        $data['octmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->count();
        $data['novmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->count();
        $data['decmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->count();
        $data['pgtitle'] = "Email Campaign";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_send_email_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->count();
        $data['febmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->count();
        $data['marmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->count();
        $data['aprmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->count();
        $data['maymail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->count();
        $data['junmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->count();
        $data['julmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->count();
        $data['augmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->count();
        $data['sepmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->count();
        $data['octmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->count();
        $data['novmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->count();
        $data['decmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->count();
        $data['pgtitle'] = "Send Email";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_send_card_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->count();
        $data['febmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->count();
        $data['marmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->count();
        $data['aprmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->count();
        $data['maymail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->count();
        $data['junmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->count();
        $data['julmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->count();
        $data['augmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->count();
        $data['sepmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->count();
        $data['octmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->count();
        $data['novmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->count();
        $data['decmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->count();
        $data['pgtitle'] = "Send Card";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_send_video_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->count();
        $data['febmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->count();
        $data['marmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->count();
        $data['aprmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->count();
        $data['maymail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->count();
        $data['junmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->count();
        $data['julmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->count();
        $data['augmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->count();
        $data['sepmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->count();
        $data['octmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->count();
        $data['novmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->count();
        $data['decmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->count();
        $data['pgtitle'] = "Send Video";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_send_sms_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->count();
        $data['febmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->count();
        $data['marmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->count();
        $data['aprmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->count();
        $data['maymail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->count();
        $data['junmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->count();
        $data['julmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->count();
        $data['augmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->count();
        $data['sepmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->count();
        $data['octmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->count();
        $data['novmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->count();
        $data['decmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->count();
        $data['pgtitle'] = "Send Sms";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_email_campaign_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('email', $request->id)->count();
        $data['febmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('email', $request->id)->count();
        $data['marmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('email', $request->id)->count();
        $data['aprmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('email', $request->id)->count();
        $data['maymail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('email', $request->id)->count();
        $data['junmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('email', $request->id)->count();
        $data['julmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('email', $request->id)->count();
        $data['augmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('email', $request->id)->count();
        $data['sepmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('email', $request->id)->count();
        $data['octmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('email', $request->id)->count();
        $data['novmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('email', $request->id)->count();
        $data['decmail'] = EmailCampaign::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('email', $request->id)->count();
        $data['pgtitle'] = "Email Campaign";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_send_email_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('email', $request->id)->count();
        $data['febmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('email', $request->id)->count();
        $data['marmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('email', $request->id)->count();
        $data['aprmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('email', $request->id)->count();
        $data['maymail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('email', $request->id)->count();
        $data['junmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('email', $request->id)->count();
        $data['julmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('email', $request->id)->count();
        $data['augmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('email', $request->id)->count();
        $data['sepmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('email', $request->id)->count();
        $data['octmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('email', $request->id)->count();
        $data['novmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('email', $request->id)->count();
        $data['decmail'] = SendEmail::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('email', $request->id)->count();
        $data['pgtitle'] = "Send Email";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_send_card_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('email', $request->id)->count();
        $data['febmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('email', $request->id)->count();
        $data['marmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('email', $request->id)->count();
        $data['aprmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('email', $request->id)->count();
        $data['maymail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('email', $request->id)->count();
        $data['junmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('email', $request->id)->count();
        $data['julmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('email', $request->id)->count();
        $data['augmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('email', $request->id)->count();
        $data['sepmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('email', $request->id)->count();
        $data['octmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('email', $request->id)->count();
        $data['novmail'] = SendCard::where('uid',$uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('email', $request->id)->count();
        $data['decmail'] = SendCard::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('email', $request->id)->count();
        $data['pgtitle'] = "Send Card";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_client_appointment_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('appointment_id', $request->id)->count();
        $data['febmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('appointment_id', $request->id)->count();
        $data['marmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('appointment_id', $request->id)->count();
        $data['aprmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('appointment_id', $request->id)->count();
        $data['maymail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('appointment_id', $request->id)->count();
        $data['junmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('appointment_id', $request->id)->count();
        $data['julmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('appointment_id', $request->id)->count();
        $data['augmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('appointment_id', $request->id)->count();
        $data['sepmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('appointment_id', $request->id)->count();
        $data['octmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('appointment_id', $request->id)->count();
        $data['novmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('appointment_id', $request->id)->count();
        $data['decmail'] = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('appointment_id', $request->id)->count();
        $data['pgtitle'] = "Appointment Comparison";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_client_appointment_chartt')->with($data);
    }
    public function monthly_asset_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('description', $request->desc)->sum('price');
        $data['febmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('description', $request->desc)->sum('price');
        $data['marmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('description', $request->desc)->sum('price');
        $data['aprmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('description', $request->desc)->sum('price');
        $data['maymail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('description', $request->desc)->sum('price');
        $data['junmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('description', $request->desc)->sum('price');
        $data['julmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('description', $request->desc)->sum('price');
        $data['augmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('description', $request->desc)->sum('price');
        $data['sepmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('description', $request->desc)->sum('price');
        $data['octmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('description', $request->desc)->sum('price');
        $data['novmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('description', $request->desc)->sum('price');
        $data['decmail'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('description', $request->desc)->sum('price');
        $data['pgtitle'] = "Manage Assets";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_client_appointment_chartt')->with($data);
    }
    public function monthly_new_appointment_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['febmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['marmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['aprmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['maymail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['junmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid',$uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['julmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['augmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['sepmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['octmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['novmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['decmail'] = count(DB::table('appointments')->select(DB::raw('count(*) as user_count, email1'))->where('email1', '<=', 1)->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('appointment_id', $request->id)->where('appointments.cstatus', "on")->groupBy('email1')->get());
        $data['pgtitle'] = "New Appointment Comparison";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_client_appointment_chartt')->with($data);
    }
    public function monthly_change_appointment_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('appointment_id', $request->id)->count();
        $data['febmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('appointment_id', $request->id)->count();
        $data['marmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('appointment_id', $request->id)->count();
        $data['aprmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('appointment_id', $request->id)->count();
        $data['maymail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('appointment_id', $request->id)->count();
        $data['junmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('appointment_id', $request->id)->count();
        $data['julmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('appointment_id', $request->id)->count();
        $data['augmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('appointment_id', $request->id)->count();
        $data['sepmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('appointment_id', $request->id)->count();
        $data['octmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('appointment_id', $request->id)->count();
        $data['novmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('appointment_id', $request->id)->count();
        $data['decmail'] = DB::table('change_appointment')->where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('appointment_id', $request->id)->count();
        $data['pgtitle'] = "Change Appointment";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_client_appointment_chartt')->with($data);
    }
    public function monthly_send_video_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('email', $request->id)->count();
        $data['febmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('email', $request->id)->count();
        $data['marmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('email', $request->id)->count();
        $data['aprmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('email', $request->id)->count();
        $data['maymail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('email', $request->id)->count();
        $data['junmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('email', $request->id)->count();
        $data['julmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('email', $request->id)->count();
        $data['augmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('email', $request->id)->count();
        $data['sepmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('email', $request->id)->count();
        $data['octmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('email', $request->id)->count();
        $data['novmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('email', $request->id)->count();
        $data['decmail'] = SendVideo::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('email', $request->id)->count();
        $data['pgtitle'] = "Send Video";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function monthly_send_sms_chartt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '01')->where('email', $request->id)->count();
        $data['febmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '02')->where('email', $request->id)->count();
        $data['marmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '03')->where('email', $request->id)->count();
        $data['aprmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '04')->where('email', $request->id)->count();
        $data['maymail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '05')->where('email', $request->id)->count();
        $data['junmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '06')->where('email', $request->id)->count();
        $data['julmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '07')->where('email', $request->id)->count();
        $data['augmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '08')->where('email', $request->id)->count();
        $data['sepmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '09')->where('email', $request->id)->count();
        $data['octmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '10')->where('email', $request->id)->count();
        $data['novmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '11')->where('email', $request->id)->count();
        $data['decmail'] = SendSms::where('uid', $uid)->whereYear('created_at', date('Y'))->whereMonth('created_at', '12')->where('email', $request->id)->count();
        $data['pgtitle'] = "Send Sms";
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_email_campaign_chart')->with($data);
    }
    public function send_email($id="")
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();
        $data['folders'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        }
         $data['contacts'] ="";
         $data['id'] =$id;
        if(!empty($id))
        {
            $data['contacts'] = Contacts::where('uid', $uid)->where('folder',$id)->where('status', 1)->get();
        }

        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['scripts'] = ScriptCategory::get();
        $data['greetings'] = DB::table('personalised_greeting')->get();
        $data['titles'] = EmailCampaign::where('uid', $uid)
        ->orderBy('id', 'desc')
        ->groupBy('subject')
        ->get();
        $data['colors'] = DB::table('background_color')->get();
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('send_email')->with($data);
    }
    public function send_cards()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['scripts'] = ScriptCategory::get();
        $data['greetings'] = DB::table('personalised_greeting')->get();
        $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();

        $data['titles'] = EmailCampaign::where('uid', $uid)
        ->orderBy('id', 'desc')
        ->groupBy('subject')
        ->get();
        // print_r($data['cards']);die();
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();
        $data['folders'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        }
        $data['contacts'] = Contacts::where('uid', $uid)->where('status', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['colors'] = DB::table('background_color')->get();
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('send_cards')->with($data);
    }
    public static function get_card_image($category){
        $images = UploadCard::where('category', $category)->get();
        return $images;
    }
    public static function get_scripts_image($category){
        $images = UploadScript::where('category', $category)->get();
        return $images;
    }
    public function send_video()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['scripts'] = ScriptCategory::get();
        $data['greetings'] = DB::table('personalised_greeting')->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();

        $data['titles'] = EmailCampaign::where('uid', $uid)
        ->orderBy('id', 'desc')
        ->groupBy('subject')
        ->get();
        $data['folders'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        }
        $data['contacts'] = Contacts::where('uid', $uid)->where('status', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['colors'] = DB::table('background_color')->get();
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('send_video')->with($data);
    }
 public function test_send_sms()
    {
        $receiverNumber = "+91 1234567890";
        $message = "This is testing from mafama.com";

        try {

            $account_sid = getenv("TWILIO_SID");
            $auth_token = getenv("TWILIO_TOKEN");
            $twilio_number = getenv("TWILIO_FROM");

            $client = new Client($account_sid, $auth_token);
            $client->messages->create($receiverNumber, [
                'from' => $twilio_number,
                'body' => $message]);

            dd('SMS Sent Successfully.');

        } catch (Exception $e) {
            dd("Error: ". $e->getMessage());
        }
    }
    public function send_sms()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();
        $data['folders'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        }
        $data['contacts'] = Contacts::where('uid', $uid)->where('status', 1)->get();
        $data['scripts'] = ScriptCategory::get();
        $data['greetings'] = DB::table('personalised_greeting')->get();
        $data['titles'] = SendSms::where('uid', $uid)->orderBy('id', 'desc')->groupBy('subject')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('send_sms')->with($data);
    }
    public function comparison_email()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['email_campaigns'] = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_email'] = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_card'] = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_video'] = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_sms'] = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('comparison_email')->with($data);
    }
    public function comparison_email2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['email_campaigns'] = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_email'] = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_card'] = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_video'] = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_sms'] = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_email2')->with($data);
    }
    public function comparison_email3()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['email_campaigns'] = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_email'] = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_card'] = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_video'] = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_sms'] = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_email3')->with($data);
    }
    public function manage_folders()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();
        $data['folders'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        }
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('manage_folders')->with($data);
    }
    public function manage_contacts()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->get();
        // $data['folders'] = "";
        // if(Auth::user()->role == "user"){
        //     $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        // }
        // else{
        //     $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->where('folder_name', '!=', "Basket X")->where('folder_name', '!=', "Family")->where('folder_name', '!=', "Friends")->where('folder_name', '!=', "Client")->where('folder_name', '!=', "VIP client")get();
        // }
        // $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->where('folder_name', '!=', "Basket X")->where('folder_name', '!=', "Family")->where('folder_name', '!=', "Friends")->where('folder_name', '!=', "Client")->where('folder_name', '!=', "VIP client")->get();
        $data['folders'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        }
        $data['contacts'] = DB::table('folders')->join('contacts', 'folders.id', '=', 'contacts.folder')->where('contacts.uid', Auth::id())->orderBy('contacts.id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('manage_contacts')->with($data);
    }
    public function manage_emails()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['emails'] = Contacts::where('uid', $uid)->orderBy('id', 'desc')->where('status', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('manage_emails')->with($data);
    }
    public function uploads()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['category'] = UploadCard::groupBy('category')->orderBy('category','desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('uploads')->with($data);
    }
    public function email_tutorials()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = EmailManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
         $data['tutorials'] = EmailTutorial::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $aff_data=AffiliateRegistration::where('email',Auth::user()->email)->first();
        $data['my_referral_link'] ='';
        $data['my_profile_link'] ='';
        if(!empty($aff_data->code)){
            $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
            $data['my_referral_link'] =$sponsor_link;
            $data['my_profile_link']=url('user/'.$aff_data->username);
        }
        return view('email_tutorials')->with($data);
    }
    public function revenue_records(Request $request)
    {
       $data['mode']='';
       $data['cmonth']=date('m');
       $daily=$request->input('daily');
       $sdate=$request->input('sdate');
       $edate=$request->input('edate');
       $monthly=$request->input('monthly');



        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->where('uid', $uid)->get();
        $data['revenue_account'] = DB::table('revenue_account')->where('uid', $uid)->where('account_name', '!=', "Sales Tax Collected")->where('account_name', '!=', "Shipping Collected")->orderBy('id', 'desc')->get();


        if(!empty($daily)){
         $data['mode']='daily';
         $data['cmonth']=date('m',strtotime($daily));
         $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereDate('transaction_date', '=', $daily)->orderBy('transaction_date', 'desc')->get();
        }elseif(!empty($monthly)){
          $data['mode']='monthly';
           $data['cmonth']=$monthly;
          $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', $monthly)->orderBy('transaction_date', 'desc')->get();
        }elseif (!empty($sdate) && !empty($edate)) {
           $data['mode']='weekly';
            $data['cmonth']=date('m',strtotime($sdate));
           $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereBetween('transaction_date', [$sdate, $edate])->orderBy('transaction_date', 'desc')->get();
        }else{
        $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', date('m'))->orderBy('transaction_date', 'desc')->get();
        }


        $data['banner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $data['invoice_setup'] = FinancialInvoiceSetup::where('uid', $uid)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }

        $uid123 = Auth::id();
        $data['disc'] = Discount::where('uid', $uid123)->first();

        // if(empty($data['disc'])){
        //     $data['disc'] = null;
        // }
        return view('revenue_records')->with($data);
    }

    public function revenue_records_neg(Request $request)
    {
        $client = $request->client;
       $data['mode']='';
       $data['cmonth']=date('m');
       $daily=$request->input('daily');
       $sdate=$request->input('sdate');
       $edate=$request->input('edate');
       $monthly=$request->input('monthly');




        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->where('uid', $uid)->get();
        $data['client_data'] = DB::table('client_appointment_lists')->where('id', $client)->get();
        $data['revenue_account'] = DB::table('revenue_account')->where('uid', $uid)->where('account_name', '!=', "Sales Tax Collected")->where('account_name', '!=', "Shipping Collected")->orderBy('id', 'desc')->get();


        if(!empty($daily)){
         $data['mode']='daily';
         $data['cmonth']=date('m',strtotime($daily));
         $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereDate('transaction_date', '=', $daily)->orderBy('transaction_date', 'desc')->get();
        }elseif(!empty($monthly)){
          $data['mode']='monthly';
           $data['cmonth']=$monthly;
          $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', $monthly)->orderBy('transaction_date', 'desc')->get();
        }elseif (!empty($sdate) && !empty($edate)) {
           $data['mode']='weekly';
            $data['cmonth']=date('m',strtotime($sdate));
           $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereBetween('transaction_date', [$sdate, $edate])->orderBy('transaction_date', 'desc')->get();
        }else{
        $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', date('m'))->orderBy('transaction_date', 'desc')->get();
        }


        $data['banner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $data['invoice_setup'] = FinancialInvoiceSetup::where('uid', $uid)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }
        return view('revenue_records_neg')->with($data);
    }

    public function revenue_records_pos(Request $request)
    {
        $client = $request->client;
       $data['mode']='';
       $data['cmonth']=date('m');
       $daily=$request->input('daily');
       $sdate=$request->input('sdate');
       $edate=$request->input('edate');
       $monthly=$request->input('monthly');

       $client_data = DB::table('client_appointment_lists')->where('id', $client)->get();

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->where('uid', $uid)->get();
        $data['revenue_account'] = DB::table('revenue_account')->where('uid', $uid)->where('account_name', '!=', "Sales Tax Collected")->where('account_name', '!=', "Shipping Collected")->orderBy('id', 'desc')->get();


        if(!empty($daily)){
         $data['mode']='daily';
         $data['cmonth']=date('m',strtotime($daily));
         $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereDate('transaction_date', '=', $daily)->orderBy('transaction_date', 'desc')->get();
        }elseif(!empty($monthly)){
          $data['mode']='monthly';
           $data['cmonth']=$monthly;
          $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', $monthly)->orderBy('transaction_date', 'desc')->get();
        }elseif (!empty($sdate) && !empty($edate)) {
           $data['mode']='weekly';
            $data['cmonth']=date('m',strtotime($sdate));
           $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereBetween('transaction_date', [$sdate, $edate])->orderBy('transaction_date', 'desc')->get();
        }else{
        $data['revenue_records'] = DB::table('revenue_record')->where('account_description', '!=', "Sales Tax Collected")->where('account_description', '!=', "Shipping Collected")->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', date('m'))->orderBy('transaction_date', 'desc')->get();
        }


        $data['banner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $data['invoice_setup'] = FinancialInvoiceSetup::where('uid', $uid)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        $data['client_data'] = $client_data;
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }
        return view('revenue_records_pos')->with($data);
    }

    public function edit_revenue_record(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        Session::put('revenue_id', $request->id);
        return redirect('up_revenue_record');
    }
    public function up_revenue_record()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $revenue_id = Session::get('revenue_id');
        if($revenue_id == ""){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        $uid = "";
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
            $uemail = Auth::user()->email;
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->where('uid', $uid)->get();
        $data['revenue_records'] = DB::table('revenue_record')->where('id', $revenue_id)->first();
        $data['account_revenue'] = "";
        $account_revenue = DB::table('revenue_account')->where('account_name', $data['revenue_records']->account_description)->first();
        if($account_revenue != ""){
            $data['account_revenue'] = $account_revenue->amount;
        }
        $data['revenue_account'] = DB::table('revenue_account')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['banner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $data['invoice_setup'] = FinancialInvoiceSetup::where('uid', $uid)->first();
        // print_r($data['account_revenue']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }

        $data['disc'] = Discount::where('uid', $uid)->first();
        return view('edit_revenue_record')->with($data);
    }
    public function expenses_reord(Request $request)
    {
        $data['mode']='';
         $data['cmonth']=date('m');
       $daily=$request->input('daily');
       $sdate=$request->input('sdate');
       $edate=$request->input('edate');
       $monthly=$request->input('monthly');
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['expenses_account'] = DB::table('expenses_account')->where('uid', $uid)->orderBy('id', 'desc')->get();


if(!empty($daily)){
         $data['mode']='daily';
           $data['cmonth']=date('m',strtotime($daily));
          $data['expense_record'] = DB::table('expense_record')->where('uid',$uid)->whereDate('transaction_date', '=', $daily)->orderBy('transaction_date', 'desc')->get();
        }elseif(!empty($monthly)){
          $data['mode']='monthly';
            $data['cmonth']=$monthly;
          $data['expense_record'] = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', $monthly)->orderBy('transaction_date', 'desc')->get();
        }elseif (!empty($sdate) && !empty($edate)) {
           $data['mode']='weekly';
            $data['cmonth']=date('m',strtotime($sdate));
           $data['expense_record'] = DB::table('expense_record')->where('uid',$uid)->whereBetween('transaction_date', [$sdate, $edate])->orderBy('transaction_date', 'desc')->get();
        }else{
        $data['expense_record'] = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', date('m'))->orderBy('transaction_date', 'desc')->get();
        }
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }
        return view('expenses_reord')->with($data);
    }
    public function edit_expense_record(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['expense_record'] = DB::table('expense_record')->where('id', $request->id)->first();
        $data['expenses_account'] = DB::table('expenses_account')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['account_expense'] = DB::table('expenses_account')->where('account_name', $data['expense_record']->account_description)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }
        return view('edit_expense_record')->with($data);
    }
    public function manage_assets()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['record'] = DB::table('asset_record')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }
        return view('manage_assets')->with($data);
    }
    public function manage_assets_edit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        Session::put('manage_assets_id', $request->id);
        return redirect('up_assets_edit');
    }
    public function up_assets_edit()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $id = Session::get('manage_assets_id');
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['record'] = DB::table('asset_record')->where('id', $id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        $data['upload_files'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
            if($cdet->upload_files == "on"){
                $data['upload_files'] = "on";
            }
            else{
                $data['upload_files'] = "off";
            }
        }
        return view('manage_assets_edit')->with($data);
    }
    public function manage_assets_delete(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $val = DB::table('asset_record')->where('id', $request->id)->first();
         $notification  = getNotificationMessage(8);
            $message = $notification;
            $subject = "Asset Record Deletion";
           addUserActivity($subject,'delete',$notification,$message);
        $values2 = array(
            'purchase_date'         => $val->purchase_date,
            'quantity'              => $val->quantity,
            'price'                 => $val->price,
            'description'           => $val->description,
            'updated_at'            => date('Y-m-d H:i:s'),
            'uid'                   => $uid,
            'reason'                => $request->reason,
            'asset_id'              => $request->id,
            'user_email'            => Auth::user()->email
        );
        DB::table('asset_record_delete')->insert($values2);
        DB::table('asset_record')->where('id', $request->id)->delete();
        DB::table('asset_record_update')->where('asset_id', $request->id)->delete();
        return redirect('manage_assets');
    }
    public function upload_files_delete(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $val = DB::table('upload_files')->where('id', $request->id)->first();
          $notification  = getNotificationMessage(26);
            $message = $notification;
        $subject = "File Deletion";
        addUserActivity($subject,'delete',$notification,$message);
        $values2 = array(
            'file'      => $val->file,
            'uid'       => $uid,
            'reason'    => $request->reason,
        );
        DB::table('upload_files_delete')->insert($values2);
        DB::table('upload_files')->where('id', $request->id)->delete();
        return redirect('upload_files');
    }
    public function delete_revenue_record(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $revenuee = DB::table('revenue_record')->where('id', $request->id)->first();
         $notification  = getNotificationMessage(14);
            $message = $notification;
        $subject = "Record Revenue Deletion";
       addUserActivity($subject,'delete',$notification,$message);
        $revenue_id = $request->id;
        $val = DB::table('revenue_record')->where('id', $revenue_id)->first();
        $values2 = array(
            'client_name'           => $val->client_name,
            'client_email'          => $val->client_email,
            'transaction_date'      => $val->transaction_date,
            'account_description'   => $val->account_description,
            'bill'                  => $val->bill,
            'tax'                   => $val->tax,
            'shipping'              => $val->shipping,
            'total'                 => $val->total,
            'amount_paid'           => $val->amount_paid,
            'balance'               => $val->balance,
            'created_at'            => date('Y-m-d H:i:s'),
            'reason'                => $request->reason,
            'uid'                   => $uid,
            'user_email'            => Auth::user()->email
        );
        DB::table('revenue_record_delete')->insert($values2);
        DB::table('revenue_record')->where('id', $revenue_id)->delete();
        DB::table('revenue_record_update')->where('rev_id', $revenue_id)->delete();
        $data['years'] = [];
            for($i = 0; $i < 10; $i++){
                $lastYear = date("Y", strtotime("-$i years"));
                if($lastYear > 2019){
                    array_push($data['years'], $lastYear);
                }
            }
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
            $invoice_setup = FinancialInvoiceSetup::where('uid', $uid)->first();
            foreach($data['years'] as $year){
                foreach($months as $month){
                    if($invoice_setup->is_tax == 1){
                        $tax = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('tax');
                        $revrecrd1 = DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                        if(count($revrecrd1) > 0){
                            DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->update([
                                'bill'                  => $tax,
                                'total'                 => $tax,
                                'amount_paid'           => $tax,
                            ]);
                        }else{
                            DB::table('revenue_record')->insert([
                                'transaction_date'      => $year."-".$month."-01",
                                'account_description'   => "Sales Tax Collected",
                                'bill'                  => $tax,
                                'tax'                   => "0",
                                'shipping'              => "0",
                                'total'                 => $tax,
                                'amount_paid'           => $tax,
                                'balance'               => "0",
                                'created_at'            => $year."-".$month."-01",
                                'uid'                   => $uid
                            ]);
                        }
                    }
                    if($invoice_setup->shipping_cost == 1){
                        $shipping = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('shipping');
                        $revrecrd2 = DB::table('revenue_record')->where('account_description', 'Shipping Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                        if(count($revrecrd2) > 0){
                            DB::table('revenue_record')->where('account_description', 'Shipping Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->update([
                                'bill'                  => $shipping,
                                'total'                 => $shipping,
                                'amount_paid'           => $shipping,
                            ]);
                        }else{
                            DB::table('revenue_record')->insert([
                                'transaction_date'      => $year."-".$month."-01",
                                'account_description'   => "Shipping Collected",
                                'bill'                  => $shipping,
                                'tax'                   => "0",
                                'shipping'              => "0",
                                'total'                 => $shipping,
                                'amount_paid'           => $shipping,
                                'balance'               => "0",
                                'created_at'            => $year."-".$month."-01",
                                'uid'                   => $uid
                            ]);
                        }
                    }
                }
            }
    }
    public function delete_expense_record(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $expense = DB::table('expense_record')->where('id', $request->id)->first();
        $notification  = getNotificationMessage(11);
            $message = $notification;
        $subject = "Expense Record Deletion";
        addUserActivity($subject,'delete',$notification,$message);
        $revenue_id = $request->id;
        $val = DB::table('expense_record')->where('id', $revenue_id)->first();
        $values2 = array(
            'transaction_date'      => $val->transaction_date,
            'account_description'   => $val->account_description,
            'total'                 => $val->total,
            'amount_paid'           => $val->amount_paid,
            'balance'               => $val->balance,
            'created_at'            => date('Y-m-d H:i:s'),
            'reason'                => $request->reason,
            'uid'                   => $uid,
            'user_email'            => Auth::user()->email
        );
        DB::table('expense_record_delete')->insert($values2);
        DB::table('expense_record')->where('id', $revenue_id)->delete();
        DB::table('expense_record_update')->where('exp_id', $revenue_id)->delete();
    }
    public function balancesheet()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('balancesheet')->with($data);
    }
    public function monthly_budget_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_budget')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_budget_chart')->with($data);
    }
    public function monthly_expense_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_budget')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_expense_chart')->with($data);
    }
    public function monthly_projection_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_projection')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_projection_chart')->with($data);
    }
    public function monthly_projectionexp_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_projection')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_projectionexp_chart')->with($data);
    }
    public function quarterly_budget_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_quaterly_budget')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('quarterly_budget_chart')->with($data);
    }
    public function quarterly_expense_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_quaterly_budget')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('quarterly_expense_chart')->with($data);
    }
    public function quarterly_projection_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_quaterly_projection')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('quarterly_projection_chart')->with($data);
    }
    public function quarterly_projectionexp_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_quaterly_projection')->where('id', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('quarterly_projectionexp_chart')->with($data);
    }
    public function total_monthly_budget_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_monthly_budget_chart')->with($data);
    }
    public function total_monthly_expense_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_monthly_expense_chart')->with($data);
    }
    public function total_monthly_projection_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_monthly_projection_chart')->with($data);
    }
    public function total_monthly_projectionexp_chart()
    {
         if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_monthly_projectionexp_chart')->with($data);
    }
    public function total_quarterly_budget_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_quarterly_budget_chart')->with($data);
    }
    public function total_quarterly_expense_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_quarterly_expense_chart')->with($data);
    }
    public function total_quarterly_projection_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_quarterly_projection_chart')->with($data);
    }
    public function total_quarterly_projectionexp_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_quarterly_projectionexp_chart')->with($data);
    }

    public function create_budget_year(Request $request)
    {
        $year=$request->year;

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();

        $existrevenue = [];
        foreach ($data['revenue'] as $value) {
            array_push($existrevenue, $value->name);
        }
        $data['revenue_account'] = DB::table('revenue_account')->whereNotIn('account_name', $existrevenue)->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count'] = $data['revenue'][0]->id;
        }else{
            $data['revenue_count'] = 0;
        }
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count'] = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count'] = 0;
        }
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['quaterlytotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

     ob_start();
        $rev=$data['revenue'];
     $revenue_count=$data['revenue_count'];

     $jantotal=$data['jantotal'];
        $febtotal=$data['febtotal'];
        $martotal=$data['martotal'];
        $aprtotal=$data['aprtotal'];
        $maytotal=$data['maytotal'];
        $juntotal=$data['juntotal'];
        $jultotal=$data['jultotal'];
        $augtotal=$data['augtotal'];
        $septotal=$data['septotal'];
        $octtotal=$data['octtotal'];
        $novtotal=$data['novtotal'];
        $dectotal=$data['dectotal'] ;
        $monthtotal=$data['monthtotal'];
        $revenue_quaterly=$data['revenue_quaterly'];
        $janmartotal=$data['janmartotal'];
        $aprjuntotal=$data['aprjuntotal'];
        $julseptotal=$data['julseptotal'];
        $octdectotal=$data['octdectotal'];
        $quaterlytotal=$data['quaterlytotal'];
        $chat=$data['chat'] = "";
        $tools=$data['tools'] = "";



?>

                                 <div class="table-wrap">
                                    <table class="table table-striped table-bordered table-hover main-table" id="">
                                       <thead>
                                          <tr>
                                             <th></th>
                                             <th>Jan</th>
                                             <th>Feb</th>
                                             <th>Mar</th>
                                             <th>Apr</th>
                                             <th>May</th>
                                             <th>Jun</th>
                                             <th>Jul</th>
                                             <th>Aug</th>
                                             <th>Sep</th>
                                             <th>Oct</th>
                                             <th>Nov</th>
                                             <th>Dec</th>
                                             <th>Total</th>
                                             <th>Graph</th>
                                          </tr>
                                          <tr>
                                             <th class="">
                                                <!-- <a href="javascript:void(0);" class="add_button" title="Add field">
                                                   <span class="glyphicon glyphicon-plus" style="text-align: center; color: white; font-size: 20px; font-weight: bold"></span>
                                                   </a> -->
                                             </th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th></th>
                                          </tr>
                                       </thead>
                                       <tbody class="field_wrapper">
                                          <?php

                                          if(count($rev)==0){
                                            ?>
                                            <tr class="odd gradeX monthly">
                                                <td></td><td></td><td></td>
                                                <td></td><td></td><td></td>
                                                <td></td><td>No data found</td><td></td>
                                                <td></td><td></td><td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                            </tr>
                                            <?php
                                          }else{
                                             $currmon = date('m');
                                             $curryear=date('y');


                                             foreach ($rev as $value) {

if($curryear > date('y',strtotime($value->created_at))){
    $readonly="readonly";
    $disabled="disabled";
}else{
      $readonly="";
        $disabled="";

    }


                                                 ?>
                                          <tr class="odd gradeX monthly" id="row<?= $value->id ?>">
                                             <td class="budget_name">
                                                <!-- <select class="form-control" required disabled>
                                                   <option value="<?= $value->name ?>"><?= $value->name ?></option>
                                                   </select>
                                                   <p style="color: red; text-align: left; margin-bottom: 2px; display: none">*required</p> -->
                                                <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
                                             </td>
                                             <td class="jan">
                                                <input type="number" class="form-control" value="<?= $value->jan ?>" id="jan<?= $value->id ?>" <?php if($currmon >= "01"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="feb">
                                                <input type="number" class="form-control" value="<?= $value->feb ?>" id="feb<?= $value->id ?>" <?php if($currmon >= "02"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="mar">
                                                <input type="number" class="form-control" value="<?= $value->mar ?>" id="mar<?= $value->id ?>" <?php if($currmon >= "03"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="apr">
                                                <input type="number" class="form-control" value="<?= $value->apr ?>" id="apr<?= $value->id ?>" <?php if($currmon >= "04"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="may">
                                                <input type="number" class="form-control" value="<?= $value->may ?>" id="may<?= $value->id ?>" <?php if($currmon >= "05"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="jun">
                                                <input type="number" class="form-control" value="<?= $value->jun ?>" id="jun<?= $value->id ?>" <?php if($currmon >= "06"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="jul">
                                                <input type="number" class="form-control" value="<?= $value->jul ?>" id="jul<?= $value->id ?>" <?php if($currmon >= "07"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="aug">
                                                <input type="number" class="form-control" value="<?= $value->aug ?>" id="aug<?= $value->id ?>" <?php if($currmon >= "08"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="sep">
                                                <input type="number" class="form-control" value="<?= $value->sep ?>" id="sep<?= $value->id ?>" <?php if($currmon >= "09"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="oct">
                                                <input type="number" class="form-control" value="<?= $value->oct ?>" id="oct<?= $value->id ?>" <?php if($currmon >= "10"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="nov">
                                                <input type="number" class="form-control" value="<?= $value->nov ?>" id="nov<?= $value->id ?>" <?php if($currmon >= "11"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="dec">
                                                <input type="number" class="form-control" value="<?= $value->decem ?>" id="dec<?= $value->id ?>" <?php if($currmon >= "12"){ echo  "readonly"; }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="budg_total">
                                                <?= ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?>
                                             </td>
                                             <td class="showgraph" id="showgraph<?= $value->id ?>">
                                                <a href="<?php echo url('monthly_budget_chart')."/".$value->id ?>">
                                                   <div id="bar-chart<?= $value->id ?>" style="height: 20px; width: 50px"></div>
                                                </a>
                                                <script type="text/javascript">
                                                   $(function () {
                                                     "use strict";

                                                                 //BAR CHART
                                                                 var bar = new Morris.Bar({
                                                                   element: 'bar-chart<?= $value->id ?>',
                                                                   resize: true,
                                                                   data: [
                                                                   {y: '', a: <?= $value->jan ?>},
                                                                   {y: '', a: <?= $value->feb ?>},
                                                                   {y: '', a: <?= $value->mar ?>},
                                                                   {y: '', a: <?= $value->apr ?>},
                                                                   {y: '', a: <?= $value->may ?>},
                                                                   {y: '', a: <?= $value->jun ?>},
                                                                   {y: '', a: <?= $value->jul ?>},
                                                                   {y: '', a: <?= $value->aug ?>},
                                                                   {y: '', a: <?= $value->sep ?>},
                                                                   {y: '', a: <?= $value->oct ?>},
                                                                   {y: '', a: <?= $value->nov ?>},
                                                                   {y: '', a: <?= $value->decem ?>}
                                                                   ],
                                                                   barColors: ['#da291c'],
                                                                   xkey: 'y',
                                                                   ykeys: ['a'],
                                                                   labels: ['', ''],
                                                                   hideHover: 'auto',
                                                                   padding: 1, });
                                                             });

                                                </script>
                                             </td>
                                          </tr>
                                          <?php
                                             }
                                             ?>
                                       </tbody>
                                       <?php if($revenue_count == 0){ $style = "style='display:none'"; }else{ $style = "style=''"; } ?>
                                       <tbody class="sectbody" <?= $style ?>>
                                          <tr class="odd gradeX">
                                             <td style="text-align:left; color:#da291c; padding: 10px; font-weight: bold">Total</td>
                                             <td id="jantotal"><?= $jantotal ?></td>
                                             <td id="febtotal"><?= $febtotal ?></td>
                                             <td id="martotal"><?= $martotal ?></td>
                                             <td id="aprtotal"><?= $aprtotal ?></td>
                                             <td id="maytotal"><?= $maytotal ?></td>
                                             <td id="juntotal"><?= $juntotal ?></td>
                                             <td id="jultotal"><?= $jultotal ?></td>
                                             <td id="augtotal"><?= $augtotal ?></td>
                                             <td id="septotal"><?= $septotal ?></td>
                                             <td id="octtotal"><?= $octtotal ?></td>
                                             <td id="novtotal"><?= $novtotal ?></td>
                                             <td id="dectotal"><?= $dectotal ?></td>
                                             <td id="budget_total"><?= $monthtotal ?></td>
                                             <td class="chart_monthly">
                                                <a href="<?php echo url('total_monthly_budget_chart') ?>">
                                                   <div id="bar-chart_total" style="height: 20px; width: 50px"></div>
                                                </a>
                                                <script type="text/javascript">
                                                   $(function () {
                                                     "use strict";

                                                     //BAR CHART
                                                     var bar = new Morris.Bar({
                                                       element: 'bar-chart_total',
                                                       resize: true,
                                                       data: [
                                                       {y: '', a: <?= $jantotal ?>},
                                                       {y: '', a: <?= $febtotal ?>},
                                                       {y: '', a: <?= $martotal ?>},
                                                       {y: '', a: <?= $aprtotal ?>},
                                                       {y: '', a: <?= $maytotal ?>},
                                                       {y: '', a: <?= $juntotal ?>},
                                                       {y: '', a: <?= $jultotal ?>},
                                                       {y: '', a: <?= $augtotal ?>},
                                                       {y: '', a: <?= $septotal ?>},
                                                       {y: '', a: <?= $octtotal ?>},
                                                       {y: '', a: <?= $novtotal ?>},
                                                       {y: '', a: <?= $dectotal ?>}
                                                       ],
                                                       barColors: ['#da291c'],
                                                       xkey: 'y',
                                                       ykeys: ['a'],
                                                       labels: ['', ''],
                                                       hideHover: 'auto',
                                                       padding: 1,
                                                   });
                                                   });
                                                </script>
                                             </td>
                                          </tr>
                                          <tr class="odd gradeX">
                                             <!-- <td></td> -->
                                             <td></td>
                                             <td>
                                                <a id="jansave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "01"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="febsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "02"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="marsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "03"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="aprsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "04"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="maysave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "05"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="junsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "06"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="julsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "07"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="augsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "08"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="sepsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "09"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="octsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "10"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="novsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "11"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="decsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "12"){ echo  "disabled"; }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td></td>
                                             <td></td>
                                          </tr>
                                      <?php  } ?>
                                       </tbody>
                                    </table>
                                </div>
<?php
$html=ob_get_clean();
echo $html;





    }
    public function create_budget()
    {
            $year=Carbon::now()->format('Y');

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date("".$year.""))->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($data['revenue'] as $value) {
            array_push($existrevenue, $value->name);
        }
        $data['revenue_account'] = DB::table('revenue_account')->whereNotIn('account_name', $existrevenue)->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count'] = $data['revenue'][0]->id;
        }else{
            $data['revenue_count'] = 0;
        }
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count'] = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count'] = 0;
        }
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['quaterlytotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }

        return view('create_budget')->with($data);

    }


    public function create_budget_quaterly_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['revenue_quaterly']=$revenue_quaterly = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();
        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count']=$revenue_quaterly_count = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count']=$revenue_quaterly_count = 0;
        }
        $data['janmartotal']=$janmartotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['quaterlytotal']=$quaterlytotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }


        ob_start();
               ?>
               <table class="table table-striped table-bordered table-hover" id="">
                                 <thead>
                                    <tr>
                                       <th></th>
                                       <th>Jan - Mar</th>
                                       <th>Apr - Jun</th>
                                       <th>Jul - Sep</th>
                                       <th>Oct - Dec</th>
                                       <th>Total</th>
                                       <th>Graph</th>
                                    </tr>
                                    <tr>
                                       <th class="">
                                          <!-- <a href="javascript:void(0);" class="add_button2" title="Add field">
                                             <span class="glyphicon glyphicon-plus" style="text-align: center; color: white; font-size: 20px; font-weight: bold"></span>
                                             </a> -->
                                       </th>
                                       <th>Budget</th>
                                       <th>Budget</th>
                                       <th>Budget</th>
                                       <th>Budget</th>
                                       <th>Budget</th>
                                       <th></th>
                                    </tr>
                                 </thead>
                                 <tbody class="field_wrapper2">
                                    <?php
                                       foreach ($revenue_quaterly as $value) {
                                           ?>
                                    <tr class="odd gradeX quarterly" id="roww<?= $value->id ?>">
                                       <!-- <td class=""></td> -->
                                       <td class="budget_name">
                                          <!-- <select class="form-control" required disabled>
                                             <option value="<?= $value->name ?>"><?= $value->name ?></option>
                                             </select>
                                             <p style="color: red; text-align: left; margin-bottom: 2px; display: none">*required</p> -->
                                          <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
                                       </td>
                                       <td class="janmar">
                                          <input type="number" class="form-control" value="<?= $value->janmar ?>" id="janmar<?= $value->id ?>" readonly>
                                       </td>
                                       <td class="aprjun">
                                          <input type="number" class="form-control" value="<?= $value->aprjun ?>" id="aprjun<?= $value->id ?>" readonly>
                                       </td>
                                       <td class="julsep">
                                          <input type="number" class="form-control" value="<?= $value->julsep ?>" id="julsep<?= $value->id ?>" readonly>
                                       </td>
                                       <td class="octdec">
                                          <input type="number" class="form-control" value="<?= $value->octdec ?>" id="octdec<?= $value->id ?>" readonly>
                                       </td>
                                       <td class="budg_total2">
                                          <?= ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?>
                                       </td>
                                       <td class="showgraphq" id="showgraphq<?= $value->id ?>">
                                          <a href="<?php echo url('quarterly_budget_chart')."/".$value->id ?>">
                                             <div id="bar-chartq<?= $value->id ?>" style="height: 20px; width: 30px"></div>
                                          </a>
                                          <script type="text/javascript">
                                             $(function () {
                                               "use strict";

                                                   //BAR CHART
                                                   var bar = new Morris.Bar({
                                                     element: 'bar-chartq<?= $value->id ?>',
                                                     resize: true,
                                                     data: [
                                                     {y: '', a: <?= $value->janmar ?>},
                                                     {y: '', a: <?= $value->aprjun ?>},
                                                     {y: '', a: <?= $value->julsep ?>},
                                                     {y: '', a: <?= $value->octdec ?>}
                                                     ],
                                                     barColors: ['#da291c'],
                                                     xkey: 'y',
                                                     ykeys: ['a'],
                                                     labels: ['', ''],
                                                     hideHover: 'auto',
                                                     padding: 1,
                                                 });
                                               });
                                          </script>
                                       </td>
                                    </tr>
                                    <?php
                                       }
                                       ?>
                                 </tbody>
                                 <?php if($revenue_quaterly_count == 0){ $style2 = "style='display:none'"; }else{ $style2 = "style=''"; } ?>
                                 <tbody class="sectbody2" <?= $style2 ?>>
                                    <tr class="odd gradeX">
                                       <!-- <td></td> -->
                                       <td style="text-align:left; color:#da291c;  padding: 10px; font-weight: bold">Total</td>
                                       <td id="janmartotal"><?= $janmartotal ?></td>
                                       <td id="aprjuntotal"><?= $aprjuntotal ?></td>
                                       <td id="julseptotal"><?= $julseptotal ?></td>
                                       <td id="octdectotal"><?= $octdectotal ?></td>
                                       <td id="budget_total"><?= $quaterlytotal ?></td>
                                       <td class="chart_quarterly">
                                          <a href="<?php echo url('total_quarterly_budget_chart') ?>">
                                             <div id="bar-chart_totalq" style="height: 20px; width: 30px"></div>
                                          </a>
                                          <script type="text/javascript">
                                             $(function () {
                                               "use strict";

                                               //BAR CHART
                                               var bar = new Morris.Bar({
                                                 element: 'bar-chart_totalq',
                                                 resize: true,
                                                 data: [
                                                 {y: '', a: <?= $janmartotal ?>},
                                                 {y: '', a: <?= $aprjuntotal ?>},
                                                 {y: '', a: <?= $julseptotal ?>},
                                                 {y: '', a: <?= $octdectotal ?>}
                                                 ],
                                                 barColors: ['#da291c'],
                                                 xkey: 'y',
                                                 ykeys: ['a'],
                                                 labels: ['', ''],
                                                 hideHover: 'auto',
                                                 padding: 1,
                                             });
                                             });
                                          </script>
                                       </td>
                                    </tr>
                                    <!--  <tr class="odd gradeX">
                                       <td></td>
                                       <td>
                                           <a id="janmarsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                       </td>
                                       <td>
                                           <a id="aprjunsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                       </td>
                                       <td>
                                           <a id="julsepsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                       </td>
                                       <td>
                                           <a id="octdecsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                       </td>
                                       <td></td>
                                       <td></td>

                                       </tr> -->
                                 </tbody>
                              </table>
               <?php

        $html=ob_get_clean();
        echo $html;
}

public function tab3_quaterly_year(Request $request)
    {
        $year=$request->year;

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal']=$janmartotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal']=$monthtotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['janmargrosstotal2'] =$janmargrosstotal2= DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjungrosstotal2'] =$aprjungrosstotal2= DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julsepgrosstotal2'] =$julsepgrosstotal2= DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdecgrosstotal2'] =$octdecgrosstotal2= DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['monthgrosstotal2'] =$monthgrosstotal2= $data['janmargrosstotal2'] + $data['aprjungrosstotal2'] + $data['julsepgrosstotal2'] + $data['octdecgrosstotal2'];
        $data['jangrossactual'] =$jangrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] =$febgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] =$margrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] =$aprgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] =$maygrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] =$jungrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] =$julgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] =$auggrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] =$sepgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual']=$octgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual']=$novgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual']=$decgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmargrossactual']=$janmargrossactual = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'];
        $data['aprjungrossactual']=$aprjungrossactual = $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'];
        $data['julsepgrossactual']=$julsepgrossactual = $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'];
        $data['octdecgrossactual']=$octdecgrossactual = $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['monthgrossactual']=$monthgrossactual = $data['janmargrossactual'] + $data['aprjungrossactual'] + $data['julsepgrossactual'] + $data['octdecgrossactual'];
        $data['jantotalactual'] =$jantotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] =$febtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] =$martotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] =$maytotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] =$juntotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] =$jultotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] =$augtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual']=$septotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual']=$octtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual']=$novtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual']=$dectotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('bill');
        $data['janmartotalactual']=$janmartotalactual = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual']=$aprjuntotalactual = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual']=$julseptotalactual = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual']=$octdectotalactual = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual']=$monthtotalactual = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['janmarothrevenue']=$janmarothrevenue = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('janmar');
        $data['aprjunothrevenue']=$aprjunothrevenue = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('aprjun');
        $data['julsepothrevenue']=$julsepothrevenue = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('julsep');
        $data['octdecothrevenue']=$octdecothrevenue = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('octdec');
        $data['monthothrevenue']=$monthothrevenue = $data['janmarothrevenue'] + $data['aprjunothrevenue'] + $data['julsepothrevenue'] + $data['octdecothrevenue'];
        $data['janotherrevenue']=$janotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue']=$febotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue']=$marotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue']=$aprotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue']=$mayotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue']=$junotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue']=$julotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue']=$augotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue']=$sepotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue']=$octotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue']=$novotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue']=$decotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['janmarotherrevenue']=$janmarotherrevenue = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'];
        $data['aprjunotherrevenue']=$aprjunotherrevenue = $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'];
        $data['julsepotherrevenue']=$julsepotherrevenue = $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'];
        $data['octdecotherrevenue']=$octdecotherrevenue = $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['monthotherrevenue']=$monthotherrevenue = $data['janmarotherrevenue'] + $data['aprjunotherrevenue'] + $data['julsepotherrevenue'] + $data['octdecotherrevenue'];
        $data['expense']=$expense = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['janmartotal2']=$janmartotal2 = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal2']=$aprjuntotal2 = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal2']=$julseptotal2 = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal2']=$octdectotal2 = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal2']=$monthtotal2 = $data['janmartotal2'] + $data['aprjuntotal2'] + $data['julseptotal2'] + $data['octdectotal2'];
        $data['jantotal2actual']=$jantotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual']=$febtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual']=$martotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual']=$aprtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual']=$maytotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] =$juntotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] =$jultotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] =$augtotal2actual= DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] =$septotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] =$octtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] =$novtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] =$dectotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotal2actual'] =$janmartotal2actual= $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'];
        $data['aprjuntotal2actual'] =$aprjuntotal2actual= $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'];
        $data['julseptotal2actual'] =$julseptotal2actual= $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'];
        $data['octdectotal2actual'] =$octdectotal2actual= $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['monthtotal2actual'] =$monthtotal2actual= $data['janmartotal2actual'] + $data['aprjuntotal2actual'] + $data['julseptotal2actual'] + $data['octdectotal2actual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        ob_start();
               ?>

               <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan-Mar</th>
                                                            <th colspan="3">Apr-Jun</th>
                                                            <th colspan="3">Jul-Sep</th>
                                                            <th colspan="3">Oct-Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Gross Revenue</td>
                                                            <td><?= $janmargrosstotal2 ?></td>
                                                            <td><?= $janmargrossactual ?></td>
                                                            <td><?= ($janmargrosstotal2-$janmargrossactual) ?></td>
                                                            <td><?= $aprjungrosstotal2 ?></td>
                                                            <td><?= $aprjungrossactual ?></td>
                                                            <td><?= ($aprjungrosstotal2-$aprjungrossactual) ?></td>
                                                            <td><?= $julsepgrosstotal2 ?></td>
                                                            <td><?= $julsepgrossactual ?></td>
                                                            <td><?= ($julsepgrosstotal2-$julsepgrossactual) ?></td>
                                                            <td><?= $octdecgrosstotal2 ?></td>
                                                            <td><?= $octdecgrossactual ?></td>
                                                            <td><?= ($octdecgrosstotal2-$octdecgrossactual) ?></td>
                                                            <td><?= $monthgrosstotal2 ?></td>
                                                            <td><?= $monthgrossactual ?></td>
                                                            <td><?= ($monthgrosstotal2-$monthgrossactual) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('gross_quarter_revenue_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Other Revenue</td>
                                                            <td><?= $janmarothrevenue ?></td>
                                                            <td><?= $janmarotherrevenue ?></td>
                                                            <td><?= ($janmarothrevenue-$janmarotherrevenue) ?></td>
                                                            <td><?= $aprjunothrevenue ?></td>
                                                            <td><?= $aprjunotherrevenue ?></td>
                                                            <td><?= ($aprjunothrevenue-$aprjunotherrevenue) ?></td>
                                                            <td><?= $julsepothrevenue ?></td>
                                                            <td><?= $julsepotherrevenue ?></td>
                                                            <td><?= ($julsepothrevenue-$julsepotherrevenue) ?></td>
                                                            <td><?= $octdecothrevenue ?></td>
                                                            <td><?= $octdecotherrevenue ?></td>
                                                            <td><?= ($octdecothrevenue-$octdecotherrevenue) ?></td>
                                                            <td><?= $monthothrevenue ?></td>
                                                            <td><?= $monthotherrevenue ?></td>
                                                            <td><?= ($monthothrevenue-$monthotherrevenue) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('other_quarter_revenue_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td><?= $janmartotal ?></td>
                                                            <td><?= $janmartotalactual ?></td>
                                                            <td><?= ($janmartotal-$janmartotalactual) ?></td>
                                                            <td><?= $aprjuntotal ?></td>
                                                            <td><?= $aprjuntotalactual ?></td>
                                                            <td><?= ($aprjuntotal-$aprjuntotalactual) ?></td>
                                                            <td><?= $julseptotal ?></td>
                                                            <td><?= $julseptotalactual ?></td>
                                                            <td><?= ($julseptotal-$julseptotalactual) ?></td>
                                                            <td><?= $octdectotal ?></td>
                                                            <td><?= $octdectotalactual ?></td>
                                                            <td><?= ($octdectotal-$octdectotalactual) ?></td>
                                                            <td><?= $monthtotal ?></td>
                                                            <td><?= $monthtotalactual ?></td>
                                                            <td><?= ($monthtotal-$monthtotalactual) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('all_quarter_revenue_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->

                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($expense as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->janmar ?></td>
                                                                <td><?php echo $actual_janmar =HomeController::getjanmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->janmar - $actual_janmar) ?></td>
                                                                <td><?= $value->aprjun ?></td>
                                                                <td><?php echo $actual_aprjun = HomeController::getaprjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->aprjun - $actual_aprjun) ?></td>
                                                                <td><?= $value->julsep ?></td>
                                                                <td><?php echo $actual_julsep = HomeController::getjulsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->julsep - $actual_julsep) ?></td>
                                                                <td><?= $value->octdec ?></td>
                                                                <td><?php echo $actual_octdec = HomeController::getoctdecactualexp($value->name); ?></td>
                                                                <td><?= ($value->octdec - $actual_octdec) ?></td>

                                                                <td> <?= $tot = ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?></td>
                                                                <td><?php echo $actual_total2 = HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total2) ?></td>
                                                                <td>
                                                                    <a href="<?php echo url('expense_variance_quarterly_graph') ."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total2-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $janmartotal2 ?></td>
                                                            <td><?= $janmartotal2actual ?></td>
                                                            <td><?= ($janmartotal2-$janmartotal2actual) ?></td>
                                                            <td><?= $aprjuntotal2 ?></td>
                                                            <td><?= $aprjuntotal2actual ?></td>
                                                            <td><?= ($aprjuntotal2-$aprjuntotal2actual) ?></td>
                                                            <td><?= $julseptotal2 ?></td>
                                                            <td><?= $julseptotal2actual ?></td>
                                                            <td><?= ($julseptotal2-$julseptotal2actual) ?></td>
                                                            <td><?= $octdectotal2 ?></td>
                                                            <td><?= $octdectotal2actual ?></td>
                                                            <td><?= ($octdectotal2-$octdectotal2actual) ?></td>
                                                            <td><?= $tott = ($janmartotal2 + $aprjuntotal2 + $julseptotal2 + $octdectotal2) ?></td>
                                                            <td><?= $tott2 = ($janmartotal2actual + $aprjuntotal2actual + $julseptotal2actual + $octdectotal2actual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?php echo  url('expense_quarterly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>

                                                    <tbody></tbody>
                                                    <tfoot>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left;"><b>Estimated Profit & Loss</b></td>
                                                            <td><?= ($janmartotal-$janmartotal2) ?></td>
                                                            <td><?= ($janmartotalactual-$janmartotal2actual) ?></td>
                                                            <td><?= (($janmartotal-$janmartotal2)-($janmartotalactual-$janmartotal2actual)) ?></td>
                                                            <td><?= ($aprjuntotal-$aprjuntotal2) ?></td>
                                                            <td><?= ($aprjuntotalactual-$aprjuntotal2actual) ?></td>
                                                            <td><?= (($aprjuntotal-$aprjuntotal2)-($aprjuntotalactual-$aprjuntotal2actual)) ?></td>
                                                            <td><?= ($julseptotal-$julseptotal2) ?></td>
                                                            <td><?= ($julseptotalactual-$julseptotal2actual) ?></td>
                                                            <td><?= (($julseptotal-$julseptotal2)-($julseptotalactual-$julseptotal2actual)) ?></td>
                                                            <td><?= ($octdectotal-$octdectotal2) ?></td>
                                                            <td><?= ($octdectotalactual-$octdectotal2actual) ?></td>
                                                            <td><?= (($octdectotal-$octdectotal2)-($octdectotalactual-$octdectotal2actual)) ?></td>
                                                            <td><?= ($monthtotal-$tott) ?></td>
                                                            <td><?= ($monthtotalactual-$tott2) ?></td>
                                                            <td><?= (($monthtotal-$tott)-($monthtotalactual-$tott2)) ?></td>
                                                            <td>
                                                                <!-- <a href="#"><i class="fa fa-bar-chart"></i></a> -->
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                    </tfoot>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="tab-pane fade" id="tab32">
                                    <div class="">
                                        <div id="" class="table-scroll">
                                            <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan - Mar</th>
                                                            <th colspan="3">Apr - Jun</th>
                                                            <th colspan="3">Jul - Sep</th>
                                                            <th colspan="3">Oct - Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Gross Revenue</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Other Revenue</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->

                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Phone</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Electricity</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Credit Card</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Fuel</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Materials & Supplies</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Oil Purchase</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Car Maintenance</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="total-tr">
                                                            <td class="fixed-side"><b>Total Expenses</b></td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                    </tbody>
                                                    <tfoot>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left;"><b>Estimated Profit & Loss</b></td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>0</td>
                                                            <td>
                                                                <a href="#"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                    </tfoot>
                                                </table>
                                            </div>

               <?php

        $html=ob_get_clean();
        echo $html;
    }



public function tab3_year(Request $request)
    {
        $year=$request->year;

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal']=$jantotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal']=$septotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal']=$octtotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal']=$novtotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal']=$dectotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal']=$monthtotal = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jangrosstotal2']=$jangrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2']=$febgrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2']=$margrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2']=$aprgrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2']=$maygrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2']=$jungrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2']=$julgrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2']=$auggrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2']=$sepgrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2']=$octgrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2']=$novgrosstotal2 = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2']=$decgrosstotal2 = DB::table('revenue_budget')->where('uid',$uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['monthgrosstotal2']=$monthgrosstotal2 = $data['jangrosstotal2'] + $data['febgrosstotal2'] + $data['margrosstotal2'] + $data['aprgrosstotal2'] + $data['maygrosstotal2'] + $data['jungrosstotal2'] + $data['julgrosstotal2'] + $data['auggrosstotal2'] + $data['sepgrosstotal2'] + $data['octgrosstotal2'] + $data['novgrosstotal2'] + $data['decgrosstotal2'];
        $data['jangrossactual']=$jangrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual']=$febgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual']=$margrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] =$aprgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual']=$maygrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual']=$jungrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual']=$julgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual']=$auggrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual']=$sepgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual']=$octgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual']=$novgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual']=$decgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthgrossactual']=$monthgrossactual = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'] + $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'] + $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'] + $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['jantotalactual']=$jantotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual']=$febtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual']=$martotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual']=$aprtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual']=$maytotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual']=$juntotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual']=$jultotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] =$augtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] =$septotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] =$octtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] =$novtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] =$dectotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('bill');
        $data['monthtotalactual'] =$monthtotalactual= $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['janothrevenue'] =$janothrevenue= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue'] =$febothrevenue= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue']=$marothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at',$year)->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue']=$aprothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue']=$mayothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue']=$junothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue']=$julothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue']=$augothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue']=$sepothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue']=$octothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue']=$novothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue']=$decothrevenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('decem');
        $data['monthothrevenue']=$monthothrevenue = $data['janothrevenue'] + $data['febothrevenue'] + $data['marothrevenue'] + $data['aprothrevenue'] + $data['mayothrevenue'] + $data['junothrevenue'] + $data['julothrevenue'] + $data['augothrevenue'] + $data['sepothrevenue'] + $data['octothrevenue'] + $data['novothrevenue'] + $data['decothrevenue'];
        $data['janotherrevenue']=$janotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue']=$febotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] =$marotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] =$aprotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] =$mayotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] =$junotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] =$julotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] =$augotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] =$sepotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] =$octotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue']=$novotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue']=$decotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['monthotherrevenue']=$monthotherrevenue = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'] + $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'] + $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'] + $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['expense']=$expense = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at',$year)->get();
        $data['jantotal2']=$jantotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at',$year)->sum('jan');
        $data['febtotal2']=$febtotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal2']=$martotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal2']=$aprtotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal2']=$maytotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal2']=$juntotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal2']=$jultotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal2']=$augtotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal2']=$septotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal2']=$octtotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at',$year)->sum('oct');
        $data['novtotal2']=$novtotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal2']=$dectotal2 = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at',$year)->sum('decem');
        $data['monthtotal2']=$monthtotal2 = $data['jantotal2'] + $data['febtotal2'] + $data['martotal2'] + $data['aprtotal2'] + $data['maytotal2'] + $data['juntotal2'] + $data['jultotal2'] + $data['augtotal2'] + $data['septotal2'] + $data['octtotal2'] + $data['novtotal2'] + $data['dectotal2'];
        $data['jantotal2actual']=$jantotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual']=$febtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual']=$martotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual']=$aprtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual']=$maytotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual']=$juntotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual']=$jultotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual']=$augtotal2actual = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual']=$septotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual']=$octtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual']=$novtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual']=$dectotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotal2actual']=$monthtotal2actual = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'] + $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'] + $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'] + $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        ob_start();
               ?>
<div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan</th>
                                                            <th colspan="3">Feb</th>
                                                            <th colspan="3">Mar</th>
                                                            <th colspan="3">Apr</th>
                                                            <th colspan="3">May</th>
                                                            <th colspan="3">Jun</th>
                                                            <th colspan="3">Jul</th>
                                                            <th colspan="3">Aug</th>
                                                            <th colspan="3">Sep</th>
                                                            <th colspan="3">Oct</th>
                                                            <th colspan="3">Nov</th>
                                                            <th colspan="3">Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Gross Revenue</td>
                                                            <td><?= $jangrosstotal2 ?></td>
                                                            <td><?= $jangrossactual ?></td>
                                                            <td><?= ($jangrosstotal2-$jangrossactual) ?></td>
                                                            <td><?= $febgrosstotal2 ?></td>
                                                            <td><?= $febgrossactual ?></td>
                                                            <td><?= ($febgrosstotal2-$febgrossactual) ?></td>
                                                            <td><?= $margrosstotal2 ?></td>
                                                            <td><?= $margrossactual ?></td>
                                                            <td><?= ($margrosstotal2-$margrossactual) ?></td>
                                                            <td><?= $aprgrosstotal2 ?></td>
                                                            <td><?= $aprgrossactual ?></td>
                                                            <td><?= ($aprgrosstotal2-$aprgrossactual) ?></td>
                                                            <td><?= $maygrosstotal2 ?></td>
                                                            <td><?= $maygrossactual ?></td>
                                                            <td><?= ($maygrosstotal2-$maygrossactual) ?></td>
                                                            <td><?= $jungrosstotal2 ?></td>
                                                            <td><?= $jungrossactual ?></td>
                                                            <td><?= ($jungrosstotal2-$jungrossactual) ?></td>
                                                            <td><?= $julgrosstotal2 ?></td>
                                                            <td><?= $julgrossactual ?></td>
                                                            <td><?= ($julgrosstotal2-$julgrossactual) ?></td>
                                                            <td><?= $auggrosstotal2 ?></td>
                                                            <td><?= $auggrossactual ?></td>
                                                            <td><?= ($auggrosstotal2-$auggrossactual) ?></td>
                                                            <td><?= $sepgrosstotal2 ?></td>
                                                            <td><?= $sepgrossactual ?></td>
                                                            <td><?= ($sepgrosstotal2-$sepgrossactual) ?></td>
                                                            <td><?= $octgrosstotal2 ?></td>
                                                            <td><?= $octgrossactual ?></td>
                                                            <td><?= ($octgrosstotal2-$octgrossactual) ?></td>
                                                            <td><?= $novgrosstotal2 ?></td>
                                                            <td><?= $novgrossactual ?></td>
                                                            <td><?= ($novgrosstotal2-$novgrossactual) ?></td>
                                                            <td><?= $decgrosstotal2 ?></td>
                                                            <td><?= $decgrossactual ?></td>
                                                            <td><?= ($decgrosstotal2-$decgrossactual) ?></td>
                                                            <td><?= $monthgrosstotal2 ?></td>
                                                            <td><?= $monthgrossactual ?></td>
                                                            <td><?= ($monthgrosstotal2-$monthgrossactual) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('gross_revenue_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Other Revenue</td>
                                                            <td><?= $janothrevenue ?></td>
                                                            <td><?= $janotherrevenue ?></td>
                                                            <td><?= ($janothrevenue-$janotherrevenue) ?></td>
                                                            <td><?= $febothrevenue ?></td>
                                                            <td><?= $febotherrevenue ?></td>
                                                            <td><?= ($febothrevenue-$febotherrevenue) ?></td>
                                                            <td><?= $marothrevenue ?></td>
                                                            <td><?= $marotherrevenue ?></td>
                                                            <td><?= ($marothrevenue-$marotherrevenue) ?></td>
                                                            <td><?= $aprothrevenue ?></td>
                                                            <td><?= $aprotherrevenue ?></td>
                                                            <td><?= ($aprothrevenue-$aprotherrevenue) ?></td>
                                                            <td><?= $mayothrevenue ?></td>
                                                            <td><?= $mayotherrevenue ?></td>
                                                            <td><?= ($mayothrevenue-$mayotherrevenue) ?></td>
                                                            <td><?= $junothrevenue ?></td>
                                                            <td><?= $junotherrevenue ?></td>
                                                            <td><?= ($junothrevenue-$junotherrevenue) ?></td>
                                                            <td><?= $julothrevenue ?></td>
                                                            <td><?= $julotherrevenue ?></td>
                                                            <td><?= ($julothrevenue-$julotherrevenue) ?></td>
                                                            <td><?= $augothrevenue ?></td>
                                                            <td><?= $augotherrevenue ?></td>
                                                            <td><?= ($augothrevenue-$augotherrevenue) ?></td>
                                                            <td><?= $sepothrevenue ?></td>
                                                            <td><?= $sepotherrevenue ?></td>
                                                            <td><?= ($sepothrevenue-$sepotherrevenue) ?></td>
                                                            <td><?= $octothrevenue ?></td>
                                                            <td><?= $octotherrevenue ?></td>
                                                            <td><?= ($octothrevenue-$octotherrevenue) ?></td>
                                                            <td><?= $novothrevenue ?></td>
                                                            <td><?= $novotherrevenue ?></td>
                                                            <td><?= ($novothrevenue-$novotherrevenue) ?></td>
                                                            <td><?= $decothrevenue ?></td>
                                                            <td><?= $decotherrevenue ?></td>
                                                            <td><?= ($decothrevenue-$decotherrevenue) ?></td>
                                                            <td><?= $monthothrevenue ?></td>
                                                            <td><?= $monthotherrevenue ?></td>
                                                            <td><?= ($monthothrevenue-$monthotherrevenue) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('other_revenue_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td><?= $jantotal ?></td>
                                                            <td><?= $jantotalactual ?></td>
                                                            <td><?= ($jantotal-$jantotalactual) ?></td>
                                                            <td><?= $febtotal ?></td>
                                                            <td><?= $febtotalactual ?></td>
                                                            <td><?= ($febtotal-$febtotalactual) ?></td>
                                                            <td><?= $martotal ?></td>
                                                            <td><?= $martotalactual ?></td>
                                                            <td><?= ($martotal-$martotalactual) ?></td>
                                                            <td><?= $aprtotal ?></td>
                                                            <td><?= $aprtotalactual ?></td>
                                                            <td><?= ($aprtotal-$aprtotalactual) ?></td>
                                                            <td><?= $maytotal ?></td>
                                                            <td><?= $maytotalactual ?></td>
                                                            <td><?= ($maytotal-$maytotalactual) ?></td>
                                                            <td><?= $juntotal ?></td>
                                                            <td><?= $juntotalactual ?></td>
                                                            <td><?= ($juntotal-$juntotalactual) ?></td>
                                                            <td><?= $jultotal ?></td>
                                                            <td><?= $jultotalactual ?></td>
                                                            <td><?= ($jultotal-$jultotalactual) ?></td>
                                                            <td><?= $augtotal ?></td>
                                                            <td><?= $augtotalactual ?></td>
                                                            <td><?= ($augtotal-$augtotalactual) ?></td>
                                                            <td><?= $septotal ?></td>
                                                            <td><?= $septotalactual ?></td>
                                                            <td><?= ($septotal-$septotalactual) ?></td>
                                                            <td><?= $octtotal ?></td>
                                                            <td><?= $octtotalactual ?></td>
                                                            <td><?= ($octtotal-$octtotalactual) ?></td>
                                                            <td><?= $novtotal ?></td>
                                                            <td><?= $novtotalactual ?></td>
                                                            <td><?= ($novtotal-$novtotalactual) ?></td>
                                                            <td><?= $dectotal ?></td>
                                                            <td><?= $dectotalactual ?></td>
                                                            <td><?= ($dectotal-$dectotalactual) ?></td>
                                                            <td><?= $monthtotal ?></td>
                                                            <td><?= $monthtotalactual ?></td>
                                                            <td><?= ($monthtotal-$monthtotalactual) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('all_revenue_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->

                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($expense as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->jan ?></td>
                                                                <td><?php echo $actual_jan = HomeController::getjanactualexp($value->name); ?></td>
                                                                <td><?= ($value->jan - $actual_jan) ?></td>
                                                                <td><?= $value->feb ?></td>
                                                                <td><?php echo $actual_feb = HomeController::getfebactualexp($value->name); ?></td>
                                                                <td><?= ($value->feb - $actual_feb) ?></td>
                                                                <td><?= $value->mar ?></td>
                                                                <td><?php echo $actual_mar = HomeController::getmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->mar - $actual_mar) ?></td>
                                                                <td><?= $value->apr ?></td>
                                                                <td><?php echo $actual_apr = HomeController::getapractualexp($value->name); ?></td>
                                                                <td><?= ($value->apr - $actual_apr) ?></td>
                                                                <td><?= $value->may ?></td>
                                                                <td><?php echo $actual_may = HomeController::getmayactualexp($value->name); ?></td>
                                                                <td><?= ($value->may - $actual_may) ?></td>
                                                                <td><?= $value->jun ?></td>
                                                                <td><?php echo $actual_jun = HomeController::getjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->jun - $actual_jun) ?></td>
                                                                <td><?= $value->jul ?></td>
                                                                <td><?php echo $actual_jul = HomeController::getjulactualexp($value->name); ?></td>
                                                                <td><?= ($value->jul - $actual_jul) ?></td>
                                                                <td><?= $value->aug ?></td>
                                                                <td><?php echo $actual_aug = HomeController::getaugactualexp($value->name); ?></td>
                                                                <td><?= ($value->aug - $actual_aug) ?></td>
                                                                <td><?= $value->sep ?></td>
                                                                <td><?php echo $actual_sep = HomeController::getsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->sep - $actual_sep) ?></td>
                                                                <td><?= $value->oct ?></td>
                                                                <td><?php echo $actual_oct = HomeController::getoctactualexp($value->name); ?></td>
                                                                <td><?= ($value->oct - $actual_oct) ?></td>
                                                                <td><?= $value->nov ?></td>
                                                                <td><?php echo $actual_nov = HomeController::getnovactualexp($value->name); ?></td>
                                                                <td><?= ($value->nov - $actual_nov) ?></td>
                                                                <td><?= $value->decem ?></td>
                                                                <td><?php echo $actual_decem = HomeController::getdecemactualexp($value->name); ?></td>
                                                                <td><?= ($value->decem - $actual_decem) ?></td>
                                                                <td> <?= $tot = ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?></td>
                                                                <td><?php echo $actual_total2 = HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total2) ?></td>
                                                                <td>
                                                                    <a href="<?php echo  url('expense_variance_monthly_graph')."/". $value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total2-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $jantotal2 ?></td>
                                                            <td><?= $jantotal2actual ?></td>
                                                            <td><?= ($jantotal2-$jantotal2actual) ?></td>
                                                            <td><?= $febtotal2 ?></td>
                                                            <td><?= $febtotal2actual ?></td>
                                                            <td><?= ($febtotal2-$febtotal2actual) ?></td>
                                                            <td><?= $martotal2 ?></td>
                                                            <td><?= $martotal2actual ?></td>
                                                            <td><?= ($martotal2-$martotal2actual) ?></td>
                                                            <td><?= $aprtotal2 ?></td>
                                                            <td><?= $aprtotal2actual ?></td>
                                                            <td><?= ($aprtotal2-$aprtotal2actual) ?></td>
                                                            <td><?= $maytotal2 ?></td>
                                                            <td><?= $maytotal2actual ?></td>
                                                            <td><?= ($maytotal2-$maytotal2actual) ?></td>
                                                            <td><?= $juntotal2 ?></td>
                                                            <td><?= $juntotal2actual ?></td>
                                                            <td><?= ($juntotal2-$juntotal2actual) ?></td>
                                                            <td><?= $jultotal2 ?></td>
                                                            <td><?= $jultotal2actual ?></td>
                                                            <td><?= ($jultotal2-$jultotal2actual) ?></td>
                                                            <td><?= $augtotal2 ?></td>
                                                            <td><?= $augtotal2actual ?></td>
                                                            <td><?= ($augtotal2-$augtotal2actual) ?></td>
                                                            <td><?= $septotal2 ?></td>
                                                            <td><?= $septotal2actual ?></td>
                                                            <td><?= ($septotal2-$septotal2actual) ?></td>
                                                            <td><?= $octtotal2 ?></td>
                                                            <td><?= $octtotal2actual ?></td>
                                                            <td><?= ($octtotal2-$octtotal2actual) ?></td>
                                                            <td><?= $novtotal2 ?></td>
                                                            <td><?= $novtotal2actual ?></td>
                                                            <td><?= ($novtotal2-$novtotal2actual) ?></td>
                                                            <td><?= $dectotal2 ?></td>
                                                            <td><?= $dectotal2actual ?></td>
                                                            <td><?= ($dectotal2-$dectotal2actual) ?></td>
                                                            <td><?= $tott = ($jantotal2 + $febtotal2 + $martotal2 + $aprtotal2 + $maytotal2 + $juntotal2 + $jultotal2 + $augtotal2 + $septotal2 + $octtotal2 + $novtotal2 + $dectotal2) ?></td>
                                                            <td><?= $tott2 = ($jantotal2actual + $febtotal2actual + $martotal2actual + $aprtotal2actual + $maytotal2actual + $juntotal2actual + $jultotal2actual + $augtotal2actual + $septotal2actual + $octtotal2actual + $novtotal2actual + $dectotal2actual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('expense_monthly_vary_chart')?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>

                                                    <tbody></tbody>
                                                    <tfoot>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left;"><b>Estimated Profit & Loss</b></td>
                                                            <td><?= ($jantotal-$jantotal2) ?></td>
                                                            <td><?= ($jantotalactual-$jantotal2actual) ?></td>
                                                            <td><?= (($jantotal-$jantotal2)-($jantotalactual-$jantotal2actual)) ?></td>
                                                            <td><?= ($febtotal-$febtotal2) ?></td>
                                                            <td><?= ($febtotalactual-$febtotal2actual) ?></td>
                                                            <td><?= (($febtotal-$febtotal2)-($febtotalactual-$febtotal2actual)) ?></td>
                                                            <td><?= ($martotal-$martotal2) ?></td>
                                                            <td><?= ($martotalactual-$martotal2actual) ?></td>
                                                            <td><?= (($martotal-$martotal2)-($martotalactual-$martotal2actual)) ?></td>
                                                            <td><?= ($aprtotal-$aprtotal2) ?></td>
                                                            <td><?= ($aprtotalactual-$aprtotal2actual) ?></td>
                                                            <td><?= (($aprtotal-$aprtotal2)-($aprtotalactual-$aprtotal2actual)) ?></td>
                                                           <td><?= ($maytotal-$maytotal2) ?></td>
                                                            <td><?= ($maytotalactual-$maytotal2actual) ?></td>
                                                            <td><?= (($maytotal-$maytotal2)-($maytotalactual-$maytotal2actual)) ?></td>
                                                            <td><?= ($juntotal-$juntotal2) ?></td>
                                                            <td><?= ($juntotalactual-$juntotal2actual) ?></td>
                                                            <td><?= (($juntotal-$juntotal2)-($juntotalactual-$juntotal2actual)) ?></td>
                                                            <td><?= ($jultotal-$jultotal2) ?></td>
                                                            <td><?= ($jultotalactual-$jultotal2actual) ?></td>
                                                            <td><?= (($jultotal-$jultotal2)-($jultotalactual-$jultotal2actual)) ?></td>
                                                            <td><?= ($augtotal-$augtotal2) ?></td>
                                                            <td><?= ($augtotalactual-$augtotal2actual) ?></td>
                                                            <td><?= (($augtotal-$augtotal2)-($augtotalactual-$augtotal2actual)) ?></td>
                                                            <td><?= ($septotal-$septotal2) ?></td>
                                                            <td><?= ($septotalactual-$septotal2actual) ?></td>
                                                            <td><?= (($septotal-$septotal2)-($septotalactual-$septotal2actual)) ?></td>
                                                            <td><?= ($octtotal-$octtotal2) ?></td>
                                                            <td><?= ($octtotalactual-$octtotal2actual) ?></td>
                                                            <td><?= (($octtotal-$octtotal2)-($octtotalactual-$octtotal2actual)) ?></td>
                                                            <td><?= ($novtotal-$novtotal2) ?></td>
                                                            <td><?= ($novtotalactual-$novtotal2actual) ?></td>
                                                            <td><?= (($novtotal-$novtotal2)-($novtotalactual-$novtotal2actual)) ?></td>
                                                            <td><?= ($dectotal-$dectotal2) ?></td>
                                                            <td><?= ($dectotalactual-$dectotal2actual) ?></td>
                                                            <td><?= (($dectotal-$dectotal2)-($dectotalactual-$dectotal2actual)) ?></td>
                                                            <td><?= ($monthtotal-$tott) ?></td>
                                                            <td><?= ($monthtotalactual-$tott2) ?></td>
                                                            <td><?= (($monthtotal-$tott)-($monthtotalactual-$tott2)) ?></td>
                                                            <td>
                                                                <!-- <a href="#"><i class="fa fa-bar-chart"></i></a> -->
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                    </tfoot>
                                                </table>
                                            </div>

               <?php

        $html=ob_get_clean();
        echo $html;
    }





public function tab2_quaterly_year(Request $request)
    {
        $year=$request->year;

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']=$revenue = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count']=$revenue_count = $data['revenue'][0]->id;
        }else{
            $data['revenue_count']=$revenue_count = 0;
        }
        $data['jantotal']=$jantotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal']=$septotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal']=$octtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal']=$novtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal']=$dectotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal']=$monthtotal = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly']=$revenue_quaterly = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();

        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count']=$revenue_quaterly_count = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count']=$revenue_quaterly_count = 0;
        }

        $data['janmartotal']=$janmartotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['quaterlytotal']=$quaterlytotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        ob_start();
               ?>

               <div class="table-responsive" style="overflow-x: hidden; overflow-y: hidden">
   <table class="table table-striped table-bordered table-hover" id="">
      <thead>
         <tr>
            <th></th>
            <th>Jan - Mar</th>
            <th>Apr - Jun</th>
            <th>Jul - Sep</th>
            <th>Oct - Dec</th>
            <th>Total</th>
            <th>Graph</th>
         </tr>
         <tr>
            <th class="">
               <!-- <a href="javascript:void(0);" class="add_button2" title="Add field">
                  <span class="glyphicon glyphicon-plus" style="text-align: center; color: white; font-size: 20px; font-weight: bold"></span>
                  </a> -->
            </th>
            <th>Budget</th>
            <th>Budget</th>
            <th>Budget</th>
            <th>Budget</th>
            <th>Budget</th>
            <th></th>
         </tr>
      </thead>
      <tbody class="field_wrapper2">
         <?php
            foreach ($revenue_quaterly as $value) {
            ?>
         <tr class="odd gradeX quarterly" id="roww<?= $value->id ?>">
            <!-- <td class=""></td> -->
            <td class="budget_name">
               <!-- <select class="form-control" required disabled>
                  <option value="<?= $value->name ?>"><?= $value->name ?></option>
                  </select>
                  <p style="color: red; text-align: left; margin-bottom: 2px; display: none">*required</p> -->
               <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
            </td>
            <td class="janmar">
               <input type="number" class="form-control" value="<?= $value->janmar ?>" id="janmar<?= $value->id ?>" readonly>
            </td>
            <td class="aprjun">
               <input type="number" class="form-control" value="<?= $value->aprjun ?>" id="aprjun<?= $value->id ?>" readonly>
            </td>
            <td class="julsep">
               <input type="number" class="form-control" value="<?= $value->julsep ?>" id="julsep<?= $value->id ?>" readonly>
            </td>
            <td class="octdec">
               <input type="number" class="form-control" value="<?= $value->octdec ?>" id="octdec<?= $value->id ?>" readonly>
            </td>
            <td class="budg_total2">
               <?= ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?>
            </td>
            <td class="showgraphq" id="showgraphq<?= $value->id ?>">
               <a href="<?= url('quarterly_expense_chart')."/".$value->id ?>">
                  <div id="bar-chartq<?= $value->id ?>" style="height: 20px; width: 30px"></div>
               </a>
               <script type="text/javascript">
                  $(function () {
                        "use strict";

                        //BAR CHART
                        var bar = new Morris.Bar({
                          element: 'bar-chartq<?= $value->id ?>',
                          resize: true,
                          data: [
                            {y: '', a: <?= $value->janmar ?>},
                            {y: '', a: <?= $value->aprjun ?>},
                            {y: '', a: <?= $value->julsep ?>},
                            {y: '', a: <?= $value->octdec ?>}
                          ],
                          barColors: ['#da291c'],
                          xkey: 'y',
                          ykeys: ['a'],
                          labels: ['', ''],
                          hideHover: 'auto',
                          padding: 1,
                        });
                      });
               </script>
            </td>
         </tr>
         <?php
            }
            ?>
      </tbody>
      <?php if($revenue_quaterly_count == 0){ $style2 = "style='display:none'"; }else{ $style2 = "style=''"; } ?>
      <tbody class="sectbody2" <?= $style2 ?>>
         <tr class="odd gradeX">
            <!-- <td></td> -->
            <td style="text-align:left; color:#da291c; padding: 10px; font-weight: bold">Total</td>
            <td id="janmartotal"><?= $janmartotal ?></td>
            <td id="aprjuntotal"><?= $aprjuntotal ?></td>
            <td id="julseptotal"><?= $julseptotal ?></td>
            <td id="octdectotal"><?= $octdectotal ?></td>
            <td id="budget_total"><?= $quaterlytotal ?></td>
            <td class="chart_quarterly">
               <a href="<?= url('total_quarterly_expense_chart') ?>">
                  <div id="bar-chart_totalq" style="height: 20px; width: 30px"></div>
               </a>
               <script type="text/javascript">
                  $(function () {
                        "use strict";

                        //BAR CHART
                        var bar = new Morris.Bar({
                          element: 'bar-chart_totalq',
                          resize: true,
                          data: [
                            {y: '', a: <?= $janmartotal ?>},
                            {y: '', a: <?= $aprjuntotal ?>},
                            {y: '', a: <?= $julseptotal ?>},
                            {y: '', a: <?= $octdectotal ?>}
                          ],
                          barColors: ['#da291c'],
                          xkey: 'y',
                          ykeys: ['a'],
                          labels: ['', ''],
                          hideHover: 'auto',
                          padding: 1,
                        });
                      });
               </script>
            </td>
         </tr>
      </tbody>
   </table>
</div>
               <?php

        $html=ob_get_clean();
        echo $html;
    }



public function tab2_year(Request $request)
    {
        $year=$request->year;

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']=$revenue = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count']=$revenue_count = $data['revenue'][0]->id;
        }else{
            $data['revenue_count']=$revenue_count = 0;
        }
        $data['jantotal']=$jantotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal']=$septotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal']=$octtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal']=$novtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal']=$dectotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal']=$monthtotal = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly']=$revenue_quaterly = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();

        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count']=$revenue_quaterly_count = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count']=$revenue_quaterly_count = 0;
        }

        $data['janmartotal']=$janmartotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['quaterlytotal']=$quaterlytotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        ob_start();
               ?>

               <div id="table-scroll" class="table-scroll">
   <div class="table-wrap">
      <table class="table table-striped table-bordered table-hover main-table" id="">
         <thead>
            <tr>
               <th class=""></th>
               <th>Jan</th>
               <th>Feb</th>
               <th>Mar</th>
               <th>Apr</th>
               <th>May</th>
               <th>Jun</th>
               <th>Jul</th>
               <th>Aug</th>
               <th>Sep</th>
               <th>Oct</th>
               <th>Nov</th>
               <th>Dec</th>
               <th>Total</th>
               <th>Graph</th>
            </tr>
            <tr>
               <th class="">
                  <!-- <a href="javascript:void(0);" class="add_button" title="Add field">
                     <span class="glyphicon glyphicon-plus" style="text-align: center; color: white; font-size: 20px; font-weight: bold"></span>
                     </a> -->
               </th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th>Budget</th>
               <th></th>
            </tr>
         </thead>
         <tbody class="field_wrapper">

            <?php
if(count($revenue)==0){
                                            ?>
                                            <tr class="odd gradeX monthly">
                                                <td></td><td></td><td></td>
                                                <td></td><td></td><td></td>
                                                <td></td><td>No data found</td><td></td>
                                                <td></td><td></td><td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                            </tr>
                                            <?php
                                          }else{

               $currmon = date('m');
               $curryear=date('y');
               foreach ($revenue as $value) {
               ?>
            <tr class="odd gradeX monthly" id="row<?= $value->id ?>">
               <!-- <td class=""></td> -->
               <td class="budget_name">
                  <!-- <select class="form-control" required disabled>
                     <option value="<?= $value->name ?>"><?= $value->name ?></option>
                     </select>
                     <p style="color: red; text-align: left; margin-bottom: 2px; display: none">*required</p> -->
                  <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
               </td>


<?php
//|| (($curryear == date('y',strtotime($value->created_at))) && ())
if($curryear > date('y',strtotime($value->created_at))){
    $readonly="readonly";
    $disabled="disabled";
}else{
      $readonly="";
        $disabled="";

    }

?>
                <td class="jan">

                  <input type="number" class="form-control" value="<?= $value->jan ?>" id="jan<?= $value->id ?>" <?php if($currmon >= "01"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="feb">
                  <input type="number" class="form-control" value="<?= $value->feb ?>" id="feb<?= $value->id ?>" <?php if($currmon >= "02"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="mar">
                  <input type="number" class="form-control" value="<?= $value->mar ?>" id="mar<?= $value->id ?>" <?php if($currmon >= "03"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="apr">
                  <input type="number" class="form-control" value="<?= $value->apr ?>" id="apr<?= $value->id ?>" <?php if($currmon >= "04"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="may">
                  <input type="number" class="form-control" value="<?= $value->may ?>" id="may<?= $value->id ?>" <?php if($currmon >= "05"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="jun">
                  <input type="number" class="form-control" value="<?= $value->jun ?>" id="jun<?= $value->id ?>" <?php if($currmon >= "06"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="jul">
                  <input type="number" class="form-control" value="<?= $value->jul ?>" id="jul<?= $value->id ?>" <?php if($currmon >= "07"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="aug">
                  <input type="number" class="form-control" value="<?= $value->aug ?>" id="aug<?= $value->id ?>" <?php if($currmon >= "08"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="sep">
                  <input type="number" class="form-control" value="<?= $value->sep ?>" id="sep<?= $value->id ?>" <?php if($currmon >= "09"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="oct">
                  <input type="number" class="form-control" value="<?= $value->oct ?>" id="oct<?= $value->id ?>" <?php if($currmon >= "10"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="nov">
                  <input type="number" class="form-control" value="<?= $value->nov ?>" id="nov<?= $value->id ?>" <?php if($currmon >= "11"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="dec">
                  <input type="number" class="form-control" value="<?= $value->decem ?>" id="dec<?= $value->id ?>" <?php if($currmon >= "12"){ ?> readonly <?php }else{ echo $readonly; } ?>>
               </td>
               <td class="budg_total">
                  <?= ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?>
               </td>
               <td class="showgraph" id="showgraph<?= $value->id ?>">
                  <a href="<?= url('monthly_expense_chart')."/".$value->id ?>">
                     <div id="bar-chart<?= $value->id ?>" style="height: 20px; width: 50px"></div>
                  </a>
                  <script type="text/javascript">
                     $(function () {
                           "use strict";

                           //BAR CHART
                           var bar = new Morris.Bar({
                             element: 'bar-chart<?= $value->id ?>',
                             resize: true,
                             data: [
                               {y: '', a: <?= $value->jan ?>},
                               {y: '', a: <?= $value->feb ?>},
                               {y: '', a: <?= $value->mar ?>},
                               {y: '', a: <?= $value->apr ?>},
                               {y: '', a: <?= $value->may ?>},
                               {y: '', a: <?= $value->jun ?>},
                               {y: '', a: <?= $value->jul ?>},
                               {y: '', a: <?= $value->aug ?>},
                               {y: '', a: <?= $value->sep ?>},
                               {y: '', a: <?= $value->oct ?>},
                               {y: '', a: <?= $value->nov ?>},
                               {y: '', a: <?= $value->decem ?>}
                             ],
                             barColors: ['#da291c'],
                             xkey: 'y',
                             ykeys: ['a'],
                             labels: ['', ''],
                             hideHover: 'auto',
                             padding: 1,
                           });
                         });
                  </script>
               </td>
            </tr>
            <?php
               }
               ?>
         </tbody>
         <?php if($revenue_count == 0){ $style = "style='display:none'"; }else{ $style = "style=''"; } ?>
         <tbody class="sectbody" <?= $style ?>>
            <tr class="odd gradeX">
               <!-- <td></td> -->
               <td style="text-align:left; color:#da291c; padding: 10px; font-weight: bold">Total</td>
               <td id="jantotal"><?= $jantotal ?></td>
               <td id="febtotal"><?= $febtotal ?></td>
               <td id="martotal"><?= $martotal ?></td>
               <td id="aprtotal"><?= $aprtotal ?></td>
               <td id="maytotal"><?= $maytotal ?></td>
               <td id="juntotal"><?= $juntotal ?></td>
               <td id="jultotal"><?= $jultotal ?></td>
               <td id="augtotal"><?= $augtotal ?></td>
               <td id="septotal"><?= $septotal ?></td>
               <td id="octtotal"><?= $octtotal ?></td>
               <td id="novtotal"><?= $novtotal ?></td>
               <td id="dectotal"><?= $dectotal ?></td>
               <td id="budget_total"><?= $monthtotal ?></td>
               <td class="chart_monthly">
                  <a href="<?= url('total_monthly_expense_chart') ?>">
                     <div id="bar-chart_total" style="height: 20px; width: 50px"></div>
                  </a>
                  <script type="text/javascript">
                     $(function () {
                           "use strict";

                           //BAR CHART
                           var bar = new Morris.Bar({
                             element: 'bar-chart_total',
                             resize: true,
                             data: [
                               {y: '', a: <?= $jantotal ?>},
                               {y: '', a: <?= $febtotal ?>},
                               {y: '', a: <?= $martotal ?>},
                               {y: '', a: <?= $aprtotal ?>},
                               {y: '', a: <?= $maytotal ?>},
                               {y: '', a: <?= $juntotal ?>},
                               {y: '', a: <?= $jultotal ?>},
                               {y: '', a: <?= $augtotal ?>},
                               {y: '', a: <?= $septotal ?>},
                               {y: '', a: <?= $octtotal ?>},
                               {y: '', a: <?= $novtotal ?>},
                               {y: '', a: <?= $dectotal ?>}
                             ],
                             barColors: ['#da291c'],
                             xkey: 'y',
                             ykeys: ['a'],
                             labels: ['', ''],
                             hideHover: 'auto',
                             padding: 1,
                           });
                         });
                  </script>
               </td>
            </tr>
            <tr class="odd gradeX">
               <!-- <td></td> -->
               <td></td>
               <td>
                  <a id="jansave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "01"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="febsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "02"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="marsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "03"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="aprsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "04"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="maysave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "05"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="junsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "06"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="julsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "07"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="augsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "08"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="sepsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "09"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="octsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "10"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="novsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "11"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td>
                  <a id="decsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "12"){ echo "disabled"; }else{ echo $disabled; }?>>Save</a><br>
                  <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
               </td>
               <td></td>
               <td></td>
            </tr>
        <?php } ?>
         </tbody>
      </table>
   </div>
</div>

               <?php

        $html=ob_get_clean();
        echo $html;
    }



    public function tab2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();

        if(count($data['revenue']) > 0){
            $data['revenue_count'] = $data['revenue'][0]->id;
        }else{
            $data['revenue_count'] = 0;
        }
        $data['jantotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();

        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count'] = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count'] = 0;
        }

        $data['janmartotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['quaterlytotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }

        return view('tab2')->with($data);
    }
    public function tab3()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jangrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2'] = DB::table('revenue_budget')->where('uid',$uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['monthgrosstotal2'] = $data['jangrosstotal2'] + $data['febgrosstotal2'] + $data['margrosstotal2'] + $data['aprgrosstotal2'] + $data['maygrosstotal2'] + $data['jungrosstotal2'] + $data['julgrosstotal2'] + $data['auggrosstotal2'] + $data['sepgrosstotal2'] + $data['octgrosstotal2'] + $data['novgrosstotal2'] + $data['decgrosstotal2'];
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthgrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'] + $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'] + $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'] + $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['janothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['monthothrevenue'] = $data['janothrevenue'] + $data['febothrevenue'] + $data['marothrevenue'] + $data['aprothrevenue'] + $data['mayothrevenue'] + $data['junothrevenue'] + $data['julothrevenue'] + $data['augothrevenue'] + $data['sepothrevenue'] + $data['octothrevenue'] + $data['novothrevenue'] + $data['decothrevenue'];
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['monthotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'] + $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'] + $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'] + $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['expense'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal2'] = $data['jantotal2'] + $data['febtotal2'] + $data['martotal2'] + $data['aprtotal2'] + $data['maytotal2'] + $data['juntotal2'] + $data['jultotal2'] + $data['augtotal2'] + $data['septotal2'] + $data['octtotal2'] + $data['novtotal2'] + $data['dectotal2'];
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotal2actual'] = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'] + $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'] + $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'] + $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }

        return view('tab3')->with($data);
    }
    public function tab4()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }

        return view('tab4')->with($data);
    }


    public function tab4_year(Request $request)
    {
        $year=$request->year;

        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']=$revenue = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at',$year)->get();
        $data['jantotal']=$jantotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal'] =$augtotal= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal'] =$septotal= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal'] =$octtotal= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at',$year)->sum('oct');
        $data['novtotal'] =$novtotal= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at',$year)->sum('nov');
        $data['dectotal'] =$dectotal= DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at',$year)->sum('decem');
        $data['monthtotal'] =$monthtotal= $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] =$jantotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] =$febtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] =$martotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual']=$aprtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual']=$maytotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual']=$juntotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual']=$jultotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual']=$augtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual']=$septotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual']=$octtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual']=$novtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual']=$dectotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthtotalactual']=$monthtotalactual = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        ob_start();
               ?>


               <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan</th>
                                                            <th colspan="3">Feb</th>
                                                            <th colspan="3">Mar</th>
                                                            <th colspan="3">Apr</th>
                                                            <th colspan="3">May</th>
                                                            <th colspan="3">Jun</th>
                                                            <th colspan="3">Jul</th>
                                                            <th colspan="3">Aug</th>
                                                            <th colspan="3">Sep</th>
                                                            <th colspan="3">Oct</th>
                                                            <th colspan="3">Nov</th>
                                                            <th colspan="3">Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($revenue as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->jan ?></td>
                                                                <td><?php echo $actual_jan = HomeController::getjanactual($value->name); ?></td>
                                                                <td><?= ($value->jan - $actual_jan) ?></td>
                                                                <td><?= $value->feb ?></td>
                                                                <td><?php echo $actual_feb = HomeController::getfebactual($value->name); ?></td>
                                                                <td><?= ($value->feb - $actual_feb) ?></td>
                                                                <td><?= $value->mar ?></td>
                                                                <td><?php echo $actual_mar = HomeController::getmaractual($value->name); ?></td>
                                                                <td><?= ($value->mar - $actual_mar) ?></td>
                                                                <td><?= $value->apr ?></td>
                                                                <td><?php echo $actual_apr = HomeController::getapractual($value->name); ?></td>
                                                                <td><?= ($value->apr - $actual_apr) ?></td>
                                                                <td><?= $value->may ?></td>
                                                                <td><?php echo $actual_may = HomeController::getmayactual($value->name); ?></td>
                                                                <td><?= ($value->may - $actual_may) ?></td>
                                                                <td><?= $value->jun ?></td>
                                                                <td><?php echo $actual_jun = HomeController::getjunactual($value->name); ?></td>
                                                                <td><?= ($value->jun - $actual_jun) ?></td>
                                                                <td><?= $value->jul ?></td>
                                                                <td><?php echo $actual_jul = HomeController::getjulactual($value->name); ?></td>
                                                                <td><?= ($value->jul - $actual_jul) ?></td>
                                                                <td><?= $value->aug ?></td>
                                                                <td><?php echo $actual_aug = HomeController::getaugactual($value->name); ?></td>
                                                                <td><?= ($value->aug - $actual_aug) ?></td>
                                                                <td><?= $value->sep ?></td>
                                                                <td><?php echo $actual_sep = HomeController::getsepactual($value->name); ?></td>
                                                                <td><?= ($value->sep - $actual_sep) ?></td>
                                                                <td><?= $value->oct ?></td>
                                                                <td><?php echo $actual_oct =HomeController::getoctactual($value->name); ?></td>
                                                                <td><?= ($value->oct - $actual_oct) ?></td>
                                                                <td><?= $value->nov ?></td>
                                                                <td><?php echo $actual_nov = HomeController::getnovactual($value->name); ?></td>
                                                                <td><?= ($value->nov - $actual_nov) ?></td>
                                                                <td><?= $value->decem ?></td>
                                                                <td><?php echo $actual_decem =HomeController::getdecemactual($value->name); ?></td>
                                                                <td><?= ($value->decem - $actual_decem) ?></td>
                                                                <td> <?= $tot = ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?></td>
                                                                <td><?php echo $actual_total =HomeController::gettotalactual($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total) ?></td>
                                                                <td>
                                                                    <a href="<?php echo  url('revenue_variance_monthly_graph')."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td><?= $jantotal ?></td>
                                                            <td><?= $jantotalactual ?></td>
                                                            <td><?= ($jantotal-$jantotalactual) ?></td>
                                                            <td><?= $febtotal ?></td>
                                                            <td><?= $febtotalactual ?></td>
                                                            <td><?= ($febtotal-$febtotalactual) ?></td>
                                                            <td><?= $martotal ?></td>
                                                            <td><?= $martotalactual ?></td>
                                                            <td><?= ($martotal-$martotalactual) ?></td>
                                                            <td><?= $aprtotal ?></td>
                                                            <td><?= $aprtotalactual ?></td>
                                                            <td><?= ($aprtotal-$aprtotalactual) ?></td>
                                                            <td><?= $maytotal ?></td>
                                                            <td><?= $maytotalactual ?></td>
                                                            <td><?= ($maytotal-$maytotalactual) ?></td>
                                                            <td><?= $juntotal ?></td>
                                                            <td><?= $juntotalactual ?></td>
                                                            <td><?= ($juntotal-$juntotalactual) ?></td>
                                                            <td><?= $jultotal ?></td>
                                                            <td><?= $jultotalactual ?></td>
                                                            <td><?= ($jultotal-$jultotalactual) ?></td>
                                                            <td><?= $augtotal ?></td>
                                                            <td><?= $augtotalactual ?></td>
                                                            <td><?= ($augtotal-$augtotalactual) ?></td>
                                                            <td><?= $septotal ?></td>
                                                            <td><?= $septotalactual ?></td>
                                                            <td><?= ($septotal-$septotalactual) ?></td>
                                                            <td><?= $octtotal ?></td>
                                                            <td><?= $octtotalactual ?></td>
                                                            <td><?= ($octtotal-$octtotalactual) ?></td>
                                                            <td><?= $novtotal ?></td>
                                                            <td><?= $novtotalactual ?></td>
                                                            <td><?= ($novtotal-$novtotalactual) ?></td>
                                                            <td><?= $dectotal ?></td>
                                                            <td><?= $dectotalactual ?></td>
                                                            <td><?= ($dectotal-$dectotalactual) ?></td>
                                                            <td><?= $tott = ($jantotal + $febtotal + $martotal + $aprtotal + $maytotal + $juntotal + $jultotal + $augtotal + $septotal + $octtotal + $novtotal + $dectotal) ?></td>
                                                            <td><?= $tott2 = ($jantotalactual + $febtotalactual + $martotalactual + $aprtotalactual + $maytotalactual + $juntotalactual + $jultotalactual + $augtotalactual + $septotalactual + $octtotalactual + $novtotalactual + $dectotalactual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('revenue_monthly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>

        <?php $html=ob_get_clean();
        echo $html;

    }


 public function tab4_quaterly_year(Request $request)
    {
        $year=$request->year;


        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']=$revenue = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['janmartotal']=$janmartotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal'] =$monthtotal= $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual'] =$jantotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] =$febtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] =$martotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] =$maytotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] =$juntotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] =$jultotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] =$augtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] =$septotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] =$octtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] =$novtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] =$dectotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmartotalactual']=$janmartotalactual = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual']=$aprjuntotalactual = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual']=$julseptotalactual = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual']=$octdectotalactual = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual']=$monthtotalactual = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat']=$chat = "off";
            }
            if($cdet->tools == "on"){
                $data['tools']=$tools = "on";
            }
            else{
                $data['tools']=$tools = "off";
            }
        }

        ob_start();
               ?>
              <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan-Mar</th>
                                                            <th colspan="3">Apr-Jun</th>
                                                            <th colspan="3">Jul-Sep</th>
                                                            <th colspan="3">Oct-Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($revenue as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->janmar ?></td>
                                                                <td><?php echo $actual_janmar =HomeController::getjanmaractual($value->name); ?></td>
                                                                <td><?= ($value->janmar - $actual_janmar) ?></td>
                                                                <td><?= $value->aprjun ?></td>
                                                                <td><?php echo $actual_aprjun = HomeController::getaprjunactual($value->name); ?></td>
                                                                <td><?= ($value->aprjun - $actual_aprjun) ?></td>
                                                                <td><?= $value->julsep ?></td>
                                                                <td><?php echo $actual_julsep = HomeController::getjulsepactual($value->name); ?></td>
                                                                <td><?= ($value->julsep - $actual_julsep) ?></td>
                                                                <td><?= $value->octdec ?></td>
                                                                <td><?php echo $actual_octdec = HomeController::getoctdecactual($value->name); ?></td>
                                                                <td><?= ($value->octdec - $actual_octdec) ?></td>

                                                                <td> <?= $tot = ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?></td>
                                                                <td><?php echo $actual_total =HomeController::gettotalactual($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total) ?></td>
                                                                <td>
                                                                    <a href="<?php echo  url('revenue_variance_quarterly_graph')."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td><?= $janmartotal ?></td>
                                                            <td><?= $janmartotalactual ?></td>
                                                            <td><?= ($janmartotal-$janmartotalactual) ?></td>
                                                            <td><?= $aprjuntotal ?></td>
                                                            <td><?= $aprjuntotalactual ?></td>
                                                            <td><?= ($aprjuntotal-$aprjuntotalactual) ?></td>
                                                            <td><?= $julseptotal ?></td>
                                                            <td><?= $julseptotalactual ?></td>
                                                            <td><?= ($julseptotal-$julseptotalactual) ?></td>
                                                            <td><?= $octdectotal ?></td>
                                                            <td><?= $octdectotalactual ?></td>
                                                            <td><?= ($octdectotal-$octdectotalactual) ?></td>
                                                            <td><?= $tott = ($janmartotal + $aprjuntotal + $julseptotal + $octdectotal) ?></td>
                                                            <td><?= $tott2 = ($janmartotalactual + $aprjuntotalactual + $julseptotalactual + $octdectotalactual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?php echo url('revenue_quarterly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>

        <?php $html=ob_get_clean();
        echo $html;

    }

    public function revenue_variance_monthly_graph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_account')->where('uid', $uid)->where('account_name', $request->id)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        return view('revenue_variance_monthly_graph')->with($data);
    }
    public function revenue_variance_quarterly_graph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('revenue_variance_quarterly_graph')->with($data);
    }
    public function revenue_variance_quarterly_graph2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('revenue_variance_quarterly_graph')->with($data);
    }
    public function gross_revenue_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jangrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('gross_revenue_chart')->with($data);
    }
    public function gross_quarter_revenue_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmargrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjungrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julsepgrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdecgrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmargrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'];
        $data['aprjungrossactual'] = $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'];
        $data['julsepgrossactual'] = $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'];
        $data['octdecgrossactual'] = $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('gross_quarter_revenue_chart')->with($data);
    }
    public function gross_quarter_revenue_chart2()
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmargrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjungrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julsepgrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdecgrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmargrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'];
        $data['aprjungrossactual'] = $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'];
        $data['julsepgrossactual'] = $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'];
        $data['octdecgrossactual'] = $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('gross_quarter_revenue_chart')->with($data);
    }
    public function other_revenue_chart(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('other_revenue_chart')->with($data);
    }
    public function other_quarter_revenue_chart()
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmarothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('janmar');
        $data['aprjunothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aprjun');
        $data['julsepothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('julsep');
        $data['octdecothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('octdec');
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['janmarotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'];
        $data['aprjunotherrevenue'] = $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'];
        $data['julsepotherrevenue'] = $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'];
        $data['octdecotherrevenue'] = $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('other_quarter_revenue_chart')->with($data);
    }
    public function other_quarter_revenue_chart2()
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmarothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('janmar');
        $data['aprjunothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aprjun');
        $data['julsepothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('julsep');
        $data['octdecothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('octdec');
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['janmarotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'];
        $data['aprjunotherrevenue'] = $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'];
        $data['julsepotherrevenue'] = $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'];
        $data['octdecotherrevenue'] = $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('other_quarter_revenue_chart')->with($data);
    }
    public function gross_revenue_chart2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jangrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('gross_revenue_chart')->with($data);
    }
    public function other_revenue_chart2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('other_revenue_chart')->with($data);
    }
    public function expense_variance_monthly_graph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('expense_variance_monthly_graph')->with($data);
    }
    public function expense_variance_quarterly_graph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('expense_variance_quarterly_graph')->with($data);
    }
    public function expense_variance_quarterly_graph2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('expense_variance_quarterly_graph')->with($data);
    }
    public function revenue_variance_monthly_graph2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('revenue_variance_monthly_graph2')->with($data);
    }
    public function expense_variance_monthly_graph2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['value'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', $request->id)->first();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('expense_variance_monthly_graph2')->with($data);
    }
    public function projection_monthly_vary_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
         $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('projection_monthly_vary_chart')->with($data);
    }
    public function projectionexp_monthly_vary_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('projectionexp_monthly_vary_chart')->with($data);
    }
    public function all_revenue_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('all_revenue_chart')->with($data);
    }

    public function est_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();





        $data['jantotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['febtotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['martotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['aprtotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['maytotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['juntotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['jultotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['augtotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['septotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['octtotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['novtotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['dectotalactual5'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');


        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid') - $data['jantotalactual5'];
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid') - $data['febtotalactual5'];
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid') - $data['martotalactual5'];
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid') - $data['aprtotalactual5'];
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid') - $data['maytotalactual5'];
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid') - $data['juntotalactual5'];
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid') - $data['jultotalactual5'];
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid') - $data['augtotalactual5'];
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid') - $data['septotalactual5'];
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid') - $data['octtotalactual5'];
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid') - $data['novtotalactual5'];
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid') - $data['dectotalactual5'];
        $data['chat'] = "";
        $data['tools'] = "";


        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('est')->with($data);
    }
    public function all_quarter_revenue_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('all_quarter_revenue_chart')->with($data);
    }
    public function all_quarter_revenue_chart2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('all_quarter_revenue_chart')->with($data);
    }
    public function all_revenue_chart2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('all_revenue_chart')->with($data);
    }
    public function revenue_monthly_vary_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('revenue_monthly_vary_chart')->with($data);
    }
    public function revenue_quarterly_vary_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('revenue_quarterly_vary_chart')->with($data);
    }
    public function revenue_quarterly_vary_chart2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('revenue_quarterly_vary_chart')->with($data);
    }
    public function expense_monthly_vary_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('expense_monthly_vary_chart')->with($data);
    }
    public function expense_quarterly_vary_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('expense_quarterly_vary_chart')->with($data);
    }
    public function expense_quarterly_vary_chart2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('amount_paid');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('expense_quarterly_vary_chart')->with($data);
    }
    public function tab5()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
         $data['revenue'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab5')->with($data);
    }


    public function tab5_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
         $data['revenue']=$revenue = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['jantotal']=$jantotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal']=$septotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal']=$octtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at',$year)->sum('oct');
        $data['novtotal']=$novtotal = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal'] =$dectotal= DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal'] =$monthtotal= $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] =$jantotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual'] =$febtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual'] =$martotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual'] =$maytotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual'] =$juntotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual'] =$jultotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual'] =$augtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual'] =$septotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual'] =$octtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual'] =$novtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual'] =$dectotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotalactual'] =$monthtotalactual= $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] =$chat= "on";
            }
            else{
                $data['chat'] =$chat= "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] =$tools= "on";
            }
            else{
                $data['tools'] =$tools= "off";
            }
        }

        ob_start();
               ?>
         <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan</th>
                                                            <th colspan="3">Feb</th>
                                                            <th colspan="3">Mar</th>
                                                            <th colspan="3">Apr</th>
                                                            <th colspan="3">May</th>
                                                            <th colspan="3">Jun</th>
                                                            <th colspan="3">Jul</th>
                                                            <th colspan="3">Aug</th>
                                                            <th colspan="3">Sep</th>
                                                            <th colspan="3">Oct</th>
                                                            <th colspan="3">Nov</th>
                                                            <th colspan="3">Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($revenue as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->jan ?></td>
                                                                <td><?php echo $actual_jan = HomeController::getjanactualexp($value->name); ?></td>
                                                                <td><?= ($value->jan - $actual_jan) ?></td>
                                                                <td><?= $value->feb ?></td>
                                                                <td><?php echo $actual_feb = HomeController::getfebactualexp($value->name); ?></td>
                                                                <td><?= ($value->feb - $actual_feb) ?></td>
                                                                <td><?= $value->mar ?></td>
                                                                <td><?php echo $actual_mar = HomeController::getmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->mar - $actual_mar) ?></td>
                                                                <td><?= $value->apr ?></td>
                                                                <td><?php echo $actual_apr = HomeController::getapractualexp($value->name); ?></td>
                                                                <td><?= ($value->apr - $actual_apr) ?></td>
                                                                <td><?= $value->may ?></td>
                                                                <td><?php echo $actual_may = HomeController::getmayactualexp($value->name); ?></td>
                                                                <td><?= ($value->may - $actual_may) ?></td>
                                                                <td><?= $value->jun ?></td>
                                                                <td><?php echo $actual_jun = HomeController::getjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->jun - $actual_jun) ?></td>
                                                                <td><?= $value->jul ?></td>
                                                                <td><?php echo $actual_jul =HomeController::getjulactualexp($value->name); ?></td>
                                                                <td><?= ($value->jul - $actual_jul) ?></td>
                                                                <td><?= $value->aug ?></td>
                                                                <td><?php echo $actual_aug = HomeController::getaugactualexp($value->name); ?></td>
                                                                <td><?= ($value->aug - $actual_aug) ?></td>
                                                                <td><?= $value->sep ?></td>
                                                                <td><?php echo $actual_sep =HomeController::getsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->sep - $actual_sep) ?></td>
                                                                <td><?= $value->oct ?></td>
                                                                <td><?php echo $actual_oct = HomeController::getoctactualexp($value->name); ?></td>
                                                                <td><?= ($value->oct - $actual_oct) ?></td>
                                                                <td><?= $value->nov ?></td>
                                                                <td><?php echo $actual_nov = HomeController::getnovactualexp($value->name); ?></td>
                                                                <td><?= ($value->nov - $actual_nov) ?></td>
                                                                <td><?= $value->decem ?></td>
                                                                <td><?php echo $actual_decem = HomeController::getdecemactualexp($value->name); ?></td>
                                                                <td><?= ($value->decem - $actual_decem) ?></td>
                                                                <td> <?= $tot = ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?></td>
                                                                <td><?php echo $actual_total = HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total) ?></td>
                                                                <td>
                                                                    <a href="<?php echo  url('expense_variance_monthly_graph') ."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $jantotal ?></td>
                                                            <td><?= $jantotalactual ?></td>
                                                            <td><?= ($jantotal-$jantotalactual) ?></td>
                                                            <td><?= $febtotal ?></td>
                                                            <td><?= $febtotalactual ?></td>
                                                            <td><?= ($febtotal-$febtotalactual) ?></td>
                                                            <td><?= $martotal ?></td>
                                                            <td><?= $martotalactual ?></td>
                                                            <td><?= ($martotal-$martotalactual) ?></td>
                                                            <td><?= $aprtotal ?></td>
                                                            <td><?= $aprtotalactual ?></td>
                                                            <td><?= ($aprtotal-$aprtotalactual) ?></td>
                                                            <td><?= $maytotal ?></td>
                                                            <td><?= $maytotalactual ?></td>
                                                            <td><?= ($maytotal-$maytotalactual) ?></td>
                                                            <td><?= $juntotal ?></td>
                                                            <td><?= $juntotalactual ?></td>
                                                            <td><?= ($juntotal-$juntotalactual) ?></td>
                                                            <td><?= $jultotal ?></td>
                                                            <td><?= $jultotalactual ?></td>
                                                            <td><?= ($jultotal-$jultotalactual) ?></td>
                                                            <td><?= $augtotal ?></td>
                                                            <td><?= $augtotalactual ?></td>
                                                            <td><?= ($augtotal-$augtotalactual) ?></td>
                                                            <td><?= $septotal ?></td>
                                                            <td><?= $septotalactual ?></td>
                                                            <td><?= ($septotal-$septotalactual) ?></td>
                                                            <td><?= $octtotal ?></td>
                                                            <td><?= $octtotalactual ?></td>
                                                            <td><?= ($octtotal-$octtotalactual) ?></td>
                                                            <td><?= $novtotal ?></td>
                                                            <td><?= $novtotalactual ?></td>
                                                            <td><?= ($novtotal-$novtotalactual) ?></td>
                                                            <td><?= $dectotal ?></td>
                                                            <td><?= $dectotalactual ?></td>
                                                            <td><?= ($dectotal-$dectotalactual) ?></td>
                                                            <td><?= $tott = ($jantotal + $febtotal + $martotal + $aprtotal + $maytotal + $juntotal + $jultotal + $augtotal + $septotal + $octtotal + $novtotal + $dectotal) ?></td>
                                                            <td><?= $tott2 = ($jantotalactual + $febtotalactual + $martotalactual + $aprtotalactual + $maytotalactual + $juntotalactual + $jultotalactual + $augtotalactual + $septotalactual + $octtotalactual + $novtotalactual + $dectotalactual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?php echo  url('expense_monthly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
        <?php $html=ob_get_clean();
        echo $html;

    }


public function tab5_quaterly_year(Request $request)
    {
        $year=$request->year;
if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] =$status= DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] =$links= Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] =$top_videos= HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
         $data['revenue']=$revenue = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['janmartotal']=$janmartotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal']=$monthtotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual']=$jantotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual']=$febtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual']=$martotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual']=$aprtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual']=$maytotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual']=$juntotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual']=$jultotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date',$year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual']=$augtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual']=$septotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual']=$octtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual']=$novtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual']=$dectotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotalactual']=$janmartotalactual = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual']=$aprjuntotalactual = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual']=$julseptotalactual = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual']=$octdectotalactual = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual']=$monthtotalactual = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat']=$chat = "off";
            }
            if($cdet->tools == "on"){
                $data['tools']=$tools = "on";
            }
            else{
                $data['tools']=$tools = "off";
            }
        }

        ob_start();
               ?>
                <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan - Mar</th>
                                                            <th colspan="3">Apr - Jun</th>
                                                            <th colspan="3">Jul - Sep</th>
                                                            <th colspan="3">Oct - Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                         <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($revenue as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->janmar ?></td>
                                                                <td><?php echo $actual_janmar =HomeController::getjanmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->janmar - $actual_janmar) ?></td>
                                                                <td><?= $value->aprjun ?></td>
                                                                <td><?php echo $actual_aprjun =HomeController::getaprjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->aprjun - $actual_aprjun) ?></td>
                                                                <td><?= $value->julsep ?></td>
                                                                <td><?php echo $actual_julsep =HomeController::getjulsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->julsep - $actual_julsep) ?></td>
                                                                <td><?= $value->octdec ?></td>
                                                                <td><?php echo $actual_octdec = HomeController::getoctdecactualexp($value->name); ?></td>
                                                                <td><?= ($value->octdec - $actual_octdec) ?></td>

                                                                <td> <?= $tot = ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?></td>
                                                                <td><?php echo $actual_total =HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total) ?></td>
                                                                <td>
                                                                    <a href="<?php echo url('expense_variance_quarterly_graph') ."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $janmartotal ?></td>
                                                            <td><?= $janmartotalactual ?></td>
                                                            <td><?= ($janmartotal-$janmartotalactual) ?></td>
                                                            <td><?= $aprjuntotal ?></td>
                                                            <td><?= $aprjuntotalactual ?></td>
                                                            <td><?= ($aprjuntotal-$aprjuntotalactual) ?></td>
                                                            <td><?= $julseptotal ?></td>
                                                            <td><?= $julseptotalactual ?></td>
                                                            <td><?= ($julseptotal-$julseptotalactual) ?></td>
                                                            <td><?= $octdectotal ?></td>
                                                            <td><?= $octdectotalactual ?></td>
                                                            <td><?= ($octdectotal-$octdectotalactual) ?></td>

                                                            <td><?= $tott = ($janmartotal + $aprjuntotal + $julseptotal + $octdectotal) ?></td>
                                                            <td><?= $tott2 = ($janmartotalactual + $aprjuntotalactual + $julseptotalactual + $octdectotalactual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?php echo  url('expense_quarterly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>

        <?php $html=ob_get_clean();
        echo $html;

    }

    public function create_projection()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count'] = $data['revenue'][0]->id;
        }else{
            $data['revenue_count'] = 0;
        }
        $data['jantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count'] = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count'] = 0;
        }
        $data['janmartotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['quaterlytotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('create_projection')->with($data);
    }
    public function create_projection_year(Request $request){
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']=$revenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count']=$revenue_count = $data['revenue'][0]->id;
        }else{
            $data['revenue_count']=$revenue_count = 0;
        }
        $data['jantotal']=$jantotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal']=$septotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal']=$octtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal'] =$novtotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal'] =$dectotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal'] =$monthtotal= $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];

        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat']=$chat = "off";
            }
            if($cdet->tools == "on"){
                $data['tools']=$tools = "on";
            }
            else{
                $data['tools']=$tools = "off";
            }
        }
        ob_start();
        ?>
                                 <div class="table-wrap">

        <table class="table table-striped table-bordered table-hover main-table" id="">
                                       <thead>
                                          <tr>
                                             <th class=""></th>
                                             <th>Jan</th>
                                             <th>Feb</th>
                                             <th>Mar</th>
                                             <th>Apr</th>
                                             <th>May</th>
                                             <th>Jun</th>
                                             <th>Jul</th>
                                             <th>Aug</th>
                                             <th>Sep</th>
                                             <th>Oct</th>
                                             <th>Nov</th>
                                             <th>Dec</th>
                                             <th>Total</th>
                                             <th>Graph</th>
                                          </tr>
                                          <tr>
                                             <th class="">
                                                <!-- <a href="javascript:void(0);" class="add_button" title="Add field">
                                                   <span class="glyphicon glyphicon-plus" style="text-align: center; color: white; font-size: 20px; font-weight: bold"></span>
                                                   </a> -->
                                             </th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th></th>
                                          </tr>
                                       </thead>
                                       <?php
                                       if(count($data['revenue']) > 0){
                                       ?>
                                       <tbody class="field_wrapper">
                                          <?php
                                          $currmon = date('m');
                                          $curryear=date('y');


                                             foreach ($revenue as $value) {

                                            if($curryear > date('y',strtotime($value->created_at))){
                                                $readonly="readonly";
                                                $disabled="disabled";
                                            }else{
                                                  $readonly="";
                                                    $disabled="";

                                                }
                                             ?>
                                          <tr class="odd gradeX monthly" id="row<?= $value->id ?>">
                                             <!-- <td class=""></td> -->
                                             <td class="budget_name">
                                                <!-- <select class="form-control" required disabled>
                                                   <option value="<?= $value->name ?>"><?= $value->name ?></option>
                                                   </select>
                                                   <p style="color: red; text-align: left; margin-bottom: 2px; display: none">*required</p> -->
                                                <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
                                             </td>
                                             <td class="jan">
                                                <input type="number" class="form-control" value="<?= $value->jan ?>" id="jan<?= $value->id ?>" <?php if($currmon >= "01"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="feb">
                                                <input type="number" class="form-control" value="<?= $value->feb ?>" id="feb<?= $value->id ?>" <?php if($currmon >= "02"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="mar">
                                                <input type="number" class="form-control" value="<?= $value->mar ?>" id="mar<?= $value->id ?>" <?php if($currmon >= "03"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="apr">
                                                <input type="number" class="form-control" value="<?= $value->apr ?>" id="apr<?= $value->id ?>" <?php if($currmon >= "04"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="may">
                                                <input type="number" class="form-control" value="<?= $value->may ?>" id="may<?= $value->id ?>" <?php if($currmon >= "05"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="jun">
                                                <input type="number" class="form-control" value="<?= $value->jun ?>" id="jun<?= $value->id ?>" <?php if($currmon >= "06"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="jul">
                                                <input type="number" class="form-control" value="<?= $value->jul ?>" id="jul<?= $value->id ?>" <?php if($currmon >= "07"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="aug">
                                                <input type="number" class="form-control" value="<?= $value->aug ?>" id="aug<?= $value->id ?>" <?php if($currmon >= "08"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="sep">
                                                <input type="number" class="form-control" value="<?= $value->sep ?>" id="sep<?= $value->id ?>" <?php if($currmon >= "09"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="oct">
                                                <input type="number" class="form-control" value="<?= $value->oct ?>" id="oct<?= $value->id ?>" <?php if($currmon >= "10"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="nov">
                                                <input type="number" class="form-control" value="<?= $value->nov ?>" id="nov<?= $value->id ?>" <?php if($currmon >= "11"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="dec">
                                                <input type="number" class="form-control" value="<?= $value->decem ?>" id="dec<?= $value->id ?>" <?php if($currmon >= "12"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="budg_total">
                                                <?= ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?>
                                             </td>
                                             <td class="showgraph" id="showgraph<?= $value->id ?>">
                                                <a href="<?php echo url('monthly_projection_chart')."/". $value->id ?>">
                                                   <div id="bar-chart<?= $value->id ?>" style="height: 20px; width: 50px"></div>
                                                </a>
                                                <script type="text/javascript">
                                                   $(function () {
                                                         "use strict";

                                                         //BAR CHART
                                                         var bar = new Morris.Bar({
                                                           element: 'bar-chart<?= $value->id ?>',
                                                           resize: true,
                                                           data: [
                                                             {y: '', a: <?= $value->jan ?>},
                                                             {y: '', a: <?= $value->feb ?>},
                                                             {y: '', a: <?= $value->mar ?>},
                                                             {y: '', a: <?= $value->apr ?>},
                                                             {y: '', a: <?= $value->may ?>},
                                                             {y: '', a: <?= $value->jun ?>},
                                                             {y: '', a: <?= $value->jul ?>},
                                                             {y: '', a: <?= $value->aug ?>},
                                                             {y: '', a: <?= $value->sep ?>},
                                                             {y: '', a: <?= $value->oct ?>},
                                                             {y: '', a: <?= $value->nov ?>},
                                                             {y: '', a: <?= $value->decem ?>}
                                                           ],
                                                           barColors: ['#da291c'],
                                                           xkey: 'y',
                                                           ykeys: ['a'],
                                                           labels: ['', ''],
                                                           hideHover: 'auto',
                                                           padding: 1,
                                                         });
                                                       });
                                                </script>
                                             </td>
                                          </tr>
                                          <?php
                                             }
                                             ?>
                                       </tbody>
                                       <?php if($revenue_count == 0){ $style = "style='display:none'"; }else{ $style = "style=''"; } ?>
                                       <tbody class="sectbody" <?= $style ?>>
                                          <tr class="odd gradeX">
                                             <!-- <td></td> -->
                                             <td style="text-align:left; color:#da291c; padding: 10px; font-weight: bold">Total</td>
                                             <td id="jantotal"><?= $jantotal ?></td>
                                             <td id="febtotal"><?= $febtotal ?></td>
                                             <td id="martotal"><?= $martotal ?></td>
                                             <td id="aprtotal"><?= $aprtotal ?></td>
                                             <td id="maytotal"><?= $maytotal ?></td>
                                             <td id="juntotal"><?= $juntotal ?></td>
                                             <td id="jultotal"><?= $jultotal ?></td>
                                             <td id="augtotal"><?= $augtotal ?></td>
                                             <td id="septotal"><?= $septotal ?></td>
                                             <td id="octtotal"><?= $octtotal ?></td>
                                             <td id="novtotal"><?= $novtotal ?></td>
                                             <td id="dectotal"><?= $dectotal ?></td>
                                             <td id="budget_total"><?= $monthtotal ?></td>
                                             <td class="chart_monthly">
                                                <a href="<?php echo url('total_monthly_projection_chart') ?>">
                                                   <div id="bar-chart_total" style="height: 20px; width: 50px"></div>
                                                </a>
                                                <script type="text/javascript">
                                                   $(function () {
                                                         "use strict";

                                                         //BAR CHART
                                                         var bar = new Morris.Bar({
                                                           element: 'bar-chart_total',
                                                           resize: true,
                                                           data: [
                                                             {y: '', a: <?= $jantotal ?>},
                                                             {y: '', a: <?= $febtotal ?>},
                                                             {y: '', a: <?= $martotal ?>},
                                                             {y: '', a: <?= $aprtotal ?>},
                                                             {y: '', a: <?= $maytotal ?>},
                                                             {y: '', a: <?= $juntotal ?>},
                                                             {y: '', a: <?= $jultotal ?>},
                                                             {y: '', a: <?= $augtotal ?>},
                                                             {y: '', a: <?= $septotal ?>},
                                                             {y: '', a: <?= $octtotal ?>},
                                                             {y: '', a: <?= $novtotal ?>},
                                                             {y: '', a: <?= $dectotal ?>}
                                                           ],
                                                           barColors: ['#da291c'],
                                                           xkey: 'y',
                                                           ykeys: ['a'],
                                                           labels: ['', ''],
                                                           hideHover: 'auto',
                                                           padding: 1,
                                                         });
                                                       });
                                                </script>
                                             </td>
                                          </tr>
                                          <tr class="odd gradeX">
                                             <!-- <td></td> -->
                                             <td></td>
                                             <td>
                                                <a id="jansave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "01"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="febsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "02"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="marsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "03"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="aprsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "04"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="maysave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "05"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="junsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "06"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="julsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "07"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="augsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "08"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="sepsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "09"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="octsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "10"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="novsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "11"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="decsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "12"){ ?> disabled <?php }else{ echo $disabled;} ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td></td>
                                             <td></td>
                                          </tr>
                                       </tbody>
                                   <?php }else{
                                    ?>
                                    <tr>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>No data found</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                    <?php
                                   } ?>
                                    </table>
                                </div>
        <?php
        $html=ob_get_clean();
        echo $html;
    }

    public function create_projection_quaterly_year(Request $request){
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue_quaterly']=$revenue_quaterly = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();
        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count']=$revenue_quaterly_count = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count']=$revenue_quaterly_count = 0;
        }
        $data['janmartotal']=$janmartotal = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['quaterlytotal']=$quaterlytotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat']=$chat = "off";
            }
            if($cdet->tools == "on"){
                $data['tools']=$tools = "on";
            }
            else{
                $data['tools']=$tools = "off";
            }
        }
        ob_start();
        ?>
          <table class="table table-striped table-bordered table-hover" id="">
             <thead>
                <tr>
                   <th></th>
                   <th>Jan - Mar</th>
                   <th>Apr - Jun</th>
                   <th>Jul - Sep</th>
                   <th>Oct - Dec</th>
                   <th>Total</th>
                   <th>Graph</th>
                </tr>
                <tr>
                   <th></th>
                   <th>Budget</th>
                   <th>Budget</th>
                   <th>Budget</th>
                   <th>Budget</th>
                   <th>Budget</th>
                   <th></th>
                </tr>
             </thead>
             <tbody class="field_wrapper2">
                <?php
        if(count($data['revenue_quaterly']) > 0){

                   foreach ($revenue_quaterly as $value) {
                   ?>
                <tr class="odd gradeX quarterly" id="roww<?= $value->id ?>">
                   <td class="budget_name">
                      <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
                   </td>
                   <td class="janmar">
                      <input type="number" class="form-control" value="<?= $value->janmar ?>" id="janmar<?= $value->id ?>" readonly>
                   </td>
                   <td class="aprjun">
                      <input type="number" class="form-control" value="<?= $value->aprjun ?>" id="aprjun<?= $value->id ?>" readonly>
                   </td>
                   <td class="julsep">
                      <input type="number" class="form-control" value="<?= $value->julsep ?>" id="julsep<?= $value->id ?>" readonly>
                   </td>
                   <td class="octdec">
                      <input type="number" class="form-control" value="<?= $value->octdec ?>" id="octdec<?= $value->id ?>" readonly>
                   </td>
                   <td class="budg_total2">
                      <?= ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?>
                   </td>
                   <td class="showgraphq" id="showgraphq<?= $value->id ?>">
                      <a href="<?php echo url('quarterly_projection_chart')."/".$value->id ?>">
                         <div id="bar-chartq<?= $value->id ?>" style="height: 20px; width: 30px"></div>
                      </a>
                      <script type="text/javascript">
                         $(function () {
                               "use strict";

                               //BAR CHART
                               var bar = new Morris.Bar({
                                 element: 'bar-chartq<?= $value->id ?>',
                                 resize: true,
                                 data: [
                                   {y: '', a: <?= $value->janmar ?>},
                                   {y: '', a: <?= $value->aprjun ?>},
                                   {y: '', a: <?= $value->julsep ?>},
                                   {y: '', a: <?= $value->octdec ?>}
                                 ],
                                 barColors: ['#da291c'],
                                 xkey: 'y',
                                 ykeys: ['a'],
                                 labels: ['', ''],
                                 hideHover: 'auto',
                                 padding: 1,
                               });
                             });
                      </script>
                   </td>
                </tr>
                <?php
                   }
                   ?>
             </tbody>
             <?php if($revenue_quaterly_count == 0){ $style2 = "style='display:none'"; }else{ $style2 = "style=''"; } ?>
             <tbody class="sectbody2" <?= $style2 ?>>
                <tr class="odd gradeX">
                   <!-- <td></td> -->
                   <td style="text-align:left; color:#da291c; padding: 10px; font-weight: bold">Total</td>
                   <td id="janmartotal"><?= $janmartotal ?></td>
                   <td id="aprjuntotal"><?= $aprjuntotal ?></td>
                   <td id="julseptotal"><?= $julseptotal ?></td>
                   <td id="octdectotal"><?= $octdectotal ?></td>
                   <td id="budget_total"><?= $quaterlytotal ?></td>
                   <td class="chart_quarterly">
                      <a href="<?php url('total_quarterly_projection_chart') ?>">
                         <div id="bar-chart_totalq" style="height: 20px; width: 30px"></div>
                      </a>
                      <script type="text/javascript">
                         $(function () {
                               "use strict";

                               //BAR CHART
                               var bar = new Morris.Bar({
                                 element: 'bar-chart_totalq',
                                 resize: true,
                                 data: [
                                   {y: '', a: <?= $janmartotal ?>},
                                   {y: '', a: <?= $aprjuntotal ?>},
                                   {y: '', a: <?= $julseptotal ?>},
                                   {y: '', a: <?= $octdectotal ?>}
                                 ],
                                 barColors: ['#da291c'],
                                 xkey: 'y',
                                 ykeys: ['a'],
                                 labels: ['', ''],
                                 hideHover: 'auto',
                                 padding: 1,
                               });
                             });
                      </script>
                   </td>
                </tr>
            <?php }else{
                ?>
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>No data found</td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                <?php
            } ?>
             </tbody>
          </table>
        <?php
        $html=ob_get_clean();
        echo $html;
    }
    public function tab22()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count'] = $data['revenue'][0]->id;
        }else{
            $data['revenue_count'] = 0;
        }
        $data['jantotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count'] = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count'] = 0;
        }
        $data['janmartotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['quaterlytotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab22')->with($data);
    }
    public function tab22_year(Request $request){
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']=$revenue = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();
        if(count($data['revenue']) > 0){
            $data['revenue_count']=$revenue_count = $data['revenue'][0]->id;
        }else{
            $data['revenue_count']=$revenue_count = 0;
        }
        $data['jantotal']=$jantotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal']=$septotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal']=$octtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal']=$novtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal']=$dectotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal']=$monthtotal = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];

        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] =$chat= "on";
            }
            else{
                $data['chat'] =$chat= "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] =$tools= "on";
            }
            else{
                $data['tools'] =$tools= "off";
            }
        }
        ob_start();
        ?>
        <div class="table-wrap">
                                    <table class="table table-striped table-bordered table-hover main-table" id="">
                                       <thead>
                                          <tr>
                                             <th class=""></th>
                                             <th>Jan</th>
                                             <th>Feb</th>
                                             <th>Mar</th>
                                             <th>Apr</th>
                                             <th>May</th>
                                             <th>Jun</th>
                                             <th>Jul</th>
                                             <th>Aug</th>
                                             <th>Sep</th>
                                             <th>Oct</th>
                                             <th>Nov</th>
                                             <th>Dec</th>
                                             <th>Total</th>
                                             <th>Graph</th>
                                          </tr>
                                          <tr>
                                             <th class="">
                                                <!-- <a href="javascript:void(0);" class="add_button" title="Add field">
                                                   <span class="glyphicon glyphicon-plus" style="text-align: center; color: white; font-size: 20px; font-weight: bold"></span>
                                                   </a> -->
                                             </th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th>Budget</th>
                                             <th></th>
                                          </tr>
                                       </thead>
                                       <tbody class="field_wrapper">
<?php
                                       if(count($data['revenue']) > 0){
                                       ?>
                                          <?php

                                             $currmon = date('m');
                                          $curryear=date('y');
                                             foreach ($revenue as $value) {
                                                if($curryear > date('y',strtotime($value->created_at))){
                                                $readonly="readonly";
                                                $disabled="disabled";
                                            }else{
                                                  $readonly="";
                                                    $disabled="";

                                                }
                                             ?>
                                          <tr class="odd gradeX monthly" id="row<?= $value->id ?>">
                                             <!-- <td class=""></td> -->
                                             <td class="budget_name">
                                                <!-- <select class="form-control" required disabled>
                                                   <option value="<?= $value->name ?>"><?= $value->name ?></option>
                                                   </select>
                                                   <p style="color: red; text-align: left; margin-bottom: 2px; display: none">*required</p> -->
                                                <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
                                             </td>
                                             <td class="jan">
                                                <input type="number" class="form-control" value="<?= $value->jan ?>" id="jan<?= $value->id ?>" <?php if($currmon >= "01"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="feb">
                                                <input type="number" class="form-control" value="<?= $value->feb ?>" id="feb<?= $value->id ?>" <?php if($currmon >= "02"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="mar">
                                                <input type="number" class="form-control" value="<?= $value->mar ?>" id="mar<?= $value->id ?>" <?php if($currmon >= "03"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="apr">
                                                <input type="number" class="form-control" value="<?= $value->apr ?>" id="apr<?= $value->id ?>" <?php if($currmon >= "04"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="may">
                                                <input type="number" class="form-control" value="<?= $value->may ?>" id="may<?= $value->id ?>" <?php if($currmon >= "05"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="jun">
                                                <input type="number" class="form-control" value="<?= $value->jun ?>" id="jun<?= $value->id ?>" <?php if($currmon >= "06"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="jul">
                                                <input type="number" class="form-control" value="<?= $value->jul ?>" id="jul<?= $value->id ?>" <?php if($currmon >= "07"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="aug">
                                                <input type="number" class="form-control" value="<?= $value->aug ?>" id="aug<?= $value->id ?>" <?php if($currmon >= "08"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="sep">
                                                <input type="number" class="form-control" value="<?= $value->sep ?>" id="sep<?= $value->id ?>" <?php if($currmon >= "09"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="oct">
                                                <input type="number" class="form-control" value="<?= $value->oct ?>" id="oct<?= $value->id ?>" <?php if($currmon >= "10"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="nov">
                                                <input type="number" class="form-control" value="<?= $value->nov ?>" id="nov<?= $value->id ?>" <?php if($currmon >= "11"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="dec">
                                                <input type="number" class="form-control" value="<?= $value->decem ?>" id="dec<?= $value->id ?>" <?php if($currmon >= "12"){ ?> readonly <?php }else{ echo $readonly;} ?>>
                                             </td>
                                             <td class="budg_total">
                                                <?= ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?>
                                             </td>
                                             <td class="showgraph" id="showgraph<?= $value->id ?>">
                                                <a href="<?php echo  url('monthly_projectionexp_chart')."/".$value->id ?>">
                                                   <div id="bar-chart<?= $value->id ?>" style="height: 20px; width: 100%"></div>
                                                </a>
                                                <script type="text/javascript">
                                                   $(function () {
                                                         "use strict";

                                                         //BAR CHART
                                                         var bar = new Morris.Bar({
                                                           element: 'bar-chart<?= $value->id ?>',
                                                           resize: true,
                                                           data: [
                                                             {y: '', a: <?= $value->jan ?>},
                                                             {y: '', a: <?= $value->feb ?>},
                                                             {y: '', a: <?= $value->mar ?>},
                                                             {y: '', a: <?= $value->apr ?>},
                                                             {y: '', a: <?= $value->may ?>},
                                                             {y: '', a: <?= $value->jun ?>},
                                                             {y: '', a: <?= $value->jul ?>},
                                                             {y: '', a: <?= $value->aug ?>},
                                                             {y: '', a: <?= $value->sep ?>},
                                                             {y: '', a: <?= $value->oct ?>},
                                                             {y: '', a: <?= $value->nov ?>},
                                                             {y: '', a: <?= $value->decem ?>}
                                                           ],
                                                           barColors: ['#da291c'],
                                                           xkey: 'y',
                                                           ykeys: ['a'],
                                                           labels: ['', ''],
                                                           hideHover: 'auto',
                                                           padding: 1,
                                                         });
                                                       });
                                                </script>
                                             </td>
                                          </tr>
                                          <?php
                                             }
                                             ?>
                                       </tbody>
                                       <?php if($revenue_count == 0){ $style = "style='display:none'"; }else{ $style = "style=''"; } ?>
                                       <tbody class="sectbody" <?= $style ?>>
                                          <tr class="odd gradeX">
                                             <!-- <td></td> -->
                                             <td style="text-align:left; color:#da291c; padding: 10px; font-weight: bold">Total</td>
                                             <td id="jantotal"><?= $jantotal ?></td>
                                             <td id="febtotal"><?= $febtotal ?></td>
                                             <td id="martotal"><?= $martotal ?></td>
                                             <td id="aprtotal"><?= $aprtotal ?></td>
                                             <td id="maytotal"><?= $maytotal ?></td>
                                             <td id="juntotal"><?= $juntotal ?></td>
                                             <td id="jultotal"><?= $jultotal ?></td>
                                             <td id="augtotal"><?= $augtotal ?></td>
                                             <td id="septotal"><?= $septotal ?></td>
                                             <td id="octtotal"><?= $octtotal ?></td>
                                             <td id="novtotal"><?= $novtotal ?></td>
                                             <td id="dectotal"><?= $dectotal ?></td>
                                             <td id="budget_total"><?= $monthtotal ?></td>
                                             <td class="chart_monthly">
                                                <a href="<?php echo  url('total_monthly_projectionexp_chart') ?>">
                                                   <div id="bar-chart_total" style="height: 20px; width: 100%"></div>
                                                </a>
                                                <script type="text/javascript">
                                                   $(function () {
                                                     "use strict";

                                                         //BAR CHART
                                                         var bar = new Morris.Bar({
                                                           element: 'bar-chart_total',
                                                           resize: true,
                                                           data: [
                                                             {y: '', a: <?= $jantotal ?>},
                                                             {y: '', a: <?= $febtotal ?>},
                                                             {y: '', a: <?= $martotal ?>},
                                                             {y: '', a: <?= $aprtotal ?>},
                                                             {y: '', a: <?= $maytotal ?>},
                                                             {y: '', a: <?= $juntotal ?>},
                                                             {y: '', a: <?= $jultotal ?>},
                                                             {y: '', a: <?= $augtotal ?>},
                                                             {y: '', a: <?= $septotal ?>},
                                                             {y: '', a: <?= $octtotal ?>},
                                                             {y: '', a: <?= $novtotal ?>},
                                                             {y: '', a: <?= $dectotal ?>}
                                                           ],
                                                           barColors: ['#da291c'],
                                                           xkey: 'y',
                                                           ykeys: ['a'],
                                                           labels: ['', ''],
                                                           hideHover: 'auto',
                                                           padding: 1,
                                                         });
                                                       });
                                                </script>
                                             </td>
                                          </tr>
                                          <tr class="odd gradeX">
                                             <!-- <td></td> -->
                                             <td></td>
                                             <td>
                                                <a id="jansave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "01"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="febsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "02"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="marsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "03"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="aprsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "04"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="maysave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "05"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="junsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "06"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="julsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "07"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="augsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "08"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="sepsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "09"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="octsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "10"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="novsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "11"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td>
                                                <a id="decsave" class="btn btn-info btn-xs savebtnmonth" style="width:60px;" <?php if($currmon >= "12"){ ?> disabled <?php }else{ echo $disabled; } ?>>Save</a><br>
                                                <!-- <a href="#" class="btn btn-info btn-xs" style="margin-top:5px;width:60px;">Edit</a> -->
                                             </td>
                                             <td></td>
                                             <td></td>
                                          </tr>
                                      <?php }
                                      else{?>
                                        <tr>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td>No data found</td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                        </tr>
                                        <?php } ?>
                                       </tbody>
                                    </table>
                                 </div>
        <?php
        $html=ob_get_clean();
        echo $html;
    }

    public function tab22_quaterly_year(Request $request){
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue_quaterly']=$revenue_quaterly = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->orderBy('id', 'desc')->get();
        if(count($data['revenue_quaterly']) > 0){
            $data['revenue_quaterly_count']=$revenue_quaterly_count = $data['revenue_quaterly'][0]->id;
        }else{
            $data['revenue_quaterly_count']=$revenue_quaterly_count = 0;
        }
        $data['janmartotal']=$janmartotal = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal']=$aprjuntotal = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal']=$julseptotal = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['quaterlytotal']=$quaterlytotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] =$chat= "on";
            }
            else{
                $data['chat'] =$chat= "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] =$tools= "on";
            }
            else{
                $data['tools'] =$tools= "off";
            }
        }
        ob_start();
        ?>
        <table class="table table-striped table-bordered table-hover" id="">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>Jan - Mar</th>
                                                    <th>Apr - Jun</th>
                                                    <th>Jul - Sep</th>
                                                    <th>Oct - Dec</th>
                                                    <th>Total</th>
                                                    <th>Graph</th>
                                                </tr>
                                                <tr>
                                                    <th class="">
                                                        <!-- <a href="javascript:void(0);" class="add_button2" title="Add field">
                                                            <span class="glyphicon glyphicon-plus" style="text-align: center; color: white; font-size: 20px; font-weight: bold"></span>
                                                        </a> -->
                                                    </th>
                                                    <th>Budget</th>
                                                    <th>Budget</th>
                                                    <th>Budget</th>
                                                    <th>Budget</th>
                                                    <th>Budget</th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody class="field_wrapper2">
                                                <?php
                                                    foreach ($revenue_quaterly as $value) {
                                                ?>
                                                        <tr class="odd gradeX quarterly" id="roww<?= $value->id ?>">
                                                            <!-- <td class=""></td> -->
                                                            <td class="budget_name">
                                                                <!-- <select class="form-control" required disabled>
                                                                    <option value="<?= $value->name ?>"><?= $value->name ?></option>
                                                                </select>
                                                                <p style="color: red; text-align: left; margin-bottom: 2px; display: none">*required</p> -->
                                                                <b style="padding: 0 10px" class="bname"><?= $value->name ?></b>
                                                            </td>
                                                            <td class="janmar">
                                                                <input type="number" class="form-control" value="<?= $value->janmar ?>" id="janmar<?= $value->id ?>" readonly>
                                                            </td>
                                                            <td class="aprjun">
                                                                <input type="number" class="form-control" value="<?= $value->aprjun ?>" id="aprjun<?= $value->id ?>" readonly>
                                                            </td>
                                                            <td class="julsep">
                                                                <input type="number" class="form-control" value="<?= $value->julsep ?>" id="julsep<?= $value->id ?>" readonly>
                                                            </td>
                                                            <td class="octdec">
                                                                <input type="number" class="form-control" value="<?= $value->octdec ?>" id="octdec<?= $value->id ?>" readonly>
                                                            </td>

                                                            <td class="budg_total2">
                                                                <?= ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?>
                                                            </td>
                                                            <td class="showgraphq" id="showgraphq<?= $value->id ?>">
                                                                <a href="<?= url('quarterly_projectionexp_chart')."/".$value->id ?>"><div id="bar-chartq<?= $value->id ?>" style="height: 20px; width: 30px"></div></a>
                                                                <script type="text/javascript">
                                                                  $(function () {
                                                                        "use strict";

                                                                        //BAR CHART
                                                                        var bar = new Morris.Bar({
                                                                          element: 'bar-chartq<?= $value->id ?>',
                                                                          resize: true,
                                                                          data: [
                                                                            {y: '', a: <?= $value->janmar ?>},
                                                                            {y: '', a: <?= $value->aprjun ?>},
                                                                            {y: '', a: <?= $value->julsep ?>},
                                                                            {y: '', a: <?= $value->octdec ?>}
                                                                          ],
                                                                          barColors: ['#da291c'],
                                                                          xkey: 'y',
                                                                          ykeys: ['a'],
                                                                          labels: ['', ''],
                                                                          hideHover: 'auto',
                                                                          padding: 1,
                                                                        });
                                                                      });
                                                                </script>
                                                            </td>
                                                        </tr>
                                                <?php
                                                    }
                                                ?>
                                            </tbody>
                                            <?php if($revenue_quaterly_count == 0){ $style2 = "style='display:none'"; }else{ $style2 = "style=''"; } ?>
                                            <tbody class="sectbody2" <?= $style2 ?>>
                                                <tr class="odd gradeX">

                                                    <!-- <td></td> -->
                                                    <td style="text-align:left; color:#da291c; padding: 10px; font-weight: bold">Total</td>
                                                    <td id="janmartotal"><?= $janmartotal ?></td>
                                                    <td id="aprjuntotal"><?= $aprjuntotal ?></td>
                                                    <td id="julseptotal"><?= $julseptotal ?></td>
                                                    <td id="octdectotal"><?= $octdectotal ?></td>
                                                    <td id="budget_total"><?= $quaterlytotal ?></td>

                                                    <td class="chart_quarterly">
                                                        <a href="<?=url('total_quarterly_projectionexp_chart')?>"><div id="bar-chart_totalq" style="height: 20px; width: 30px"></div></a>
                                                        <script type="text/javascript">
                                                          $(function () {
                                                                "use strict";

                                                                //BAR CHART
                                                                var bar = new Morris.Bar({
                                                                  element: 'bar-chart_totalq',
                                                                  resize: true,
                                                                  data: [
                                                                    {y: '', a: <?= $janmartotal ?>},
                                                                    {y: '', a: <?= $aprjuntotal ?>},
                                                                    {y: '', a: <?= $julseptotal ?>},
                                                                    {y: '', a: <?= $octdectotal ?>}
                                                                  ],
                                                                  barColors: ['#da291c'],
                                                                  xkey: 'y',
                                                                  ykeys: ['a'],
                                                                  labels: ['', ''],
                                                                  hideHover: 'auto',
                                                                  padding: 1,
                                                                });
                                                              });
                                                        </script>
                                                    </td>

                                                </tr>
                                                <!-- <tr class="odd gradeX">
                                                    <td></td>
                                                    <td>
                                                        <a id="janmarsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                                    </td>
                                                    <td>
                                                        <a id="aprjunsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                                    </td>
                                                    <td>
                                                        <a id="julsepsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                                    </td>
                                                    <td>
                                                        <a id="octdecsave" class="btn btn-info btn-xs savebtnquarter" style="width:60px;">Save</a><br>
                                                    </td>
                                                    <td></td>
                                                    <td></td>

                                                </tr> -->
                                            </tbody>
                                        </table>
        <?php
        $html=ob_get_clean();
        echo $html;
    }
    public function tab33()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jangrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['monthgrosstotal2'] = $data['jangrosstotal2'] + $data['febgrosstotal2'] + $data['margrosstotal2'] + $data['aprgrosstotal2'] + $data['maygrosstotal2'] + $data['jungrosstotal2'] + $data['julgrosstotal2'] + $data['auggrosstotal2'] + $data['sepgrosstotal2'] + $data['octgrosstotal2'] + $data['novgrosstotal2'] + $data['decgrosstotal2'];
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthgrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'] + $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'] + $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'] + $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['janothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['monthothrevenue'] = $data['janothrevenue'] + $data['febothrevenue'] + $data['marothrevenue'] + $data['aprothrevenue'] + $data['mayothrevenue'] + $data['junothrevenue'] + $data['julothrevenue'] + $data['augothrevenue'] + $data['sepothrevenue'] + $data['octothrevenue'] + $data['novothrevenue'] + $data['decothrevenue'];
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['monthotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'] + $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'] + $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'] + $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['expense'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal2'] = $data['jantotal2'] + $data['febtotal2'] + $data['martotal2'] + $data['aprtotal2'] + $data['maytotal2'] + $data['juntotal2'] + $data['jultotal2'] + $data['augtotal2'] + $data['septotal2'] + $data['octtotal2'] + $data['novtotal2'] + $data['dectotal2'];
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotal2actual'] = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'] + $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'] + $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'] + $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab33')->with($data);
    }


    public function tab33_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal']=$jantotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal']=$septotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal']=$octtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal']=$novtotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal']=$dectotal = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal']=$monthtotal = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jangrosstotal2']=$jangrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2']=$febgrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2']=$margrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2']=$aprgrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2']=$maygrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2']=$jungrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2']=$julgrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2']=$auggrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2']=$sepgrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2']=$octgrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2']=$novgrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2']=$decgrosstotal2 = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['monthgrosstotal2']=$monthgrosstotal2 = $data['jangrosstotal2'] + $data['febgrosstotal2'] + $data['margrosstotal2'] + $data['aprgrosstotal2'] + $data['maygrosstotal2'] + $data['jungrosstotal2'] + $data['julgrosstotal2'] + $data['auggrosstotal2'] + $data['sepgrosstotal2'] + $data['octgrosstotal2'] + $data['novgrosstotal2'] + $data['decgrosstotal2'];
        $data['jangrossactual']=$jangrossactual=$jangrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual']=$febgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual']=$margrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual']=$aprgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual']=$maygrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual']=$jungrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual']=$julgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual']=$auggrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual']=$sepgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual']=$octgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual']=$novgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual']=$decgrossactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthgrossactual']=$monthgrossactual = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'] + $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'] + $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'] + $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['jantotalactual'] =$jantotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] =$febtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] =$martotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] =$maytotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] =$juntotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] =$jultotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] =$augtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] =$septotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual']=$octtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual']=$novtotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual']=$dectotalactual = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('bill');
        $data['monthtotalactual']=$monthtotalactual = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['janothrevenue']=$janothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue']=$febothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue']=$marothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue']=$aprothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue'] =$mayothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue'] =$junothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue'] =$julothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue'] =$augothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue'] =$sepothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue'] =$octothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue'] =$novothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue'] =$decothrevenue = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('decem');
        $data['monthothrevenue']=$monthothrevenue = $data['janothrevenue'] + $data['febothrevenue'] + $data['marothrevenue'] + $data['aprothrevenue'] + $data['mayothrevenue'] + $data['junothrevenue'] + $data['julothrevenue'] + $data['augothrevenue'] + $data['sepothrevenue'] + $data['octothrevenue'] + $data['novothrevenue'] + $data['decothrevenue'];
        $data['janotherrevenue']=$janotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue']=$febotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue']=$marotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue']=$aprotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue']=$mayotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue']=$junotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue']=$julotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] =$augotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] =$sepotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] =$octotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] =$novotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] =$decotherrevenue= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['monthotherrevenue'] =$monthotherrevenue= $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'] + $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'] + $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'] + $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['expense'] =$expense= DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['jantotal2'] =$jantotal2= DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal2']=$febtotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal2']=$martotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal2']=$aprtotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal2']=$maytotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal2']=$juntotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal2']=$jultotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal2']=$augtotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal2']=$septotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal2']=$octtotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal2']=$novtotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal2']=$dectotal2 = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal2']=$monthtotal2 = $data['jantotal2'] + $data['febtotal2'] + $data['martotal2'] + $data['aprtotal2'] + $data['maytotal2'] + $data['juntotal2'] + $data['jultotal2'] + $data['augtotal2'] + $data['septotal2'] + $data['octtotal2'] + $data['novtotal2'] + $data['dectotal2'];
        $data['jantotal2actual']=$jantotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual']=$febtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual']=$martotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual']=$aprtotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual']=$maytotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual']=$juntotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual']=$jultotal2actual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] =$augtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] =$septotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] =$octtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] =$novtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] =$dectotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotal2actual'] =$monthtotal2actual= $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'] + $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'] + $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'] + $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['chat'] =$chat= "";
        $data['tools'] =$tools= "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat']=$chat = "off";
            }
            if($cdet->tools == "on"){
                $data['tools']=$tools = "on";
            }
            else{
                $data['tools']=$tools = "off";
            }
        }

        ob_start();
        ?>
        <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan</th>
                                                            <th colspan="3">Feb</th>
                                                            <th colspan="3">Mar</th>
                                                            <th colspan="3">Apr</th>
                                                            <th colspan="3">May</th>
                                                            <th colspan="3">Jun</th>
                                                            <th colspan="3">Jul</th>
                                                            <th colspan="3">Aug</th>
                                                            <th colspan="3">Sep</th>
                                                            <th colspan="3">Oct</th>
                                                            <th colspan="3">Nov</th>
                                                            <th colspan="3">Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Gross Revenue</td>
                                                            <td><?= $jangrosstotal2 ?></td>
                                                            <td><?= $jangrossactual ?></td>
                                                            <td><?= ($jangrosstotal2-$jangrossactual) ?></td>
                                                            <td><?= $febgrosstotal2 ?></td>
                                                            <td><?= $febgrossactual ?></td>
                                                            <td><?= ($febgrosstotal2-$febgrossactual) ?></td>
                                                            <td><?= $margrosstotal2 ?></td>
                                                            <td><?= $margrossactual ?></td>
                                                            <td><?= ($margrosstotal2-$margrossactual) ?></td>
                                                            <td><?= $aprgrosstotal2 ?></td>
                                                            <td><?= $aprgrossactual ?></td>
                                                            <td><?= ($aprgrosstotal2-$aprgrossactual) ?></td>
                                                            <td><?= $maygrosstotal2 ?></td>
                                                            <td><?= $maygrossactual ?></td>
                                                            <td><?= ($maygrosstotal2-$maygrossactual) ?></td>
                                                            <td><?= $jungrosstotal2 ?></td>
                                                            <td><?= $jungrossactual ?></td>
                                                            <td><?= ($jungrosstotal2-$jungrossactual) ?></td>
                                                            <td><?= $julgrosstotal2 ?></td>
                                                            <td><?= $julgrossactual ?></td>
                                                            <td><?= ($julgrosstotal2-$julgrossactual) ?></td>
                                                            <td><?= $auggrosstotal2 ?></td>
                                                            <td><?= $auggrossactual ?></td>
                                                            <td><?= ($auggrosstotal2-$auggrossactual) ?></td>
                                                            <td><?= $sepgrosstotal2 ?></td>
                                                            <td><?= $sepgrossactual ?></td>
                                                            <td><?= ($sepgrosstotal2-$sepgrossactual) ?></td>
                                                            <td><?= $octgrosstotal2 ?></td>
                                                            <td><?= $octgrossactual ?></td>
                                                            <td><?= ($octgrosstotal2-$octgrossactual) ?></td>
                                                            <td><?= $novgrosstotal2 ?></td>
                                                            <td><?= $novgrossactual ?></td>
                                                            <td><?= ($novgrosstotal2-$novgrossactual) ?></td>
                                                            <td><?= $decgrosstotal2 ?></td>
                                                            <td><?= $decgrossactual ?></td>
                                                            <td><?= ($decgrosstotal2-$decgrossactual) ?></td>
                                                            <td><?= $monthgrosstotal2 ?></td>
                                                            <td><?= $monthgrossactual ?></td>
                                                            <td><?= ($monthgrosstotal2-$monthgrossactual) ?></td>
                                                            <td>
                                                                <a href="<?=url('gross_revenue_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Other Revenue</td>
                                                            <td><?= $janothrevenue ?></td>
                                                            <td><?= $janotherrevenue ?></td>
                                                            <td><?= ($janothrevenue-$janotherrevenue) ?></td>
                                                            <td><?= $febothrevenue ?></td>
                                                            <td><?= $febotherrevenue ?></td>
                                                            <td><?= ($febothrevenue-$febotherrevenue) ?></td>
                                                            <td><?= $marothrevenue ?></td>
                                                            <td><?= $marotherrevenue ?></td>
                                                            <td><?= ($marothrevenue-$marotherrevenue) ?></td>
                                                            <td><?= $aprothrevenue ?></td>
                                                            <td><?= $aprotherrevenue ?></td>
                                                            <td><?= ($aprothrevenue-$aprotherrevenue) ?></td>
                                                            <td><?= $mayothrevenue ?></td>
                                                            <td><?= $mayotherrevenue ?></td>
                                                            <td><?= ($mayothrevenue-$mayotherrevenue) ?></td>
                                                            <td><?= $junothrevenue ?></td>
                                                            <td><?= $junotherrevenue ?></td>
                                                            <td><?= ($junothrevenue-$junotherrevenue) ?></td>
                                                            <td><?= $julothrevenue ?></td>
                                                            <td><?= $julotherrevenue ?></td>
                                                            <td><?= ($julothrevenue-$julotherrevenue) ?></td>
                                                            <td><?= $augothrevenue ?></td>
                                                            <td><?= $augotherrevenue ?></td>
                                                            <td><?= ($augothrevenue-$augotherrevenue) ?></td>
                                                            <td><?= $sepothrevenue ?></td>
                                                            <td><?= $sepotherrevenue ?></td>
                                                            <td><?= ($sepothrevenue-$sepotherrevenue) ?></td>
                                                            <td><?= $octothrevenue ?></td>
                                                            <td><?= $octotherrevenue ?></td>
                                                            <td><?= ($octothrevenue-$octotherrevenue) ?></td>
                                                            <td><?= $novothrevenue ?></td>
                                                            <td><?= $novotherrevenue ?></td>
                                                            <td><?= ($novothrevenue-$novotherrevenue) ?></td>
                                                            <td><?= $decothrevenue ?></td>
                                                            <td><?= $decotherrevenue ?></td>
                                                            <td><?= ($decothrevenue-$decotherrevenue) ?></td>
                                                            <td><?= $monthothrevenue ?></td>
                                                            <td><?= $monthotherrevenue ?></td>
                                                            <td><?= ($monthothrevenue-$monthotherrevenue) ?></td>
                                                            <td>
                                                                <a href="<?=url('other_revenue_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td><?= $jantotal ?></td>
                                                            <td><?= $jantotalactual ?></td>
                                                            <td><?= ($jantotal-$jantotalactual) ?></td>
                                                            <td><?= $febtotal ?></td>
                                                            <td><?= $febtotalactual ?></td>
                                                            <td><?= ($febtotal-$febtotalactual) ?></td>
                                                            <td><?= $martotal ?></td>
                                                            <td><?= $martotalactual ?></td>
                                                            <td><?= ($martotal-$martotalactual) ?></td>
                                                            <td><?= $aprtotal ?></td>
                                                            <td><?= $aprtotalactual ?></td>
                                                            <td><?= ($aprtotal-$aprtotalactual) ?></td>
                                                            <td><?= $maytotal ?></td>
                                                            <td><?= $maytotalactual ?></td>
                                                            <td><?= ($maytotal-$maytotalactual) ?></td>
                                                            <td><?= $juntotal ?></td>
                                                            <td><?= $juntotalactual ?></td>
                                                            <td><?= ($juntotal-$juntotalactual) ?></td>
                                                            <td><?= $jultotal ?></td>
                                                            <td><?= $jultotalactual ?></td>
                                                            <td><?= ($jultotal-$jultotalactual) ?></td>
                                                            <td><?= $augtotal ?></td>
                                                            <td><?= $augtotalactual ?></td>
                                                            <td><?= ($augtotal-$augtotalactual) ?></td>
                                                            <td><?= $septotal ?></td>
                                                            <td><?= $septotalactual ?></td>
                                                            <td><?= ($septotal-$septotalactual) ?></td>
                                                            <td><?= $octtotal ?></td>
                                                            <td><?= $octtotalactual ?></td>
                                                            <td><?= ($octtotal-$octtotalactual) ?></td>
                                                            <td><?= $novtotal ?></td>
                                                            <td><?= $novtotalactual ?></td>
                                                            <td><?= ($novtotal-$novtotalactual) ?></td>
                                                            <td><?= $dectotal ?></td>
                                                            <td><?= $dectotalactual ?></td>
                                                            <td><?= ($dectotal-$dectotalactual) ?></td>
                                                            <td><?= $monthtotal ?></td>
                                                            <td><?= $monthtotalactual ?></td>
                                                            <td><?= ($monthtotal-$monthtotalactual) ?></td>
                                                            <td>
                                                                <a href="<?=url('all_revenue_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->

                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($expense as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->jan ?></td>
                                                                <td><?php echo $actual_jan = HomeController::getjanactualexp($value->name); ?></td>
                                                                <td><?= ($value->jan - $actual_jan) ?></td>
                                                                <td><?= $value->feb ?></td>
                                                                <td><?php echo $actual_feb = HomeController::getfebactualexp($value->name); ?></td>
                                                                <td><?= ($value->feb - $actual_feb) ?></td>
                                                                <td><?= $value->mar ?></td>
                                                                <td><?php echo $actual_mar = HomeController::getmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->mar - $actual_mar) ?></td>
                                                                <td><?= $value->apr ?></td>
                                                                <td><?php echo $actual_apr = HomeController::getapractualexp($value->name); ?></td>
                                                                <td><?= ($value->apr - $actual_apr) ?></td>
                                                                <td><?= $value->may ?></td>
                                                                <td><?php echo $actual_may = HomeController::getmayactualexp($value->name); ?></td>
                                                                <td><?= ($value->may - $actual_may) ?></td>
                                                                <td><?= $value->jun ?></td>
                                                                <td><?php echo $actual_jun = HomeController::getjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->jun - $actual_jun) ?></td>
                                                                <td><?= $value->jul ?></td>
                                                                <td><?php echo $actual_jul = HomeController::getjulactualexp($value->name); ?></td>
                                                                <td><?= ($value->jul - $actual_jul) ?></td>
                                                                <td><?= $value->aug ?></td>
                                                                <td><?php echo $actual_aug = HomeController::getaugactualexp($value->name); ?></td>
                                                                <td><?= ($value->aug - $actual_aug) ?></td>
                                                                <td><?= $value->sep ?></td>
                                                                <td><?php echo $actual_sep = HomeController::getsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->sep - $actual_sep) ?></td>
                                                                <td><?= $value->oct ?></td>
                                                                <td><?php echo $actual_oct = HomeController::getoctactualexp($value->name); ?></td>
                                                                <td><?= ($value->oct - $actual_oct) ?></td>
                                                                <td><?= $value->nov ?></td>
                                                                <td><?php echo $actual_nov = HomeController::getnovactualexp($value->name); ?></td>
                                                                <td><?= ($value->nov - $actual_nov) ?></td>
                                                                <td><?= $value->decem ?></td>
                                                                <td><?php echo $actual_decem = HomeController::getdecemactualexp($value->name); ?></td>
                                                                <td><?= ($value->decem - $actual_decem) ?></td>
                                                                <td> <?= $tot = ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?></td>
                                                                <td><?php echo $actual_total2 = HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total2) ?></td>
                                                                <td>
                                                                    <a href="<?=url('expense_variance_monthly_graph2')."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total2-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $jantotal2 ?></td>
                                                            <td><?= $jantotal2actual ?></td>
                                                            <td><?= ($jantotal2-$jantotal2actual) ?></td>
                                                            <td><?= $febtotal2 ?></td>
                                                            <td><?= $febtotal2actual ?></td>
                                                            <td><?= ($febtotal2-$febtotal2actual) ?></td>
                                                            <td><?= $martotal2 ?></td>
                                                            <td><?= $martotal2actual ?></td>
                                                            <td><?= ($martotal2-$martotal2actual) ?></td>
                                                            <td><?= $aprtotal2 ?></td>
                                                            <td><?= $aprtotal2actual ?></td>
                                                            <td><?= ($aprtotal2-$aprtotal2actual) ?></td>
                                                            <td><?= $maytotal2 ?></td>
                                                            <td><?= $maytotal2actual ?></td>
                                                            <td><?= ($maytotal2-$maytotal2actual) ?></td>
                                                            <td><?= $juntotal2 ?></td>
                                                            <td><?= $juntotal2actual ?></td>
                                                            <td><?= ($juntotal2-$juntotal2actual) ?></td>
                                                            <td><?= $jultotal2 ?></td>
                                                            <td><?= $jultotal2actual ?></td>
                                                            <td><?= ($jultotal2-$jultotal2actual) ?></td>
                                                            <td><?= $augtotal2 ?></td>
                                                            <td><?= $augtotal2actual ?></td>
                                                            <td><?= ($augtotal2-$augtotal2actual) ?></td>
                                                            <td><?= $septotal2 ?></td>
                                                            <td><?= $septotal2actual ?></td>
                                                            <td><?= ($septotal2-$septotal2actual) ?></td>
                                                            <td><?= $octtotal2 ?></td>
                                                            <td><?= $octtotal2actual ?></td>
                                                            <td><?= ($octtotal2-$octtotal2actual) ?></td>
                                                            <td><?= $novtotal2 ?></td>
                                                            <td><?= $novtotal2actual ?></td>
                                                            <td><?= ($novtotal2-$novtotal2actual) ?></td>
                                                            <td><?= $dectotal2 ?></td>
                                                            <td><?= $dectotal2actual ?></td>
                                                            <td><?= ($dectotal2-$dectotal2actual) ?></td>
                                                            <td><?= $tott = ($jantotal2 + $febtotal2 + $martotal2 + $aprtotal2 + $maytotal2 + $juntotal2 + $jultotal2 + $augtotal2 + $septotal2 + $octtotal2 + $novtotal2 + $dectotal2) ?></td>
                                                            <td><?= $tott2 = ($jantotal2actual + $febtotal2actual + $martotal2actual + $aprtotal2actual + $maytotal2actual + $juntotal2actual + $jultotal2actual + $augtotal2actual + $septotal2actual + $octtotal2actual + $novtotal2actual + $dectotal2actual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?=url('projectionexp_monthly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>

                                                    <tbody></tbody>
                                                    <tfoot>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left;"><b>Estimated Profit & Loss</b></td>
                                                            <td><?= ($jantotal-$jantotal2) ?></td>
                                                            <td><?= ($jantotalactual-$jantotal2actual) ?></td>
                                                            <td><?= (($jantotal-$jantotal2)-($jantotalactual-$jantotal2actual)) ?></td>
                                                            <td><?= ($febtotal-$febtotal2) ?></td>
                                                            <td><?= ($febtotalactual-$febtotal2actual) ?></td>
                                                            <td><?= (($febtotal-$febtotal2)-($febtotalactual-$febtotal2actual)) ?></td>
                                                            <td><?= ($martotal-$martotal2) ?></td>
                                                            <td><?= ($martotalactual-$martotal2actual) ?></td>
                                                            <td><?= (($martotal-$martotal2)-($martotalactual-$martotal2actual)) ?></td>
                                                            <td><?= ($aprtotal-$aprtotal2) ?></td>
                                                            <td><?= ($aprtotalactual-$aprtotal2actual) ?></td>
                                                            <td><?= (($aprtotal-$aprtotal2)-($aprtotalactual-$aprtotal2actual)) ?></td>
                                                           <td><?= ($maytotal-$maytotal2) ?></td>
                                                            <td><?= ($maytotalactual-$maytotal2actual) ?></td>
                                                            <td><?= (($maytotal-$maytotal2)-($maytotalactual-$maytotal2actual)) ?></td>
                                                            <td><?= ($juntotal-$juntotal2) ?></td>
                                                            <td><?= ($juntotalactual-$juntotal2actual) ?></td>
                                                            <td><?= (($juntotal-$juntotal2)-($juntotalactual-$juntotal2actual)) ?></td>
                                                            <td><?= ($jultotal-$jultotal2) ?></td>
                                                            <td><?= ($jultotalactual-$jultotal2actual) ?></td>
                                                            <td><?= (($jultotal-$jultotal2)-($jultotalactual-$jultotal2actual)) ?></td>
                                                            <td><?= ($augtotal-$augtotal2) ?></td>
                                                            <td><?= ($augtotalactual-$augtotal2actual) ?></td>
                                                            <td><?= (($augtotal-$augtotal2)-($augtotalactual-$augtotal2actual)) ?></td>
                                                            <td><?= ($septotal-$septotal2) ?></td>
                                                            <td><?= ($septotalactual-$septotal2actual) ?></td>
                                                            <td><?= (($septotal-$septotal2)-($septotalactual-$septotal2actual)) ?></td>
                                                            <td><?= ($octtotal-$octtotal2) ?></td>
                                                            <td><?= ($octtotalactual-$octtotal2actual) ?></td>
                                                            <td><?= (($octtotal-$octtotal2)-($octtotalactual-$octtotal2actual)) ?></td>
                                                            <td><?= ($novtotal-$novtotal2) ?></td>
                                                            <td><?= ($novtotalactual-$novtotal2actual) ?></td>
                                                            <td><?= (($novtotal-$novtotal2)-($novtotalactual-$novtotal2actual)) ?></td>
                                                            <td><?= ($dectotal-$dectotal2) ?></td>
                                                            <td><?= ($dectotalactual-$dectotal2actual) ?></td>
                                                            <td><?= (($dectotal-$dectotal2)-($dectotalactual-$dectotal2actual)) ?></td>
                                                            <td><?= ($monthtotal-$tott) ?></td>
                                                            <td><?= ($monthtotalactual-$tott2) ?></td>
                                                            <td><?= (($monthtotal-$tott)-($monthtotalactual-$tott2)) ?></td>
                                                            <td>
                                                                <!-- <a href="#"><i class="fa fa-bar-chart"></i></a> -->
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                    </tfoot>
                                                </table>
                                            </div>
        <?php
        $html=ob_get_clean();
        echo $html;


    }


    public function tab44()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab44')->with($data);
    }

    public function tab44_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] =$status= DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] =$links= Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] =$top_videos= HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] =$aabanner= DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] =$top_banners= FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] =$slidetime= DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] =$revenue= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['jantotal'] =$jantotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal'] =$febtotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal'] =$martotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal'] =$aprtotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal'] =$maytotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal'] =$juntotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal'] =$jultotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal'] =$augtotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal'] =$septotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal'] =$octtotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal'] =$novtotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal'] =$dectotal= DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal'] =$monthtotal= $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] =$jantotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] =$febtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] =$martotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] =$maytotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] =$juntotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] =$jultotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] =$augtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] =$septotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] =$octtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] =$novtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] =$dectotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthtotalactual'] =$monthtotalactual= $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] =$chat= "";
        $data['tools'] =$tools= "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] =$chat= "on";
            }
            else{
                $data['chat'] =$chat= "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] =$tools= "on";
            }
            else{
                $data['tools'] =$tools= "off";
            }
        }

        ob_start();
        ?>
        <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan</th>
                                                            <th colspan="3">Feb</th>
                                                            <th colspan="3">Mar</th>
                                                            <th colspan="3">Apr</th>
                                                            <th colspan="3">May</th>
                                                            <th colspan="3">Jun</th>
                                                            <th colspan="3">Jul</th>
                                                            <th colspan="3">Aug</th>
                                                            <th colspan="3">Sep</th>
                                                            <th colspan="3">Oct</th>
                                                            <th colspan="3">Nov</th>
                                                            <th colspan="3">Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($revenue as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->jan ?></td>
                                                                <td><?php echo $actual_jan = HomeController::getjanactual($value->name); ?></td>
                                                                <td><?= ($value->jan - $actual_jan) ?></td>
                                                                <td><?= $value->feb ?></td>
                                                                <td><?php echo $actual_feb = HomeController::getfebactual($value->name); ?></td>
                                                                <td><?= ($value->feb - $actual_feb) ?></td>
                                                                <td><?= $value->mar ?></td>
                                                                <td><?php echo $actual_mar = HomeController::getmaractual($value->name); ?></td>
                                                                <td><?= ($value->mar - $actual_mar) ?></td>
                                                                <td><?= $value->apr ?></td>
                                                                <td><?php echo $actual_apr = HomeController::getapractual($value->name); ?></td>
                                                                <td><?= ($value->apr - $actual_apr) ?></td>
                                                                <td><?= $value->may ?></td>
                                                                <td><?php echo $actual_may = HomeController::getmayactual($value->name); ?></td>
                                                                <td><?= ($value->may - $actual_may) ?></td>
                                                                <td><?= $value->jun ?></td>
                                                                <td><?php echo $actual_jun = HomeController::getjunactual($value->name); ?></td>
                                                                <td><?= ($value->jun - $actual_jun) ?></td>
                                                                <td><?= $value->jul ?></td>
                                                                <td><?php echo $actual_jul = HomeController::getjulactual($value->name); ?></td>
                                                                <td><?= ($value->jul - $actual_jul) ?></td>
                                                                <td><?= $value->aug ?></td>
                                                                <td><?php echo $actual_aug = HomeController::getaugactual($value->name); ?></td>
                                                                <td><?= ($value->aug - $actual_aug) ?></td>
                                                                <td><?= $value->sep ?></td>
                                                                <td><?php echo $actual_sep = HomeController::getsepactual($value->name); ?></td>
                                                                <td><?= ($value->sep - $actual_sep) ?></td>
                                                                <td><?= $value->oct ?></td>
                                                                <td><?php echo $actual_oct = HomeController::getoctactual($value->name); ?></td>
                                                                <td><?= ($value->oct - $actual_oct) ?></td>
                                                                <td><?= $value->nov ?></td>
                                                                <td><?php echo $actual_nov = HomeController::getnovactual($value->name); ?></td>
                                                                <td><?= ($value->nov - $actual_nov) ?></td>
                                                                <td><?= $value->decem ?></td>
                                                                <td><?php echo $actual_decem = HomeController::getdecemactual($value->name); ?></td>
                                                                <td><?= ($value->decem - $actual_decem) ?></td>
                                                                <td> <?= $tot = ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?></td>
                                                                <td><?php echo $actual_total =HomeController::gettotalactual($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total) ?></td>
                                                                <td>
                                                                    <a href="<?=url('revenue_variance_monthly_graph2')."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td><?= $jantotal ?></td>
                                                            <td><?= $jantotalactual ?></td>
                                                            <td><?= ($jantotal-$jantotalactual) ?></td>
                                                            <td><?= $febtotal ?></td>
                                                            <td><?= $febtotalactual ?></td>
                                                            <td><?= ($febtotal-$febtotalactual) ?></td>
                                                            <td><?= $martotal ?></td>
                                                            <td><?= $martotalactual ?></td>
                                                            <td><?= ($martotal-$martotalactual) ?></td>
                                                            <td><?= $aprtotal ?></td>
                                                            <td><?= $aprtotalactual ?></td>
                                                            <td><?= ($aprtotal-$aprtotalactual) ?></td>
                                                            <td><?= $maytotal ?></td>
                                                            <td><?= $maytotalactual ?></td>
                                                            <td><?= ($maytotal-$maytotalactual) ?></td>
                                                            <td><?= $juntotal ?></td>
                                                            <td><?= $juntotalactual ?></td>
                                                            <td><?= ($juntotal-$juntotalactual) ?></td>
                                                            <td><?= $jultotal ?></td>
                                                            <td><?= $jultotalactual ?></td>
                                                            <td><?= ($jultotal-$jultotalactual) ?></td>
                                                            <td><?= $augtotal ?></td>
                                                            <td><?= $augtotalactual ?></td>
                                                            <td><?= ($augtotal-$augtotalactual) ?></td>
                                                            <td><?= $septotal ?></td>
                                                            <td><?= $septotalactual ?></td>
                                                            <td><?= ($septotal-$septotalactual) ?></td>
                                                            <td><?= $octtotal ?></td>
                                                            <td><?= $octtotalactual ?></td>
                                                            <td><?= ($octtotal-$octtotalactual) ?></td>
                                                            <td><?= $novtotal ?></td>
                                                            <td><?= $novtotalactual ?></td>
                                                            <td><?= ($novtotal-$novtotalactual) ?></td>
                                                            <td><?= $dectotal ?></td>
                                                            <td><?= $dectotalactual ?></td>
                                                            <td><?= ($dectotal-$dectotalactual) ?></td>
                                                            <td><?= $tott = ($jantotal + $febtotal + $martotal + $aprtotal + $maytotal + $juntotal + $jultotal + $augtotal + $septotal + $octtotal + $novtotal + $dectotal) ?></td>
                                                            <td><?= $tott2 = ($jantotalactual + $febtotalactual + $martotalactual + $aprtotalactual + $maytotalactual + $juntotalactual + $jultotalactual + $augtotalactual + $septotalactual + $octtotalactual + $novtotalactual + $dectotalactual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?=url('projection_monthly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                    </tbody>
                                                </table>
                                            </div>
        <?php
        $html=ob_get_clean();
        echo $html;
    }
    public function tab55()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab55')->with($data);
    }


    public function tab55_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status']=$status = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links']=$links = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos']=$top_videos = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner']=$aabanner = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners']=$top_banners = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime']=$slidetime = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue']=$revenue = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['jantotal']=$jantotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jan');
        $data['febtotal']=$febtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('feb');
        $data['martotal']=$martotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('mar');
        $data['aprtotal']=$aprtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('apr');
        $data['maytotal']=$maytotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('may');
        $data['juntotal']=$juntotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jun');
        $data['jultotal']=$jultotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('jul');
        $data['augtotal']=$augtotal = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aug');
        $data['septotal'] =$septotal= DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('sep');
        $data['octtotal'] =$octtotal= DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('oct');
        $data['novtotal'] =$novtotal= DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('nov');
        $data['dectotal'] =$dectotal= DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('decem');
        $data['monthtotal'] =$monthtotal= $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jantotalactual'] =$jantotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual'] =$febtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual'] =$martotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual']=$maytotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual']=$juntotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual'] =$jultotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual'] =$augtotalactual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual']=$septotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual']=$octtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual']=$novtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual']=$dectotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotalactual']=$monthtotalactual= $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat'] =$chat= "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] =$tools= "on";
            }
            else{
                $data['tools'] =$tools= "off";
            }
        }
        ob_start();
        ?>
        <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan</th>
                                                            <th colspan="3">Feb</th>
                                                            <th colspan="3">Mar</th>
                                                            <th colspan="3">Apr</th>
                                                            <th colspan="3">May</th>
                                                            <th colspan="3">Jun</th>
                                                            <th colspan="3">Jul</th>
                                                            <th colspan="3">Aug</th>
                                                            <th colspan="3">Sep</th>
                                                            <th colspan="3">Oct</th>
                                                            <th colspan="3">Nov</th>
                                                            <th colspan="3">Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Projected</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($revenue as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->jan ?></td>
                                                                <td><?php echo $actual_jan = HomeController::getjanactualexp($value->name); ?></td>
                                                                <td><?= ($value->jan - $actual_jan) ?></td>
                                                                <td><?= $value->feb ?></td>
                                                                <td><?php echo $actual_feb = HomeController::getfebactualexp($value->name); ?></td>
                                                                <td><?= ($value->feb - $actual_feb) ?></td>
                                                                <td><?= $value->mar ?></td>
                                                                <td><?php echo $actual_mar = HomeController::getmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->mar - $actual_mar) ?></td>
                                                                <td><?= $value->apr ?></td>
                                                                <td><?php echo $actual_apr = HomeController::getapractualexp($value->name); ?></td>
                                                                <td><?= ($value->apr - $actual_apr) ?></td>
                                                                <td><?= $value->may ?></td>
                                                                <td><?php echo $actual_may = HomeController::getmayactualexp($value->name); ?></td>
                                                                <td><?= ($value->may - $actual_may) ?></td>
                                                                <td><?= $value->jun ?></td>
                                                                <td><?php echo $actual_jun = HomeController::getjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->jun - $actual_jun) ?></td>
                                                                <td><?= $value->jul ?></td>
                                                                <td><?php echo $actual_jul = HomeController::getjulactualexp($value->name); ?></td>
                                                                <td><?= ($value->jul - $actual_jul) ?></td>
                                                                <td><?= $value->aug ?></td>
                                                                <td><?php echo $actual_aug = HomeController::getaugactualexp($value->name); ?></td>
                                                                <td><?= ($value->aug - $actual_aug) ?></td>
                                                                <td><?= $value->sep ?></td>
                                                                <td><?php echo $actual_sep = HomeController::getsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->sep - $actual_sep) ?></td>
                                                                <td><?= $value->oct ?></td>
                                                                <td><?php echo $actual_oct = HomeController::getoctactualexp($value->name); ?></td>
                                                                <td><?= ($value->oct - $actual_oct) ?></td>
                                                                <td><?= $value->nov ?></td>
                                                                <td><?php echo $actual_nov = HomeController::getnovactualexp($value->name); ?></td>
                                                                <td><?= ($value->nov - $actual_nov) ?></td>
                                                                <td><?= $value->decem ?></td>
                                                                <td><?php echo $actual_decem =HomeController::getdecemactualexp($value->name); ?></td>
                                                                <td><?= ($value->decem - $actual_decem) ?></td>
                                                                <td> <?= $tot = ($value->jan + $value->feb + $value->mar + $value->apr + $value->may + $value->jun + $value->jul + $value->aug + $value->sep + $value->oct + $value->nov + $value->decem) ?></td>
                                                                <td><?php echo $actual_total =HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total) ?></td>
                                                                <td>
                                                                    <a href="<?=url('expense_variance_monthly_graph2')."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $jantotal ?></td>
                                                            <td><?= $jantotalactual ?></td>
                                                            <td><?= ($jantotal-$jantotalactual) ?></td>
                                                            <td><?= $febtotal ?></td>
                                                            <td><?= $febtotalactual ?></td>
                                                            <td><?= ($febtotal-$febtotalactual) ?></td>
                                                            <td><?= $martotal ?></td>
                                                            <td><?= $martotalactual ?></td>
                                                            <td><?= ($martotal-$martotalactual) ?></td>
                                                            <td><?= $aprtotal ?></td>
                                                            <td><?= $aprtotalactual ?></td>
                                                            <td><?= ($aprtotal-$aprtotalactual) ?></td>
                                                            <td><?= $maytotal ?></td>
                                                            <td><?= $maytotalactual ?></td>
                                                            <td><?= ($maytotal-$maytotalactual) ?></td>
                                                            <td><?= $juntotal ?></td>
                                                            <td><?= $juntotalactual ?></td>
                                                            <td><?= ($juntotal-$juntotalactual) ?></td>
                                                            <td><?= $jultotal ?></td>
                                                            <td><?= $jultotalactual ?></td>
                                                            <td><?= ($jultotal-$jultotalactual) ?></td>
                                                            <td><?= $augtotal ?></td>
                                                            <td><?= $augtotalactual ?></td>
                                                            <td><?= ($augtotal-$augtotalactual) ?></td>
                                                            <td><?= $septotal ?></td>
                                                            <td><?= $septotalactual ?></td>
                                                            <td><?= ($septotal-$septotalactual) ?></td>
                                                            <td><?= $octtotal ?></td>
                                                            <td><?= $octtotalactual ?></td>
                                                            <td><?= ($octtotal-$octtotalactual) ?></td>
                                                            <td><?= $novtotal ?></td>
                                                            <td><?= $novtotalactual ?></td>
                                                            <td><?= ($novtotal-$novtotalactual) ?></td>
                                                            <td><?= $dectotal ?></td>
                                                            <td><?= $dectotalactual ?></td>
                                                            <td><?= ($dectotal-$dectotalactual) ?></td>
                                                            <td><?= $tott = ($jantotal + $febtotal + $martotal + $aprtotal + $maytotal + $juntotal + $jultotal + $augtotal + $septotal + $octtotal + $novtotal + $dectotal) ?></td>
                                                            <td><?= $tott2 = ($jantotalactual + $febtotalactual + $martotalactual + $aprtotalactual + $maytotalactual + $juntotalactual + $jultotalactual + $augtotalactual + $septotalactual + $octtotalactual + $novtotalactual + $dectotalactual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?=url('projectionexp_monthly_vary_chart') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
        <?php
        $html=ob_get_clean();
        echo $html;
    }
    public function profit_loss_stmt(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $month = Carbon::now()->format('m');
        $mon = "";
        if($month == "01"){$mon = "jan";}elseif($month == "02"){$mon = "feb";}elseif($month == "03"){$mon = "mar";}elseif($month == "04"){$mon = "apr";}elseif($month == "05"){$mon = "may";}elseif($month == "06"){$mon = "jun";}elseif($month == "07"){$mon = "jul";}elseif($month == "08"){$mon = "aug";}elseif($month == "09"){$mon = "sep";}elseif($month == "10"){$mon = "oct";}elseif($month == "11"){$mon = "nov";}elseif($month == "12"){$mon = "decem";}
        $year = Carbon::now()->format('Y');
        $textdt=$year."-".$month."-01";
        // $textdt = "2021-02-02";
        $dt= strtotime( $textdt);
        $currdt=$dt;
        $nextmonth=strtotime($textdt."+1 month");
        $i=0;
        $weeklycnt = [];
        $weeklycnt2 = [];
        $data['startdates'] = [];
        $data['enddates'] = [];
        do
        {
            $weekday= date("w",$currdt);
            $nextday=7-$weekday;
            $endday=abs($weekday-6);
            $startarr[$i]=$currdt;
            $endarr[$i]=strtotime(date("Y-m-d",$currdt)."+$endday day");
            $currdt=strtotime(date("Y-m-d",$endarr[$i])."+1 day");
            $end = "";
            if($endarr[$i] < $nextmonth){
                $end = $endarr[$i];
            }
            else{
                $end = strtotime(Carbon::now()->endOfMonth()->toDateString());
            }
            $countweek = DB::table('revenue_record')->whereDate('transaction_date', '>=', date("Y-m-d",$startarr[$i]))->whereDate('transaction_date', '<=', date("Y-m-d",$end))->where('uid', $uid)->where('account_description', '!=', 'Other Revenue')->sum('bill');
            $countweek2 = DB::table('revenue_record')->whereDate('transaction_date', '>=', date("Y-m-d",$startarr[$i]))->whereDate('transaction_date', '<=', date("Y-m-d",$end))->where('uid', $uid)->where('account_description', 'Other Revenue')->sum('bill');
            // print_r($countweek);
            array_push($data['startdates'], date('Y-m-d', $startarr[$i]));
            array_push($data['enddates'], date('Y-m-d', $end));
            array_push($weeklycnt, $countweek);
            array_push($weeklycnt2, $countweek2);
            $i++;
        }while($endarr[$i-1]<$nextmonth);
        $data['week1'] = $weeklycnt[0];
        $data['week2'] = $weeklycnt[1];
        $data['week3'] = $weeklycnt[2];
        $data['week4'] = $weeklycnt[3];
        $data['week5'] = $weeklycnt[4];
        //$data['week6'] = $weeklycnt[5];
        $data['week1s'] = $weeklycnt2[0];
        $data['week2s'] = $weeklycnt2[1];
        $data['week3s'] = $weeklycnt2[2];
        $data['week4s'] = $weeklycnt2[3];
        $data['week5s'] = $weeklycnt2[4];
      //  $data['week6s'] = $weeklycnt2[5];
        $data['weekcnt'] = $i;
        $data['revenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        $data['alljantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['allfebtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['allmartotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['allaprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['allmaytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['alljuntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['alljultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['allaugtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['allseptotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['allocttotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['allnovtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['alldectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['allmonthtotal'] = $data['alljantotal'] + $data['allfebtotal'] + $data['allmartotal'] + $data['allaprtotal'] + $data['allmaytotal'] + $data['alljuntotal'] + $data['alljultotal'] + $data['allaugtotal'] + $data['allseptotal'] + $data['allocttotal'] + $data['allnovtotal'] + $data['alldectotal'];
        $data['otherjantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('jan');
        $data['otherfebtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('feb');
        $data['othermartotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('mar');
        $data['otheraprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('apr');
        $data['othermaytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('may');
        $data['otherjuntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('jun');
        $data['otherjultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('jul');
        $data['otheraugtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('aug');
        $data['otherseptotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('sep');
        $data['otherocttotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('oct');
        $data['othernovtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('nov');
        $data['otherdectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('decem');
        $data['othermonthtotal'] = $data['otherjantotal'] + $data['otherfebtotal'] + $data['othermartotal'] + $data['otheraprtotal'] + $data['othermaytotal'] + $data['otherjuntotal'] + $data['otherjultotal'] + $data['otheraugtotal'] + $data['otherseptotal'] + $data['otherocttotal'] + $data['othernovtotal'] + $data['otherdectotal'];
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['revenue_quaterly'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['quaterlytotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['alljanmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','!=','Other Revenue')->sum('janmar');
        $data['allaprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','!=','Other Revenue')->sum('aprjun');
        $data['alljulseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','!=','Other Revenue')->sum('julsep');
        $data['alloctdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','!=','Other Revenue')->sum('octdec');
        $data['allquaterlytotal'] = $data['alljanmartotal'] + $data['allaprjuntotal'] + $data['alljulseptotal'] + $data['alloctdectotal'];
        $data['otherjanmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','Other Revenue')->sum('janmar');
        $data['otheraprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','Other Revenue')->sum('aprjun');
        $data['otherjulseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','Other Revenue')->sum('julsep');
        $data['otheroctdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name','Other Revenue')->sum('octdec');
        $data['otherquaterlytotal'] = $data['otherjanmartotal'] + $data['otheraprjuntotal'] + $data['otherjulseptotal'] + $data['otheroctdectotal'];
        $data['expenses'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        $data['jantotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotall'] = $data['jantotall'] + $data['febtotall'] + $data['martotall'] + $data['aprtotall'] + $data['maytotall'] + $data['juntotall'] + $data['jultotall'] + $data['augtotall'] + $data['septotall'] + $data['octtotall'] + $data['novtotall'] + $data['dectotall'];
        $data['expenses_quaterly'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        $data['janmartotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['quaterlytotall'] = $data['janmartotall'] + $data['aprjuntotall'] + $data['julseptotall'] + $data['octdectotall'];
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jangrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['monthgrosstotal2'] = $data['jangrosstotal2'] + $data['febgrosstotal2'] + $data['margrosstotal2'] + $data['aprgrosstotal2'] + $data['maygrosstotal2'] + $data['jungrosstotal2'] + $data['julgrosstotal2'] + $data['auggrosstotal2'] + $data['sepgrosstotal2'] + $data['octgrosstotal2'] + $data['novgrosstotal2'] + $data['decgrosstotal2'];
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthgrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'] + $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'] + $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'] + $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['janothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['monthothrevenue'] = $data['janothrevenue'] + $data['febothrevenue'] + $data['marothrevenue'] + $data['aprothrevenue'] + $data['mayothrevenue'] + $data['junothrevenue'] + $data['julothrevenue'] + $data['augothrevenue'] + $data['sepothrevenue'] + $data['octothrevenue'] + $data['novothrevenue'] + $data['decothrevenue'];
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['monthotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'] + $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'] + $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'] + $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['expense'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal2'] = $data['jantotal2'] + $data['febtotal2'] + $data['martotal2'] + $data['aprtotal2'] + $data['maytotal2'] + $data['juntotal2'] + $data['jultotal2'] + $data['augtotal2'] + $data['septotal2'] + $data['octtotal2'] + $data['novtotal2'] + $data['dectotal2'];
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotal2actual'] = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'] + $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'] + $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'] + $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['ejantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['efebtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['emartotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['eaprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['emaytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['ejuntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['ejultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['eaugtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['eseptotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['eocttotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['enovtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['edectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['emonthtotal'] = $data['ejantotal'] + $data['efebtotal'] + $data['emartotal'] + $data['eaprtotal'] + $data['emaytotal'] + $data['ejuntotal'] + $data['ejultotal'] + $data['eaugtotal'] + $data['eseptotal'] + $data['eocttotal'] + $data['enovtotal'] + $data['edectotal'];
        $data['ejangrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['efebgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['emargrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['eaprgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['emaygrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['ejungrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['ejulgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['eauggrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['esepgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['eoctgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['enovgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['edecgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['emonthgrosstotal2'] = $data['ejangrosstotal2'] + $data['efebgrosstotal2'] + $data['emargrosstotal2'] + $data['eaprgrosstotal2'] + $data['emaygrosstotal2'] + $data['ejungrosstotal2'] + $data['ejulgrosstotal2'] + $data['eauggrosstotal2'] + $data['esepgrosstotal2'] + $data['eoctgrosstotal2'] + $data['enovgrosstotal2'] + $data['edecgrosstotal2'];
        $data['ejangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['efebgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['emargrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['eaprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['emaygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['ejungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['ejulgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['eauggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['esepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['eoctgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['enovgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['edecgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['emonthgrossactual'] = $data['ejangrossactual'] + $data['efebgrossactual'] + $data['emargrossactual'] + $data['eaprgrossactual'] + $data['emaygrossactual'] + $data['ejungrossactual'] + $data['ejulgrossactual'] + $data['eauggrossactual'] + $data['esepgrossactual'] + $data['eoctgrossactual'] + $data['enovgrossactual'] + $data['edecgrossactual'];
        $data['ejantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['efebtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['emartotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['eaprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['emaytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['ejuntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['ejultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['eaugtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['eseptotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['eocttotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['enovtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['edectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['emonthtotalactual'] = $data['ejantotalactual'] + $data['efebtotalactual'] + $data['emartotalactual'] + $data['eaprtotalactual'] + $data['emaytotalactual'] + $data['ejuntotalactual'] + $data['ejultotalactual'] + $data['eaugtotalactual'] + $data['eseptotalactual'] + $data['eocttotalactual'] + $data['enovtotalactual'] + $data['edectotalactual'];
        $data['ejanothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['efebothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['emarothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['eaprothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['emayothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['ejunothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['ejulothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['eaugothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['esepothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['eoctothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['enovothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['edecothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['emonthothrevenue'] = $data['ejanothrevenue'] + $data['efebothrevenue'] + $data['emarothrevenue'] + $data['eaprothrevenue'] + $data['emayothrevenue'] + $data['ejunothrevenue'] + $data['ejulothrevenue'] + $data['eaugothrevenue'] + $data['esepothrevenue'] + $data['eoctothrevenue'] + $data['enovothrevenue'] + $data['edecothrevenue'];
        $data['ejanotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['efebotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['emarotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['eaprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['emayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['ejunotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['ejulotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['eaugotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['esepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['eoctotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['enovotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['edecotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['emonthotherrevenue'] = $data['ejanotherrevenue'] + $data['efebotherrevenue'] + $data['emarotherrevenue'] + $data['eaprotherrevenue'] + $data['emayotherrevenue'] + $data['ejunotherrevenue'] + $data['ejulotherrevenue'] + $data['eaugotherrevenue'] + $data['esepotherrevenue'] + $data['eoctotherrevenue'] + $data['enovotherrevenue'] + $data['edecotherrevenue'];
        $data['eexpense'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['ejantotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['efebtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['emartotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['eaprtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['emaytotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['ejuntotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['ejultotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['eaugtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['eseptotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['eocttotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['enovtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['edectotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['emonthtotal2'] = $data['ejantotal2'] + $data['efebtotal2'] + $data['emartotal2'] + $data['eaprtotal2'] + $data['emaytotal2'] + $data['ejuntotal2'] + $data['ejultotal2'] + $data['eaugtotal2'] + $data['eseptotal2'] + $data['eocttotal2'] + $data['enovtotal2'] + $data['edectotal2'];
        $data['ejantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['efebtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['emartotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['eaprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['emaytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['ejuntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['ejultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['eaugtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['eseptotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['eocttotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['enovtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['edectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['emonthtotal2actual'] = $data['ejantotal2actual'] + $data['efebtotal2actual'] + $data['emartotal2actual'] + $data['eaprtotal2actual'] + $data['emaytotal2actual'] + $data['ejuntotal2actual'] + $data['ejultotal2actual'] + $data['eaugtotal2actual'] + $data['eseptotal2actual'] + $data['eocttotal2actual'] + $data['enovtotal2actual'] + $data['edectotal2actual'];
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['janmargrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjungrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julsepgrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdecgrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['monthgrosstotal2'] = $data['janmargrosstotal2'] + $data['aprjungrosstotal2'] + $data['julsepgrosstotal2'] + $data['octdecgrosstotal2'];
         $data['janmargrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'];
        $data['aprjungrossactual'] = $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'];
        $data['julsepgrossactual'] = $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'];
        $data['octdecgrossactual'] = $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['monthgrossactual'] = $data['janmargrossactual'] + $data['aprjungrossactual'] + $data['julsepgrossactual'] + $data['octdecgrossactual'];
        $data['janmarothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('janmar');
        $data['aprjunothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aprjun');
        $data['julsepothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('julsep');
        $data['octdecothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('octdec');
        $data['monthothrevenue'] = $data['janmarothrevenue'] + $data['aprjunothrevenue'] + $data['julsepothrevenue'] + $data['octdecothrevenue'];
        $data['janmarotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'];
        $data['aprjunotherrevenue'] = $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'];
        $data['julsepotherrevenue'] = $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'];
        $data['octdecotherrevenue'] = $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['monthotherrevenue'] = $data['janmarotherrevenue'] + $data['aprjunotherrevenue'] + $data['julsepotherrevenue'] + $data['octdecotherrevenue'];
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['expensess'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal2'] = $data['janmartotal2'] + $data['aprjuntotal2'] + $data['julseptotal2'] + $data['octdectotal2'];
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotal2actual'] = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'];
        $data['aprjuntotal2actual'] = $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'];
        $data['julseptotal2actual'] = $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'];
        $data['octdectotal2actual'] = $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['monthtotal2actual'] = $data['janmartotal2actual'] + $data['aprjuntotal2actual'] + $data['julseptotal2actual'] + $data['octdectotal2actual'];
        $data['assets'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->groupBy('description')->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
         $data['revenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->orderBy('transaction_date', 'desc')->groupBy('account_description')->get();
       $data['expense_account'] = DB::table('expense_record')->where('account_description','!=','Sales Tax Paid')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->orderBy('transaction_date', 'desc')->groupBy('account_description')->get();
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('profit_loss_stmt')->with($data);
    }
     public function monthly_profit_loss_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['jantotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotall'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('monthly_profit_loss_chart')->with($data);
    }
    public function quarterly_profit_loss_chart()
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['janmartotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotall'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('quarterly_profit_loss_chart')->with($data);
    }
    public function revenue_report()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue_account'] = DB::table('revenue_account')->where('uid', $uid)->where('account_name', '!=', "Sales Tax Collected")->where('account_name', '!=', "Shipping Collected")->orderBy('id', 'desc')->get();
        $data['revenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->orderBy('transaction_date', 'desc')->groupBy('account_description')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('revenue_report')->with($data);
    }
    public function expenses_report()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['revenue'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->orderBy('id', 'desc')->get();
        $data['revenue'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->orderBy('transaction_date', 'desc')->groupBy('account_description')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('expenses_report')->with($data);
    }
    public function comparison_finance()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_finance')->with($data);
    }
    public function financial_tutorials()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['tutorials'] = FinanceTutorial::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('financial_tutorials')->with($data);
    }
    public function edit_archives()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('edit_archives')->with($data);
    }
    public function delete_archives()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('delete_archives')->with($data);
    }
    public function appointment_archives()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_archives')->with($data);
    }
    public function financial_archives()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal'] = $data['jantotal'] + $data['febtotal'] + $data['martotal'] + $data['aprtotal'] + $data['maytotal'] + $data['juntotal'] + $data['jultotal'] + $data['augtotal'] + $data['septotal'] + $data['octtotal'] + $data['novtotal'] + $data['dectotal'];
        $data['jangrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['margrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maygrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['jungrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['julgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['auggrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['sepgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['decgrosstotal2'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['monthgrosstotal2'] = $data['jangrosstotal2'] + $data['febgrosstotal2'] + $data['margrosstotal2'] + $data['aprgrosstotal2'] + $data['maygrosstotal2'] + $data['jungrosstotal2'] + $data['julgrosstotal2'] + $data['auggrosstotal2'] + $data['sepgrosstotal2'] + $data['octgrosstotal2'] + $data['novgrosstotal2'] + $data['decgrosstotal2'];
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['monthgrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'] + $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'] + $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'] + $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['monthtotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'] + $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'] + $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'] + $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['janothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['febothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['marothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['aprothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['mayothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['junothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['julothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['augothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['sepothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['octothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['novothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['decothrevenue'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['monthothrevenue'] = $data['janothrevenue'] + $data['febothrevenue'] + $data['marothrevenue'] + $data['aprothrevenue'] + $data['mayothrevenue'] + $data['junothrevenue'] + $data['julothrevenue'] + $data['augothrevenue'] + $data['sepothrevenue'] + $data['octothrevenue'] + $data['novothrevenue'] + $data['decothrevenue'];
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['monthotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'] + $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'] + $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'] + $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['expense'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['jantotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['febtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['martotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['aprtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['maytotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['juntotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['jultotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['augtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['septotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['octtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['novtotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['dectotal2'] = DB::table('expense_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['monthtotal2'] = $data['jantotal2'] + $data['febtotal2'] + $data['martotal2'] + $data['aprtotal2'] + $data['maytotal2'] + $data['juntotal2'] + $data['jultotal2'] + $data['augtotal2'] + $data['septotal2'] + $data['octtotal2'] + $data['novtotal2'] + $data['dectotal2'];
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['monthtotal2actual'] = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'] + $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'] + $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'] + $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['ejantotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['efebtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['emartotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['eaprtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['emaytotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['ejuntotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['ejultotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['eaugtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['eseptotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['eocttotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['enovtotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['edectotal'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['emonthtotal'] = $data['ejantotal'] + $data['efebtotal'] + $data['emartotal'] + $data['eaprtotal'] + $data['emaytotal'] + $data['ejuntotal'] + $data['ejultotal'] + $data['eaugtotal'] + $data['eseptotal'] + $data['eocttotal'] + $data['enovtotal'] + $data['edectotal'];
        $data['ejangrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['efebgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['emargrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['eaprgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['emaygrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['ejungrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['ejulgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['eauggrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['esepgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['eoctgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['enovgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['edecgrosstotal2'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['emonthgrosstotal2'] = $data['ejangrosstotal2'] + $data['efebgrosstotal2'] + $data['emargrosstotal2'] + $data['eaprgrosstotal2'] + $data['emaygrosstotal2'] + $data['ejungrosstotal2'] + $data['ejulgrosstotal2'] + $data['eauggrosstotal2'] + $data['esepgrosstotal2'] + $data['eoctgrosstotal2'] + $data['enovgrosstotal2'] + $data['edecgrosstotal2'];
        $data['ejangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['efebgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['emargrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['eaprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['emaygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['ejungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['ejulgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['eauggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['esepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['eoctgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['enovgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['edecgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['emonthgrossactual'] = $data['ejangrossactual'] + $data['efebgrossactual'] + $data['emargrossactual'] + $data['eaprgrossactual'] + $data['emaygrossactual'] + $data['ejungrossactual'] + $data['ejulgrossactual'] + $data['eauggrossactual'] + $data['esepgrossactual'] + $data['eoctgrossactual'] + $data['enovgrossactual'] + $data['edecgrossactual'];
        $data['ejantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['efebtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['emartotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['eaprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['emaytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['ejuntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['ejultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['eaugtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['eseptotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['eocttotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['enovtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['edectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['emonthtotalactual'] = $data['ejantotalactual'] + $data['efebtotalactual'] + $data['emartotalactual'] + $data['eaprtotalactual'] + $data['emaytotalactual'] + $data['ejuntotalactual'] + $data['ejultotalactual'] + $data['eaugtotalactual'] + $data['eseptotalactual'] + $data['eocttotalactual'] + $data['enovtotalactual'] + $data['edectotalactual'];
        $data['ejanothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jan');
        $data['efebothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('feb');
        $data['emarothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('mar');
        $data['eaprothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('apr');
        $data['emayothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('may');
        $data['ejunothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jun');
        $data['ejulothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('jul');
        $data['eaugothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aug');
        $data['esepothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('sep');
        $data['eoctothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('oct');
        $data['enovothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('nov');
        $data['edecothrevenue'] = DB::table('revenue_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('decem');
        $data['emonthothrevenue'] = $data['ejanothrevenue'] + $data['efebothrevenue'] + $data['emarothrevenue'] + $data['eaprothrevenue'] + $data['emayothrevenue'] + $data['ejunothrevenue'] + $data['ejulothrevenue'] + $data['eaugothrevenue'] + $data['esepothrevenue'] + $data['eoctothrevenue'] + $data['enovothrevenue'] + $data['edecothrevenue'];
        $data['ejanotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['efebotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['emarotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['eaprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['emayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['ejunotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['ejulotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['eaugotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['esepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['eoctotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['enovotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['edecotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['emonthotherrevenue'] = $data['ejanotherrevenue'] + $data['efebotherrevenue'] + $data['emarotherrevenue'] + $data['eaprotherrevenue'] + $data['emayotherrevenue'] + $data['ejunotherrevenue'] + $data['ejulotherrevenue'] + $data['eaugotherrevenue'] + $data['esepotherrevenue'] + $data['eoctotherrevenue'] + $data['enovotherrevenue'] + $data['edecotherrevenue'];
        $data['eexpense'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['ejantotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jan');
        $data['efebtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('feb');
        $data['emartotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('mar');
        $data['eaprtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('apr');
        $data['emaytotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('may');
        $data['ejuntotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jun');
        $data['ejultotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('jul');
        $data['eaugtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aug');
        $data['eseptotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('sep');
        $data['eocttotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('oct');
        $data['enovtotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('nov');
        $data['edectotal2'] = DB::table('expense_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('decem');
        $data['emonthtotal2'] = $data['ejantotal2'] + $data['efebtotal2'] + $data['emartotal2'] + $data['eaprtotal2'] + $data['emaytotal2'] + $data['ejuntotal2'] + $data['ejultotal2'] + $data['eaugtotal2'] + $data['eseptotal2'] + $data['eocttotal2'] + $data['enovtotal2'] + $data['edectotal2'];
        $data['ejantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['efebtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['emartotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['eaprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['emaytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['ejuntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['ejultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['eaugtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['eseptotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['eocttotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['enovtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['edectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['emonthtotal2actual'] = $data['ejantotal2actual'] + $data['efebtotal2actual'] + $data['emartotal2actual'] + $data['eaprtotal2actual'] + $data['emaytotal2actual'] + $data['ejuntotal2actual'] + $data['ejultotal2actual'] + $data['eaugtotal2actual'] + $data['eseptotal2actual'] + $data['eocttotal2actual'] + $data['enovtotal2actual'] + $data['edectotal2actual'];
        $data['assets'] = DB::table('asset_record')->where('uid', $uid)->whereYear('created_at', date('Y'))->groupBy('description')->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('financial_archives')->with($data);
    }
    public function client_archives()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('client_archives')->with($data);
    }
    public function email_archives()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['email_campaigns'] = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_email'] = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_card'] = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_video'] = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_sms'] = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('email_archives')->with($data);
    }
    public function comparisontab1()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->join('appointments', 'client_appointment_lists.id', 'appointments.appointment_id')->groupBy('appointments.appointment_id')->get();
        $data['changedappointments'] = DB::table('client_appointment_lists')->join('change_appointment', 'client_appointment_lists.id', 'change_appointment.appointment_id')->groupBy('change_appointment.appointment_id')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab1')->with($data);
    }
    public function comparisontab2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab2')->with($data);
    }
    public function comparisontab3()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['email_campaigns'] = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_email'] = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_card'] = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_video'] = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_sms'] = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab3')->with($data);
    }
    public function comparisontab4()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab4')->with($data);
    }
    public function archives_tutorials()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['tutorials'] = ArchiveTutorial::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('archives_tutorials')->with($data);
    }
    public function affiliate_registration($user_id="",$code="")
    {

        $data["user_id"]=isset($user_id)?base64_decode($user_id):'';
        $data["code"]=isset($code)?base64_decode($code):'';
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['religion'] = Religion::get();
        $data['business_category'] = BusinessCategory::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('affiliate_registration')->with($data);
    }
    public function emailavailability(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = $request->email;
        $cdata = User::where('email', $email)->get();
        if (count($cdata) > 0) {
            echo "success";
        }
        else{
            echo "fail";
        }
        // return $cdata;
    }
    public function codeavailability(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $code = $request->code;
        // echo $code; die();
        $cdata = Levels::where('code_name', $code)->get();
        if (count($cdata) > 0) {
            // $ip = $request->ip();
            // $ipInfo = file_get_contents('http://ip-api.com/json/' . $ip);
            // $ipInfo = json_decode($ipInfo);
            // $timezone = $ipInfo->timezone;
            // date_default_timezone_set($timezone);
            $now = date('Y-m-d');
            if ($now >= $cdata[0]->vstart_date && $now <= $cdata[0]->vend_date) {
                echo "exists";
            }
            else{
                if($now < $cdata[0]->vstart_date){
                    echo $cdata[0]->vstart_date;
                }
                else{
                    echo "expired";
                }
            }
        }
        else{
            echo "fail";
        }
    }
    public function addclient_appointment(Request $request)
    {

        // dd($request);
//print_r($request->all());die;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        else
        {
            $uid = "";
            if((Auth::user()->role) == "affiliate"){
                $uid = Auth::id();
            }
            else{
                $uid = Auth::user()->affiliate_user_id;
            }
        $users = User::where('email', $request->email)->get();
           if($users->count()>0)
           {
                //  return redirect()->back()->with('status',"Email already exist please try another email");
           }else{
             $full_address=$request->address.' '.$request->city.' '.$request->zip_code.' '.$request->state.' '.$request->country;
            //  dd($full_address);

            //  $loc=getLatLong($full_address) ?? "New York";
             $loc=getLatLong("New York");

            //  dd($loc);


             $latitute=$loc['latitute'];
             $longitude=$loc['longitude'];
             $destinationPath='';
             $fileNameToStore='';

          if($request->hasFile('image'))
            {
                $file = $request->file('image');
                $filenames = explode('.', $file->getClientOriginalName());
                $filename = $filenames[0];
                $extension = $file->getClientOriginalExtension();
                $fileNameToStore = $filename.'_'.time().'.'.$extension;
                $destinationPath = 'public/assets/images/client';
                $file->move($destinationPath,$fileNameToStore);;
                // if($file->move($destinationPath,$fileNameToStore))
                // {}
           }
                    $users = User::where('email', $request->email)->get();
                    $password = "";
                    if(count($users) > 0){
                        $user = User::where('email', $request->email)->update([
                                'name'          => $request->first_name." ".$request->last_name,
                                'role2'          => "client",
                                'show_pass'     => $users[0]->show_pass,
                                'latitute'     => $latitute,
                                'longitude'     => $longitude,
                                'status'        => 1
                        ]);
                        $password = $users[0]->password;
                        $show_pass=$users[0]->show_pass;
                    }
                    else{

                        $user = User::create([
                                'name'          => $request->first_name." ".$request->last_name,
                                'email'         => $request->email,
                                'password'      => Hash::make($request->password),
                                'role'          => "client",
                                'show_pass'     => $request->password,
                                'latitute'     => $latitute,
                                'longitude'     => $longitude,
                                'status'        => 1,
                        ]);
                        $show_pass=$request->password;
                        $password = Hash::make($request->password);
                    }
                    $ClientAppointmentList = ClientAppointmentList::create([
                        'first_name'            => $request->first_name,
                        'last_name'             => $request->last_name,
                        'password'              => $password,
                        'email'                 => $request->email,
                        'cell_phone'            => $request->cell_phone,
                        'work_phone'            => $request->work_phone,
                        'address'               => $request->address,
                        'zip_code'              => $request->zip_code,
                        'city'                  => $request->city,
                        'state'                 => $request->state,
                        'country'               => $request->country,
                        'company'               => $request->company,
                        'comment'               => $request->comment,
                        'dob'                   => date('m/d/Y',strtotime($request->dob)),
                        'religion'              => $request->religion,
                        'image'                 => $fileNameToStore,
                        'uid'                   => $uid
                    ]);

            $Contacts = Contacts::create([
                    'first_name'            => $request->first_name,
                    'last_name'             => $request->last_name,
                    'email'                 => $request->email,
                    'telephone'             => $request->cell_phone,
                    'folder'                => 9,
                    'image'                 => $fileNameToStore,
                    'uid'                   => $uid,
                    'status'                => 1,
                ]);
             $imgsrc=asset('public/assets/images/client/'.$fileNameToStore);
             $profile_photo='<img src="'.$imgsrc.'" style="width:100px;height:100px"  >';
             $admin_email=Setting::get_admin_email();
             $fullname=$request->first_name.' '.$request->last_name;
             $email=$request->email;
        $notification  = getNotificationMessage(15);
            $message = $notification;
        $subject = "Client Account Created";
        addUserActivity($subject,'add',$notification,$message);
             $link=url('/');
             $website_url="<a href='".$link."' target='_blank'>click here to login</a>";
             $temp=DB::table('client_registration_email_template')->where('id',1)->first();
             $email_message=$temp->email_body;
             $email_subject=$temp->email_subject;
             $email_message=str_replace('{fullname}',$fullname,$email_message);
             $email_message=str_replace('{profile_photo}',$profile_photo,$email_message);
             $email_message=str_replace('{email}',$email,$email_message);
             $email_message=str_replace('{password}',$show_pass,$email_message);
             $email_message=str_replace('{website_url}',$website_url,$email_message);
              $data2 = array(
                      'admin_email'       =>   $admin_email,
                      'template'          =>  'email_template',
                      'webtitle'          =>  'MAFAMA',
                      'subject'           =>  $email_subject,
                      'email_message'     =>  $email_message,
                  );
                Mail::to($email)->send(new SendMail($data2));
                    Session::flash('success', "Success!");
                    return redirect()->back()->with('status',"Inserted successfully");
             //   }
                // else {
                //     return redirect()->back()->with('status',"Something went wrong!!!");
                // }
           // }
           // abort(500, 'Could not upload image :(');
            }
        }
    }
    public function edit_clientf(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $id = $request->id;
        $data['client'] = ClientAppointmentList::where('id', $id)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('edit_clientf')->with($data);
    }
    public function view_clientf(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $id = $request->id;
        $data['client'] = ClientAppointmentList::where('id', $id)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('view_clientf')->with($data);
    }
    public function updateclient_appointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        if($request->hasFile('image'))
        {
            $file = $request->file('image');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/assets/images/client';
            if($file->move($destinationPath,$fileNameToStore))
            {
                $ClientAppointmentList = ClientAppointmentList::where('id', $request->id)->update([
                    'first_name'            => $request->first_name,
                    'last_name'             => $request->last_name,
                    'cell_phone'            => $request->cell_phone,
                    'work_phone'            => $request->work_phone,
                    'address'               => $request->address,
                    'zip_code'              => $request->zip_code,
                    'city'                  => $request->city,
                    'state'                 => $request->state,
                    'country'               => $request->country,
                    'company'               => $request->company,
                    'comment'               => $request->comment,
                    'dob'                   => date('m/d/Y',strtotime($request->dob)),
                    'image'                 => $fileNameToStore,
                    'uid'                   => $uid
                ]);
            }
            else{
                return redirect()->back()->with('status',"Something went wrong!!!");
            }
        }
        else{
            $ClientAppointmentList = ClientAppointmentList::where('id', $request->id)->update([
                'first_name'            => $request->first_name,
                'last_name'             => $request->last_name,
                'cell_phone'            => $request->cell_phone,
                'work_phone'            => $request->work_phone,
                'address'               => $request->address,
                'zip_code'              => $request->zip_code,
                'city'                  => $request->city,
                'state'                 => $request->state,
                'country'               => $request->country,
                'company'               => $request->company,
                'comment'               => $request->comment,
                'dob'                   => $request->dob,
                'uid'                   => $uid
            ]);
        }
        $client = ClientAppointmentList::where('id', $request->id)->first();
        $notification  = getNotificationMessage(16);
            $message = $notification;
        $subject = "Client Profile Updated";
        addUserActivity($subject,'update',$notification,$message);
        if(Auth::user()->role == "temp_user")
        {
            return redirect()->back()->with('status',"Updated Successfully");
        }
        return redirect('manage_clients')->with('status',"Updated Successfully");
    }
    public function delete_clientf(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $client = ClientAppointmentList::where('id', $request->id)->first();
         $notification  = getNotificationMessage(17);
            $message = $notification;
        $subject = "Client Deletion";
        addUserActivity($subject,'delete',$notification,$message);
        $ClientAppointmentList = ClientAppointmentList::where('id', $request->id)->delete();
        return redirect()->back();
    }
    public function send_card_submit(Request $request){
        $uid = "";
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }

        $total_email=Auth::user()->total_email;
        $total_email_count=Auth::user()->email_count;
        $mails = explode(',', $request->malto);
        $count=count($mails);
        if($total_email>=$total_email_count && $total_email>=$total_email_count+$count){
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $background = $request->bakg;
        $now = date('Y-m-d');
        $pathh = $request->img_path;
        $img = explode('public/images/', $request->img_path);
        $fileNameToStore = $img[1];
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $SendCard = SendCard::create([
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $fileNameToStore,
                'message'           => $message,
                'background'        => $background,
                'date'              => $now,
                'greeting'          => $request->greeting,
                'forecolorr'        => $request->forecolorr,
                'status'            => "sent",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid
            ]);
            $videoid = DB::getPdo()->lastInsertId();
        }
        $u=User::where('id', $uid)->update(['email_count'=> $total_email_count+$count]);
        // echo $videoid;
        $urll = url('/');
        $paath = $urll."/public/images/";
        $img_path = $paath.$fileNameToStore;
        // echo $img_path; die();
        foreach($mails as $malto){
            $userdet = DB::table('contacts')->where('email', $malto)->get();
            if(count($userdet) > 0){
                $username = $userdet[0]->first_name." ".$userdet[0]->last_name;
            }
            else{
                $username = "";
            }
            $emaildetails = array(
                'malto'         => $malto,
                'subject'       => $subject,
                'img_path'      => "",
                'bakg'          => $background,
                'greetings'     => $request->greeting,
                'username'      => $username,
                'forecolorr'    => $request->forecolorr,
                'campaign_name' => "",
                'body'          => $message,
                'user_banner'   => $user_banner->preview,
            );
            Mail::send('card_email_template', $emaildetails, function($message) use ($malto, $subject) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->from('support@mafama.com', Auth::user()->name);
            });
            User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
        }
         $notification  = getNotificationMessage(41);
            $message = $notification;
        $subject = "Email Card Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "success";
    }else{
        // return redirect()->back()->with('mess',"Email validity is expired.");
        echo "error";

    }
    }
    public function send_cards_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $background = $request->bakg;
        $now = date('Y-m-d', strtotime($request->sendon));
        $pathh = $request->img_path;
        $img = explode('public/images/', $request->img_path);
        $fileNameToStore = $img[1];
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $SendCard = SendCard::create([
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $fileNameToStore,
                'message'           => $message,
                'background'        => $background,
                'date'              => $now,
                'greeting'          => $request->greeting,
                'forecolorr'        => $request->forecolorr,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid
            ]);
            $videoid = DB::getPdo()->lastInsertId();
        }
        $notification  = getNotificationMessage(41);
            $message = $notification;
        $subject = "Email Card Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$now;
    }
    public function send_cards_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $background = $request->bakg;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        $pathh = $request->img_path;
        $img = explode('public/images/', $request->img_path);
        $fileNameToStore = $img[1];
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $SendCard = SendCard::create([
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $fileNameToStore,
                'message'           => $message,
                'background'        => $background,
                'date'              => $now,
                'greeting'          => $request->greeting,
                'forecolorr'        => $request->forecolorr,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'time'              => $time,
                'uid'               => $uid,
                'time_diff'         => $request->reminderdate,
                'times'             => $request->remindertimes,
            ]);
            $videoid = DB::getPdo()->lastInsertId();
        }
         $notification  = getNotificationMessage(41);
            $message = $notification;
        $subject = "Email Card Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$now." at ".$request->remindertime;
    }
    public function send_email_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";

        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }

        $total_email=Auth::user()->total_email;
        $total_email_count=Auth::user()->email_count;
        $mails = explode(',', $request->malto);
        $count=count($mails);
        if($total_email>=$total_email_count && $total_email>=$total_email_count+$count){
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $campaign_name = $request->campaign_name;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $videoid = '';
        $file = $request->file('img_path');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            // print_r($mails);die();
            foreach($mails as $malto){
                $SendEmail = SendEmail::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'campaign_name'     => $campaign_name,
                    'status'            => "sent",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
                $videoid = DB::getPdo()->lastInsertId();
            }
        }
        // echo $videoid;

        $u=User::where('id', $uid)->update(['email_count'=> $total_email_count+$count]);
        $urll = url('/');
        $paath = $urll."/public/videos/";
        $img_path = $paath.$fileNameToStore;
        // echo $img_path; die();
        foreach($mails as $malto){
            $emaildetails = array(
                'malto'         => $malto,
                'subject'       => $subject,
                'img_path'      => "",
                'bakg'          => $bakg,
                'greetings'     => "",
                'username'      => "",
                'forecolorr'    => "",
                'campaign_name' => $campaign_name,
                'body'          => $message,
                'user_banner'   => $user_banner->preview,
            );
            // print_r($emaildetails);die();
            Mail::send('card_email_template', $emaildetails, function($message) use ($malto, $subject, $img_path) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->attach($img_path);
                 $message->from('support@mafama.com', Auth::user()->name);
              });
              User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);

        }


        $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "success";
    }else{
        echo "error";
    }



    }
    public function send_email_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d', strtotime($request->sendon));
        $campaign_name = $request->campaign_name;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $videoid = '';
        $file = $request->file('img_path');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            // print_r($mails);die();
            foreach($mails as $malto){
                $SendEmail = SendEmail::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'campaign_name'     => $campaign_name,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
            }
       $notification  = getNotificationMessage(41);
            $message = $notification;
        $subject = "Email  Send";
        addUserActivity($subject,'add',$notification,$message);
            echo "Email will be sent on ".$now;
        }
    }
    public function send_email_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        // print_r($request->remindertime);die();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        $campaign_name = $request->campaign_name;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $videoid = '';
        $file = $request->file('img_path');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            // print_r($mails);die();
            foreach($mails as $malto){
                $SendEmail = SendEmail::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'campaign_name'     => $campaign_name,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'time'              => $time,
                    'uid'               => $uid,
                    'time_diff'         => $request->reminderdate,
                    'times'             => $request->remindertimes,
                ]);
            }
       $notification  = getNotificationMessage(41);
            $message = $notification;
        $subject = "Email Reminder Send";
        addUserActivity($subject,'add',$notification,$message);
            echo "Email will be sent on ".$now." at ".$request->remindertime;
        }
    }
    public function send_video_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }

        $total_email=Auth::user()->total_email;
        $total_email_count=Auth::user()->email_count;
        $mails = explode(',', $request->malto);
        $count=count($mails);

        if($total_email>=$total_email_count && $total_email>=$total_email_count+$count){
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $videoid = '';
        $file = $request->file('img_path');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            // print_r($mails);die();
            foreach($mails as $malto){
                $SendVideo = SendVideo::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "sent",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
                $videoid = DB::getPdo()->lastInsertId();
            }
        }
        $u=User::where('id', $uid)->update(['email_count'=> $total_email_count+$count]);
        // echo $videoid;
        $urll = url('/');
        $paath = $urll."/public/videos/";
        $img_path = $paath.$fileNameToStore;
        // echo $img_path; die();
        foreach($mails as $malto){
            $userdet = DB::table('contacts')->where('email', $malto)->get();
            if(count($userdet) > 0){
                $username = $userdet[0]->first_name." ".$userdet[0]->last_name;
            }
            else{
                $username = "";
            }
            $emaildetails = array(
                'malto'         => $malto,
                'subject'       => $subject,
                'img_path'      => "",
                'bakg'          => $bakg,
                'greetings'     => $request->greeting,
                'username'      => $username,
                'forecolorr'    => $request->forecolorr,
                'campaign_name' => "",
                'body'          => $message,
                'user_banner'       => $user_banner->preview,
            );
            // print_r($emaildetails);die();
            Mail::send('card_email_template', $emaildetails, function($message) use ($malto, $subject, $img_path) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->attach($img_path);
                 $message->from('support@mafama.com', Auth::user()->name);
              });
            User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
        }
         $notification  = getNotificationMessage(41);
            $message = $notification;
        $subject = "Email Video Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "success";
    }else{
        echo "error";
    }
    }
    public function send_video_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d', strtotime($request->sendon));
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $videoid = '';
        $file = $request->file('img_path');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            // print_r($mails);die();
            foreach($mails as $malto){
                $SendVideo = SendVideo::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
                $videoid = DB::getPdo()->lastInsertId();
            }
        }
       $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Email Video Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$now;
    }
    public function send_video_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $videoid = '';
        $file = $request->file('img_path');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            // print_r($mails);die();
            foreach($mails as $malto){
                $SendVideo = SendVideo::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'time'              => $time,
                    'uid'               => $uid,
                    'time_diff'         => $request->reminderdate,
                    'times'             => $request->remindertimes,
                ]);
                $videoid = DB::getPdo()->lastInsertId();
            }
        }
        $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Email Video Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$now." at ".$request->remindertime;
    }
    public function send_sms_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
             $uemail = Auth::user()->email;
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
             $uemail = Auth::user()->affiliate_user_email;
             }
        $phones = explode(',', $request->malto);
         $total_sms=Auth::user()->total_sms;
        $total_sms_count=Auth::user()->sms_count;
        $count = count($phones);
        //$subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $fileNameToStore = "";
        if($total_sms>=$total_sms_count && $total_sms>=$total_sms_count+$count){
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $videoid = '';
            $fileNameToStore = '';
            foreach($phones as $phone_no){
                $SendSms = SendSms::create([
                    'phone_no'             => $phone_no,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "sent",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
                try {
                    $account_sid = getenv("TWILIO_SID");
                    $auth_token = getenv("TWILIO_TOKEN");
                    $twilio_number = getenv("TWILIO_FROM");

                    $client = new Client($account_sid, $auth_token);
                    $client->messages->create("+91 ".$phone_no."", [
                        'from' => $twilio_number,
                        'body' => $message]);

                  //  dd('SMS Sent Successfully.');

                } catch (Exception $e) {
                   // dd("Error: ". $e->getMessage());
                }
                $videoid = DB::getPdo()->lastInsertId();
            }
            $u=User::where('id', $uid)->update(['sms_count'=> $total_sms_count+$count]);
/*
        foreach($mails as $malto){
            $username = "";
            $userdet = DB::table('contacts')->where('email', $malto)->get();
            if(count($userdet) > 0){
                $username = $userdet[0]->first_name." ".$userdet[0]->last_name;
            }
            $emaildetails = array(
                'malto'             => $malto,
                'subject'           => $subject,
                'bakg'              => $bakg,
                'campaign_name'     => "",
                'body'              => $message,
                'username'          => $username,
                'greetings'         => $request->greeting,
                'forecolorr'        => $request->forecolorr,
                'user_banner'       => $user_banner->preview
            );
            Mail::send('email_campaign_template', $emaildetails, function($message) use ($malto, $subject, $img_path) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->attach($img_path);
                 $message->from('support@mafama.com', Auth::user()->name);
              });
              User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
        }  */
       $notification  = getNotificationMessage(42);
        $message = $notification;
        $subject = "SMS Send";
        addUserActivity($subject,'add',$notification,$message);
         echo "success";
    }else{
        echo "error";
    }
    }
    public function send_sms_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d', strtotime($request->sendon));
        $fileNameToStore = "";
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        // $script = explode('public/images/', $request->script_path);
        // $script_img = $script[1];
            $fileNameToStore ='';
            foreach($mails as $malto){
                $SendSms = SendSms::create([
                    'phone_no'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
                $videoid = DB::getPdo()->lastInsertId();
            try {
                    $account_sid = getenv("TWILIO_SID");
                    $auth_token = getenv("TWILIO_TOKEN");
                    $twilio_number = getenv("TWILIO_FROM");

                    $client = new Client($account_sid, $auth_token);
                    $client->messages->create("+91 ".$malto."", [
                        'from' => $twilio_number,
                        'body' => $message]);

                  //  dd('SMS Sent Successfully.');

                } catch (Exception $e) {
                   // dd("Error: ". $e->getMessage());
                }
            }
        $notification  = getNotificationMessage(42);
        $message = $notification;
        $subject = "SMS SEND ";
        addUserActivity($subject,'add',$notification,$message);
        echo "SMS will be sent on ".$now;
    }
    public function send_sms_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        $fileNameToStore = "";
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        // $script = explode('public/images/', $request->script_path);
        // $script_img = $script[1];
            foreach($mails as $malto){
                $SendSms = SendSms::create([
                    'phone_no'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'time'              => $time,
                    'uid'               => $uid,
                    'time_diff'         => $request->reminderdate,
                    'times'             => $request->remindertimes,
                ]);
                 try {
                    $account_sid = getenv("TWILIO_SID");
                    $auth_token = getenv("TWILIO_TOKEN");
                    $twilio_number = getenv("TWILIO_FROM");

                    $client = new Client($account_sid, $auth_token);
                    $client->messages->create("+91 ".$malto."", [
                        'from' => $twilio_number,
                        'body' => $message]);

                  //  dd('SMS Sent Successfully.');

                } catch (Exception $e) {
                   // dd("Error: ". $e->getMessage());
                }
                $videoid = DB::getPdo()->lastInsertId();
            // DB::table('email_campaigns')->where('id', $videoid)->update(['status' => 'sent']);
            }
        $notification  = getNotificationMessage(42);
        $message = $notification;
        $subject = "SMS SEND ";
        addUserActivity($subject,'add',$notification,$message);
        echo "SMS will be sent on ".$now." at ".$request->remindertime;
    }
    public function email_campaign_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $total_email=Auth::user()->total_email;
        $total_email_count=Auth::user()->email_count;
        $mails = explode(',', $request->malto);
        $count=count($mails);
        // echo $count;die;
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $fileNameToStore = "";
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        // $script = explode('public/images/', $request->script_path);
        // $script_img = $script[1];
        $videoid = '';
        if($total_email>=$total_email_count && $total_email>=$total_email_count+$count){
            if($request->hasFile('img_path'))
        {
            $file = $request->file('img_path');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/videos';
            // $script_category = $request->script_category;
            // $script_description = $request->script_description;
            if($file->move($destinationPath,$fileNameToStore))
            {
                // print_r($mails);die();
                foreach($mails as $malto){
                    $EmailCampaign = EmailCampaign::create([
                        'email'             => $malto,
                        'subject'           => $subject,
                        'image'             => $fileNameToStore,
                        'backhground'       => $bakg,
                        'message'           => $message,
                        'date'              => $now,
                        'greeting'          => $request->greeting,
                        'forecolorr'        => $request->forecolorr,
                        'status'            => "sent",
                        'user_banner'       => $user_banner->preview,
                        'uid'               => $uid
                    ]);
                    $videoid = DB::getPdo()->lastInsertId();
                // DB::table('email_campaigns')->where('id', $videoid)->update(['status' => 'sent']);
                }
            }
        }
        else{
            $fileNameToStore = $request->previmage;
            foreach($mails as $malto){
                $EmailCampaign = EmailCampaign::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "sent",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
                $videoid = DB::getPdo()->lastInsertId();
            // DB::table('email_campaigns')->where('id', $videoid)->update(['status' => 'sent']);
            }
        }
        // echo $videoid;
        $urll = url('/');
        $paath = $urll."/public/videos/";
        $img_path = $paath.$fileNameToStore;
        // echo $img_path; die();
        foreach($mails as $malto){
            $userdet = DB::table('contacts')->where('email', $malto)->get();
            if(count($userdet) > 0){
                $username = $userdet[0]->first_name." ".$userdet[0]->last_name;
            }
            else{
                $username = "";
            }
            $emaildetails = array(
                'malto'             => $malto,
                'subject'           => $subject,
                'bakg'              => $bakg,
                'campaign_name'     => "",
                'body'              => $message,
                'username'          => $username,
                'greetings'         => $request->greeting,
                'forecolorr'        => $request->forecolorr,
                'user_banner'       => $user_banner->preview,
                // 'script_category'   => $script_category,
                // 'script_img'        => $script_img,
                // 'script_description'=> $script_description,
            );
            // print_r($emaildetails);die();
            Mail::send('email_campaign_template', $emaildetails, function($message) use ($malto, $subject, $img_path) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->attach($img_path);
                 $message->from('support@mafama.com', Auth::user()->name);
              });
              User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
              $u=User::where('id', $uid)->update(['email_count'=> $total_email_count+$count]);
        }
         $notification  = getNotificationMessage(43);
        $message = $notification;
        $subject = "Email Campaign Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "success";
    }else{
        echo "error";
    }
    }
    public function email_campaign_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d', strtotime($request->sendon));
        $fileNameToStore = "";
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        // $script = explode('public/images/', $request->script_path);
        // $script_img = $script[1];
        if($request->hasFile('img_path'))
        {
            $file = $request->file('img_path');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/videos';
            // $script_category = $request->script_category;
            // $script_description = $request->script_description;
            if($file->move($destinationPath,$fileNameToStore))
            {
                // print_r($mails);die();
                foreach($mails as $malto){
                    $EmailCampaign = EmailCampaign::create([
                        'email'             => $malto,
                        'subject'           => $subject,
                        'image'             => $fileNameToStore,
                        'backhground'       => $bakg,
                        'message'           => $message,
                        'date'              => $now,
                        'greeting'          => $request->greeting,
                        'forecolorr'        => $request->forecolorr,
                        'status'            => "pending",
                        'user_banner'       => $user_banner->preview,
                        'uid'               => $uid
                    ]);
                    $videoid = DB::getPdo()->lastInsertId();
                // DB::table('email_campaigns')->where('id', $videoid)->update(['status' => 'sent']);
                }
            }
        }
        else{
            $fileNameToStore = $request->previmage;
            foreach($mails as $malto){
                $EmailCampaign = EmailCampaign::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'greeting'          => $request->greeting,
                    'forecolorr'        => $request->forecolorr,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid
                ]);
                $videoid = DB::getPdo()->lastInsertId();
            // DB::table('email_campaigns')->where('id', $videoid)->update(['status' => 'sent']);
            }
        }
         $notification  = getNotificationMessage(43);
        $message = $notification;
        $subject = "Email Campaign Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$now;
    }
    public function email_campaign_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        // echo $time1;
        // echo $time; die();
        $fileNameToStore = "";
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        // $script = explode('public/images/', $request->script_path);
        // $script_img = $script[1];
        if($request->hasFile('img_path'))
        {
            $file = $request->file('img_path');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/videos';
            // $script_category = $request->script_category;
            // $script_description = $request->script_description;
            if($file->move($destinationPath,$fileNameToStore))
            {
                // print_r($mails);die();
                foreach($mails as $malto){
                    $EmailCampaign = DB::table('email_campaigns')->insert([
                        'email'             => $malto,
                        'subject'           => $subject,
                        'image'             => $fileNameToStore,
                        'backhground'       => $bakg,
                        'message'           => $message,
                        'date'              => $now,
                        'greeting'          => $request->greeting,
                        'forecolorr'        => $request->forecolorr,
                        'status'            => "pending",
                        'user_banner'       => $user_banner->preview,
                        'time'              => $time,
                        'uid'               => $uid,
                        'time_diff'         => $request->reminderdate,
                        'times'             => $request->remindertimes,
                    ]);
                    // DB::table('reminder_email')->insert([
                    //     'email'             => $malto,
                    //     'subject'           => $subject,
                    //     'image'             => $fileNameToStore,
                    //     'backhground'       => $bakg,
                    //     'message'           => $message,
                    //     'date'              => $now,
                    //     'greeting'          => $request->greeting,
                    //     'forecolorr'        => $request->forecolorr,
                    //     'status'            => "pending",
                    //     'user_banner'       => $user_banner->preview,
                    //     'time'              => $time,
                    //     'uid'               => $uid,
                    //     'time_diff'         => $request->reminderdate,
                    //     'times'             => $request->remindertimes,
                    // ]);
                    $videoid = DB::getPdo()->lastInsertId();
                // DB::table('email_campaigns')->where('id', $videoid)->update(['status' => 'sent']);
                }
            }
        }
        else{
            $fileNameToStore = $request->previmage;
            foreach($mails as $malto){
                $EmailCampaign = DB::table('email_campaigns')->insert([
                        'email'             => $malto,
                        'subject'           => $subject,
                        'image'             => $fileNameToStore,
                        'backhground'       => $bakg,
                        'message'           => $message,
                        'date'              => $now,
                        'greeting'          => $request->greeting,
                        'forecolorr'        => $request->forecolorr,
                        'status'            => "pending",
                        'user_banner'       => $user_banner->preview,
                        'time'              => $time,
                        'uid'               => $uid,
                        'time_diff'         => $request->reminderdate,
                        'times'             => $request->remindertimes,
                    ]);
            // DB::table('email_campaigns')->where('id', $videoid)->update(['status' => 'sent']);
            }
        }
        $notification  = getNotificationMessage(43);
        $message = $notification;
        $subject = "Email Campaign Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent";
    }
    public function register_business(){
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        // $data['details'] = AffiliateRegistration::where('email', Auth::user()->email)->get();
        $data['religion'] = Religion::get();
        $data['category'] = BusinessCategory::orderBy('category','desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('register_business')->with($data);
    }
    public function registration_business(Request $request){
        if($request->hasFile('image'))
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        {
            $file = $request->file('image');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/images';
            if($file->move($destinationPath,$fileNameToStore))
            {
                $BusinessRegister = BusinessRegister::create([
                    'first_name'            => $request->first_name,
                    'last_name'             => $request->last_name,
                    'religion'              => $request->religion,
                    'email'                 => $request->email,
                    'password'              => Hash::make($request->password),
                    'cellphone'             => $request->cellphone,
                    'business_telephone'    => $request->business_telephone,
                    'business_category'     => $request->business_category,
                    'address'               => $request->address,
                    'zip_code'              => $request->zip_code,
                    'city'                  => $request->city,
                    'state'                 => $request->state,
                    'country'               => $request->country,
                    'image'                 => $fileNameToStore
                ]);
                Session::flash('success', "Success!");
        $notification  = getNotificationMessage(44);
        $message = $notification;
        $subject = "New Business Registered";
        addUserActivity($subject,'add',$notification,$message);
                return redirect()->back()->with('status',"Inserted successfully");
            }
            else {
                return redirect()->back()->with('status',"Something went wrong!!!");
            }
        }
    }
    public function businessemailavailability(Request $request){
        $email = $request->email;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $cdata = BusinessRegister::where('email', $email)->get();
        if (count($cdata) > 0) {
            echo "success";
        }
        else{
            echo "fail";
        }
    }
    public function manage_folders_entry(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $folders = Folders::create(['folder_name' => $request->folder_name, 'uid' => $uid]);
         $notification  = getNotificationMessage(18);
        $message = $notification;
        $subject = "New Folder Created";
        addUserActivity($subject,'add',$notification,$message);
        Session::flash('success', "Success!");
        return redirect()->back()->with('status',"Inserted successfully");
    }
    public static function appointment_get_month_count($months, $id)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_id', $id)->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function finance_get_month_count($months, $desc)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        $getcount = DB::table('asset_record')->where('description', $desc)->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->sum('price');
        return $getcount;
    }
    public static function finance_get_quarterly_count($months, $desc)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        $month_year1 = $current_year."-".str_pad(($months +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $current_year."-".str_pad(($months +2), 2, '0', STR_PAD_LEFT);
        $getcount = DB::table('asset_record')->where('description', $desc)->where('created_at', 'like', '%' . $month_year . '%')->orWhere('created_at', 'like', '%' . $month_year1 . '%')->orWhere('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->sum('price');
        return $getcount;
    }
    public static function change_appointment_get_count($id)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $getcount = DB::table('change_appointment')->where('appointment_id', $id)->where('uid', $uid)->count();
        return $getcount;
    }
    public static function cancel_appointment_get_count($id)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $getcount = DB::table('cancel_appointment')->where('appointment_id', $id)->where('uid', $uid)->count();
        return $getcount;
    }
    public static function appointment_get_count($id)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $getcount = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_id', $id)->where('uid', $uid)->count();
        return $getcount;
    }
    public static function new_appointment_get_month_count($months, $id)
    {
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        $users = DB::table('appointments')
             ->select(DB::raw('count(*) as user_count, email1'))
             ->where('email1', '<=', 1)
             ->where('appointment_id', $id)
             ->where('created_at', 'like', '%' . $month_year . '%')
             ->groupBy('email1')
             ->get();
            // print_r($users);die();
        $cntt = 0;
        foreach ($users as $value) {
            $cntt++;
        }
        return $cntt;        // // DB::enableQueryLog();
        // $getcount = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_id', $id)->where('created_at', 'like', '%' . $month_year . '%')->where('uid', Auth::id())->count();
        // // print_r(DB::getQueryLog());die();
        // return $getcount;
    }
    public static function changedappointments_get_month_count($months, $id)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = DB::table('change_appointment')->where('appointment_id', $id)->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function get_month_count($months, $email)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = EmailCampaign::where('email', $email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function email_get_month_count($months, $email)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendEmail::where('email', $email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function card_get_month_count($months, $email)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendCard::where('email', $email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function video_get_month_count($months, $email)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendVideo::where('email', $email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function sms_get_month_count($months, $email)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendSms::where('email', $email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function get_mail_count($months)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = EmailCampaign::where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function email_get_mail_count($months)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendEmail::where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function card_get_mail_count($months)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendCard::where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function video_get_mail_count($months)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendVideo::where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function sms_get_mail_count($months)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = SendSms::where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public function edit_manage_folders(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = $request->id;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['folder'] = Folders::where('id', $id)->get();
        // $data['folders'] = "";
        // if(Auth::user()->role == "affiliate_user"){
        //     $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        // }
        // else{
        //     $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        // }
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('edit_manage_folders')->with($data);
    }
    public function delete_manage_folders(Request $request){
        $id = $request->id;
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $folder = Folders::where('id', $request->id)->first();
        $notification  = getNotificationMessage(20);
        $message = $notification;
        $subject = "Folder Deletion";
        addUserActivity($subject,'delete',$notification,$message);
        $deleted = Folders::where('id', $id)->delete();
        return redirect('manage_folders');
    }
    public function view_manage_folders(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = $request->id;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['folder'] = Folders::where('id', $id)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('view_manage_folders')->with($data);
    }
    public function manage_contacts_entry(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $fileNameToStore="";
        // if($request->hasFile('image'))
        // {
        //     $file = $request->file('image');
        //     $filenames = explode('.', $file->getClientOriginalName());
        //     $filename = $filenames[0];
        //     $extension = $file->getClientOriginalExtension();
        //     $fileNameToStore = $filename.'_'.time().'.'.$extension;
        //     $destinationPath = 'public/assets/images/client';
        //     $file->move($destinationPath,$fileNameToStore;
        //     // if($file->move($destinationPath,$fileNameToStore))
        //     // { }
        // }
                $Contacts = Contacts::create([
                    'first_name'            => $request->first_name,
                    'last_name'             => $request->last_name,
                    'email'                 => $request->email,
                    'telephone'             => $request->telephone,
                    'folder'                => $request->folder,
                    'image'                 => $fileNameToStore,
                    'uid'                   => $uid,
                    'status'                => 1,
                ]);
         $notification  = getNotificationMessage(21);
        $message = $notification;
        $subject = "New Contact Created";
        addUserActivity($subject,'add',$notification,$message);
                Session::flash('success', "Success!");
                return redirect()->back()->with('status',"Inserted successfully");


    }
    public function edit_manage_contacts(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = $request->id;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['contacts'] = Contacts::where('id', $id)->get();
        // $data['folders'] = Folders::get();
        $data['folders'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket 1")->where('folder_name', '!=', "Basket 2")->orderBy('id', 'desc')->get();
        }
        else{
            $data['folders'] = Folders::where('uid', $uid)->orWhere('uid', "default")->where('folder_name', '!=', "Basket X")->orderBy('id', 'desc')->get();
        }
        //$data['folders'] = Folders::where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('edit_manage_contacts')->with($data);
    }
    public function manage_contacts_update(Request $request){
        // print_r($request->id);die();
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $contact = Contacts::where('id', $request->id)->first();
         $notification  = getNotificationMessage(22);
        $message = $notification;
        $subject = "Contact Details Updated";
       addUserActivity($subject,'update',$notification,$message);
        // if($request->hasFile('image'))
        // {
        //     $file = $request->file('image');
        //     $filenames = explode('.', $file->getClientOriginalName());
        //     $filename = $filenames[0];
        //     $extension = $file->getClientOriginalExtension();
        //     $fileNameToStore = $filename.'_'.time().'.'.$extension;
        //     $destinationPath = 'public/assets/images/client';
        //     if($file->move($destinationPath,$fileNameToStore))
        //     {
        //         $Contacts = Contacts::where('id', $request->id)->update([
        //             'first_name'            => $request->first_name,
        //             'last_name'             => $request->last_name,
        //             'email'                 => $request->email,
        //             'telephone'             => $request->telephone,
        //             'folder'                => $request->folder,
        //             'image'                 => $fileNameToStore,
        //             'uid'                   => $uid
        //         ]);
        //          $notification  = getNotificationMessage(22);
        // $message = $notification;
        // $subject = " Contact Updated";
        // addUserActivity($subject,'update',$notification,$message);
        //         Session::flash('success', "Success!");
        //         return redirect('manage_contacts')->with('status',"Updated successfully");
        //     }
        // }
        // else{ }
            $Contacts = Contacts::where('id', $request->id)->update([
                'first_name'            => $request->first_name,
                'last_name'             => $request->last_name,
                'email'                 => $request->email,
                'telephone'             => $request->telephone,
                'folder'                => $request->folder,
            ]);
               $notification  = getNotificationMessage(22);
        $message = $notification;
        $subject = " Contact Updated";
        addUserActivity($subject,'update',$notification,$message);
            return redirect('manage_contacts')->with('status',"Updated successfully");

    }
    public function delete_manage_contacts(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $contact = Contacts::where('id', $request->id)->first();
         $notification  = getNotificationMessage(23);
        $message = $notification;
        $subject = "Contact Deletion";
      addUserActivity($subject,'delete',$notification,$message);
        $deleted = Contacts::where('id', $request->id)->delete();
        return redirect('manage_contacts');
    }
    public function manage_folders_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $folder = Folders::where('id', $request->id)->first();
         $notification  = getNotificationMessage(19);
        $message = $notification;
        $subject = "Folder Update";
      addUserActivity($subject,'update',$notification,$message);
        $Folders = Folders::where('id', $request->id)->update([
                    'folder_name'   => $request->folder_name
                ]);
        Session::flash('success', "Success!");
        return redirect('manage_folders');
    }
    public static function get_imag($category)
    {
        $images = UploadCard::where('category', $category)->get();
        return $images;
    }
    public function edit_manage_emails(Request $request){
        $id = $request->id;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['contacts'] = Contacts::where('id', $id)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('edit_manage_emails')->with($data);
    }
    public function manage_emails_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $contact = Contacts::where('id', $request->id)->first();
         $notification  = getNotificationMessage(22);
        $message = $notification;
        $subject = "Contact Update";
        addUserActivity($subject,'update',$notification,$message);
        $Contacts = Contacts::where('id', $request->id)->update([
                    'first_name'            => $request->first_name,
                    'last_name'             => $request->last_name,
                    'email'                 => $request->email,
                ]);
                Session::flash('success', "Success!");
                return redirect('manage_emails');
    }
    public function delete_manage_emails(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $contact = Contacts::where('id', $request->id)->first();
          $notification  = getNotificationMessage(23);
        $message = $notification;
        $subject = "Contact Deletion";
       addUserActivity($subject,'delete',$notification,$message);
        $deleted = Contacts::where('id', $request->id)->delete();
        return redirect('manage_emails');
    }
    public function get_manage_emails(Request $request){
        $uid = "";
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $sustr = $request->sustr;
        $contacts = Contacts::where('first_name', 'like', '%' . $sustr . '%')->orWhere('last_name', 'like', '%' . $sustr . '%')->where('uid', $uid)->where('status', 1)->get();
        foreach ($contacts as $value) {
            echo '<tr>
                    <td>'.$value->first_name.' '.$value->last_name.'</td>
                    <td>'.$value->email.'</td>
                    <td>
                        <form action="'.url("edit_manage_emails").'" method="POST" id="" enctype="multipart/form-data" style="display: inline-flex;">
                        <input type="hidden" value="'.csrf_token().'" name="_token">
                            <input type="hidden" name="id" value="'.$value->id.'">
                            <input type="submit" class="btn btn-xs btn-success" value="Edit">
                        </form>
                        <form action="'.url("delete_manage_emails").'" method="POST" id="" enctype="multipart/form-data" style="display: inline-flex;">
                        <input type="hidden" value="'.csrf_token().'" name="_token">
                            <input type="hidden" name="id" value="'.$value->id.'">
                            <input type="submit" class="btn btn-xs btn-danger" value="Delete">
                        </form>
                    </td>
                    <td><input type="checkbox" class="checkboxes" value="1" /></td>
                </tr>"';
        }
    }
    public function folderwisecontact(Request $request){
        $uid = "";
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        // print_r($request->folder_arr);die();
        // $folder_arr = [];
        $folder_arr = explode(',', $request->folder_arr);
        $contactid = explode(',', $request->contactid);
        // print_r($folders);die();
        // $folder_arr = $request->folder_arr;
        $contacts = Contacts::whereIn('folder', $folder_arr)->where('uid', $uid)->where('status', 1)->get();
        // print_r($contacts);die();
        // print_r($contacts); die();
        foreach ($contacts as $valuee) {
            if(in_array($valuee->id, $contactid))
            {
                $check = 'checked="checked"';
            }
            else{
                $check = '';
            }
            echo '<div class="col-md-12 padding-0">
                    <label class="checkbox chk-sm">
                        <input type="checkbox" value="'.$valuee->id.'" class="contact_mail" '.$check.' />
                        <i></i> '.$valuee->first_name.' '.$valuee->last_name.'
                    </label>
                </div>';
        }
     /*   if(in_array(9, $folder_arr)){
            $clients = ClientAppointmentList::where('uid', $uid)->get();
            foreach ($clients as $value) {
                if(in_array($value->id, $contactid))
                {
                    $check = 'checked="checked"';
                }
                else{
                    $check = '';
                }
                echo '<div class="col-md-12 padding-0">
                        <label class="checkbox chk-sm">
                            <input type="checkbox" value="'.$value->id.'" class="contact_mail" '.$check.' />
                            <i></i> '.$value->first_name.' '.$value->last_name.'
                        </label>
                    </div>';
            }
        }*/
    }
    public function title_wise_email(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $emails = explode(',', $request->email);
        $contacts = Contacts::whereIn('email', $emails)->where('uid', $uid)->where('status', 1)->get();
        foreach ($contacts as $valuee) {
            echo '<div class="col-md-12 padding-0">
                    <label class="checkbox chk-sm">
                        <input type="checkbox" value="'.$valuee->id.'" class="contact_mail" />
                        <i></i> '.$valuee->first_name.' '.$valuee->last_name.'
                    </label>
                </div>';
        }
    }
    public function folderwisecontactids(Request $request){
        $uid = "";
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $contacts = Contacts::where('folder', $request->remfolder)->where('uid', $uid)->where('status', 1)->get();
        $conid = [];
        foreach ($contacts as $valuee) {
            array_push($conid, $valuee->id);
        }
        return $conid;
    }
    public function contactwisemail(Request $request){
        $id = $request->id;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = Contacts::where('id', $id)->get();
        echo $email[0]->email;
    }
    public function contactwisphone(Request $request){
        $id = $request->id;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = Contacts::where('id', $id)->get();
        echo $email[0]->telephone;
    }
    public function contactwisemailll(Request $request){
        $id = $request->id;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = Contacts::where('id', $id)->get();
        $arr = [$email[0]->email, $email[0]->first_name." ".$email[0]->last_name];
        return $arr;
    }
    public function contactwisemaild(Request $request){
        $id = $request->id;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = Contacts::where('id', $id)->get();
        $dmail = $email[0]->email;
        $mails = explode(',', $request->mails);
        $pos = array_search($dmail, $mails);
        unset($mails[$pos]);
        $mls = [];
        foreach ($mails as $value) {
            array_push($mls, $value);
        }
        // print_r($mails);
        // die();
        return $mls;
    }
     public function contactwisephoneId(Request $request){
        $id = $request->id;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = Contacts::where('id', $id)->get();
        $telephone = $email[0]->telephone;
        $telephones = explode(',', $request->telephones);
        $pos = array_search($telephone, $telephones);
        unset($telephones[$pos]);
        $mls = [];
        foreach ($telephones as $value) {
            array_push($mls, $value);
        }
        // print_r($mls);
        // die();
        return $mls;
    }
    public function checkboxesmail(Request $request){
        // $id = $request->id;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode(',', $request->mail_arr);
        $mail_arr = [];
        $ClientAppointmentList = ClientAppointmentList::whereIn('id', $id)->get();
        foreach ($ClientAppointmentList as $value) {
            array_push($mail_arr, $value->email);
        }
        return $mail_arr;
    }
    public function uncheckboxesmail(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = $request->id;
        $ClientAppointmentList = ClientAppointmentList::where('id', $id)->first();
        echo $email = $ClientAppointmentList->email;
    }
    public function uncheckedboxesmail(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = $request->id;
        $email = ClientAppointmentList::where('id', $id)->get();
        $dmail = $email[0]->email;
        $mails = explode(',', $request->mails);
        $pos = array_search($dmail, $mails);
        unset($mails[$pos]);
        $mls = [];
        foreach ($mails as $value) {
            array_push($mls, $value);
        }
        return $mls;
    }
    public function create_budget_monthly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        if($request->month == "dec"){
            $month = "decem";
        }
        else{
            $month = $request->month;
        }
        // echo (count($names));die();
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('revenue_budget')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('revenue_budget')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i], 'uid' => $uid);
                DB::table('revenue_budget')->insert($values);
            }
            $coun = DB::table('revenue_budget')->where('name', $names[$i])->first();
            $quarter1 = ($coun->jan) + ($coun->feb) + ($coun->mar);
            $quarter2 = ($coun->apr) + ($coun->may) + ($coun->jun);
            $quarter3 = ($coun->jul) + ($coun->aug) + ($coun->sep);
            $quarter4 = ($coun->oct) + ($coun->nov) + ($coun->decem);
            DB::table('revenue_quaterly_budget')->where('name', $names[$i])->update(['janmar' => $quarter1, 'aprjun' => $quarter2, 'julsep' => $quarter3, 'octdec' => $quarter4]);
        }
          $notification  = getNotificationMessage(45);
        $message = $notification;
        $subject = "Revenue Budget Created";
        addUserActivity($subject,'update',$notification,$message);
    }
    public function create_budget_quarterly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        // echo $names;
        // die();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $month = $request->month;
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('revenue_quaterly_budget')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('revenue_quaterly_budget')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i], 'uid' => $uid);
                DB::table('revenue_quaterly_budget')->insert($values);
            }
        }
          $notification  = getNotificationMessage(45);
        $message = $notification;
        $subject = "Revenue Quarterly Budget Created";
        addUserActivity($subject,'add',$notification,$message);
    }
    public function create_expense_monthly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        if($request->month == "dec"){
            $month = "decem";
        }
        else{
            $month = $request->month;
        }
         // print_r($names[0]);
         //die();
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('expense_budget')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('expense_budget')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i]);
                DB::table('expense_budget')->insert($values);
            }
            $coun = DB::table('expense_budget')->where('name', $names[$i])->first();
            $quarter1 = ($coun->jan) + ($coun->feb) + ($coun->mar);
            $quarter2 = ($coun->apr) + ($coun->may) + ($coun->jun);
            $quarter3 = ($coun->jul) + ($coun->aug) + ($coun->sep);
            $quarter4 = ($coun->oct) + ($coun->nov) + ($coun->decem);
            DB::table('expense_quaterly_budget')->where('name', $names[$i])->update(['janmar' => $quarter1, 'aprjun' => $quarter2, 'julsep' => $quarter3, 'octdec' => $quarter4]);
        }
         $notification  = getNotificationMessage(48);
        $message = $notification;
        $subject = "Expense Quarterly Budget Created";
        addUserActivity($subject,'add',$notification,$message);
    }
    public function create_expense_quarterly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        // echo $names;
        // die();
        $month = $request->month;
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('expense_quaterly_budget')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('expense_quaterly_budget')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i]);
                DB::table('expense_quaterly_budget')->insert($values);
            }
        }
        $notification  = getNotificationMessage(48);
        $message = $notification;
        $subject = "Expense Quarterly Budget Created";
        addUserActivity($subject,'add',$notification,$message);
    }
    public function create_projection_monthly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        if($request->month == "dec"){
            $month = "decem";
        }
        else{
            $month = $request->month;
        }
        // echo (count($names));die();
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('revenue_projection')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('revenue_projection')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i], 'uid' => $uid);
                DB::table('revenue_projection')->insert($values);
            }
            $coun = DB::table('revenue_projection')->where('name', $names[$i])->first();
            $quarter1 = ($coun->jan) + ($coun->feb) + ($coun->mar);
            $quarter2 = ($coun->apr) + ($coun->may) + ($coun->jun);
            $quarter3 = ($coun->jul) + ($coun->aug) + ($coun->sep);
            $quarter4 = ($coun->oct) + ($coun->nov) + ($coun->decem);
            DB::table('revenue_quaterly_projection')->where('name', $names[$i])->update(['janmar' => $quarter1, 'aprjun' => $quarter2, 'julsep' => $quarter3, 'octdec' => $quarter4]);
        }
         $notification  = getNotificationMessage(45);
        $message = $notification;
        $subject = "Revenue Quarterly Projection Created";
        addUserActivity($subject,'add',$notification,$message);
    }
    public function create_projection_quarterly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        // echo $names;
        // die();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $month = $request->month;
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('revenue_quaterly_projection')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('revenue_quaterly_projection')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i], 'uid' => $uid);
                DB::table('revenue_quaterly_projection')->insert($values);
            }
        }
        $notification  = getNotificationMessage(45);
        $message = $notification;
        $subject = "Revenue Quarterly Projection Created";
        addUserActivity($subject,'add',$notification,$message);
    }
    public function expense_projection_monthly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        if($request->month == "dec"){
            $month = "decem";
        }
        else{
            $month = $request->month;
        }
        // echo (count($names));die();
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('expense_projection')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('expense_projection')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i]);
                DB::table('expense_projection')->insert($values);
            }
            $coun = DB::table('expense_projection')->where('name', $names[$i])->first();
            $quarter1 = ($coun->jan) + ($coun->feb) + ($coun->mar);
            $quarter2 = ($coun->apr) + ($coun->may) + ($coun->jun);
            $quarter3 = ($coun->jul) + ($coun->aug) + ($coun->sep);
            $quarter4 = ($coun->oct) + ($coun->nov) + ($coun->decem);
            DB::table('expense_quaterly_projection')->where('name', $names[$i])->update(['janmar' => $quarter1, 'aprjun' => $quarter2, 'julsep' => $quarter3, 'octdec' => $quarter4]);
        }
         $notification  = getNotificationMessage(48);
        $message = $notification;
        $subject = "Expense  Projection Created";
        addUserActivity($subject,'add',$notification,$message);
    }
    public function expense_projection_quarterly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $names = explode(',', $request->names);
        $prices = explode(',', $request->prices);
        // echo $names;
        // die();
        $month = $request->month;
        for($i = 0; $i < count($names); $i++){
            // echo $names[$i];
            $namecnt = DB::table('expense_quaterly_projection')->where('name', $names[$i])->get();
            if(count($namecnt) > 0){
                $values = array($month => $prices[$i]);
                DB::table('expense_quaterly_projection')->where('name', $names[$i])->update($values);
            }
            else{
                $values = array('name' => $names[$i], $month => $prices[$i]);
                DB::table('expense_quaterly_projection')->insert($values);
            }
        }
          $notification  = getNotificationMessage(48);
        $message = $notification;
        $subject = "Expense Quaterly Projection Created";
        addUserActivity($subject,'add',$notification,$message);
    }

    public function emmail_prev_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $subject = $request->id;
        $det = DB::table('email_campaigns')->where('uid', $uid)->where('subject', $subject)->first();
        $details  = DB::table('email_campaigns')->where('uid', $uid)->where('subject', $subject)->where('created_at', $det->created_at)->orderBy('id', 'desc')->get();
        return $details;
    }
    public function sms_prev_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $subject = $request->id;
        $det = DB::table('send_sms')->where('uid', $uid)->where('subject', $subject)->first();
        $details  = DB::table('send_sms')->where('uid', $uid)->where('subject', $subject)->where('created_at', $det->created_at)->get();
        return $details;
    }
    public function banner_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());

        $preview = $request->preview;
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
       $cnt = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->get();
     if($cnt[0]->is_updated_banner==0){
          $is_updated_banner=1;
         }else{
           $is_updated_banner=2;
         }
        $values = array(
            'affiliate_email'   => $uemail,
            'preview'           => $preview,
            'background'        => $request->background,
            'message'           => $request->message,
            'fontcolor'         => $request->fontcolor,
            'img'               => $request->img,
            'business_name'     => $request->business_name,
            'address'           => $request->address,
            'phone_no'          => $request->phone_no,
            'web_address'       => $request->web_address,
            'is_updated_banner' =>$is_updated_banner
        );
        if(count($cnt) > 0){
            DB::table('affiliate_banner')->where('affiliate_email', $uemail)->update($values);
        }
        else{
            DB::table('affiliate_banner')->insert($values);
        }
         $notification  = getNotificationMessage(51);
        $message = $notification;
        $subject = "Affiliate Banner Updated";
        addUserActivity($subject,'update',$notification,$message);
        // return true;
    }
    public function image_up_banner(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        if($request->hasFile('img_path'))
        {
            $file = $request->file('img_path');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/videos';
            // $script_category = $request->script_category;
            // $script_description = $request->script_description;
            if($file->move($destinationPath,$fileNameToStore))
            {
                echo $fileNameToStore;
            }
        }
        else{
            $img = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
            $fileNameToStore = $img->img;
            echo $fileNameToStore;
        }
    }
    public function popup_mail(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $now = date('Y-m-d');
        foreach($mails as $malto){
            $values = array(
                'uid'               => Auth::id(),
                'email'             => $malto,
                'subject'           => $subject,
                'message'           => $message,
                'date'              => $now,
                'status'            => "sent",
            );
            DB::table('popup_mail')->insert($values);
            $banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
            $emaildetails = array(
                'malto'             => $malto,
                'subject'           => $subject,
                'body'              => $message,
                'banner'            => $banner->preview,
            );
            Mail::send('popup_mail_template', $emaildetails, function($message) use ($malto, $subject) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->from('support@mafama.com', Auth::user()->name);
              });
            User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
        }
         $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Popup Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email has been sent succesfully";
    }
    public function popup_mail_date(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $now = $request->sendon;
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'message'           => $message,
                'date'              => $now,
                'status'            => "pending",
            );
            DB::table('popup_mail')->insert($values);
        }
          $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Popup Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$now;
    }
    public function manage_client_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);

        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'background'       => $bakg,
                'message'           => $message,
                'date'              => $now,
                'status'            => "sent",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
                'created_at'        => date('Y-m-d')
            );
            DB::table('manage_client_email')->insert($values);
            $emaildetails = array(
                'malto'             => $malto,
                'subject'           => $subject,
                'bakg'              => $bakg,
                'campaign_name'     => "",
                'body'              => $message,
                'user_banner'       => $user_banner->preview,
            );
            Mail::send('manage_client_template', $emaildetails, function($message) use ($malto, $subject) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->from('support@mafama.com', Auth::user()->name);
              });
            User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
        }
        $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email has been sent succesfully";
    }
    public function manage_client_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = $request->sendon;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'background'       => $bakg,
                'message'           => $message,
                'date'              => $now,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
                'created_at'        => date('Y-m-d')
            );
            DB::table('manage_client_email')->insert($values);
        }
        $datee = date('d F Y', strtotime($now));
        $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$datee;
    }
    public function manage_client_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'background'        => $bakg,
                'message'           => $message,
                'date'              => $now,
                'time'              => $time,
                'status'            => "sent",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
                'created_at'        => date('Y-m-d')
            );
            DB::table('manage_client_email')->insert($values);
            $SendEmail = SendEmail::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => "",
                    'backhground'       => $bakg,
                    'message'           => $message,
                    'date'              => $now,
                    'campaign_name'     => "",
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'time'              => $time,
                    'uid'               => $uid,
                    'time_diff'         => $request->reminderdate,
                    'times'             => $request->remindertimes,
                ]);
        }
        $datee = date('d F Y', strtotime($now));
         $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent.";
    }
    public function manage_client_card_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        // print_r($mails); die();
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $image = $request->img;
        $now = date('Y-m-d');
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $image,
                'message'           => $message,
                'date'              => $now,
                'status'            => "sent",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
                'created_at'        => date('Y-m-d')
            );
            DB::table('manage_client_card_email')->insert($values);
            $emaildetails = array(
                'malto'             => $malto,
                'subject'           => $subject,
                'image'             => $image,
                'body'              => $message,
                'user_banner'       => $user_banner->preview,
            );
            Mail::send('manage_client_card_template', $emaildetails, function($message) use ($malto, $subject) {
                 $message->to($malto)
                 ->subject($subject);
                 $message->from('support@mafama.com', Auth::user()->name);
              });
            User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
        }
         $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client Card Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email has been sent succesfully";
    }
    public function manage_client_card_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $image = $request->img;
        $now = $request->sendon;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $image,
                'message'           => $message,
                'date'              => $now,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
                'created_at'        => date('Y-m-d')
            );
            DB::table('manage_client_card_email')->insert($values);
        }
        $datee = date('d F Y', strtotime($now));
        $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client Card Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent on ".$datee;
    }
    public function manage_client_card_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $image = $request->img;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $image,
                'message'           => $message,
                'date'              => $now,
                'time'              => $time,
                'status'            => "sent",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
                'created_at'        => date('Y-m-d')
            );
            DB::table('manage_client_card_email')->insert($values);
            $SendCard = SendCard::create([
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $image,
                'message'           => $message,
                'date'              => $now,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'time'              => $time,
                'uid'               => $uid,
                'time_diff'         => $request->reminderdate,
                'times'             => $request->remindertimes,
            ]);
        }
        $datee = date('d F Y', strtotime($now));
          $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client Card Email Send";
        addUserActivity($subject,'add',$notification,$message);
        echo "Email will be sent.";
    }
    public function manage_client_video_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        // print_r($mails); die();
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $now = date('Y-m-d');
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $file = $request->file('video');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            $urll = url('/');
            $paath = $urll."/public/videos/";
            $img_path = $paath.$fileNameToStore;
            foreach($mails as $malto){
                $values = array(
                    'email'             => $malto,
                    'subject'           => $subject,
                    'video'             => $fileNameToStore,
                    'message'           => $message,
                    'date'              => $now,
                    'status'            => "sent",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid,
                    'created_at'        => date('Y-m-d')
                );
                DB::table('manage_client_video_email')->insert($values);
                $emaildetails = array(
                    'malto'             => $malto,
                    'subject'           => $subject,
                    'body'              => $message,
                    'user_banner'       => $user_banner->preview,
                );
                Mail::send('manage_client_video_template', $emaildetails, function($message) use ($malto, $subject, $img_path) {
                     $message->to($malto)
                     ->subject($subject);
                     $message->attach($img_path);
                     $message->from('support@mafama.com', Auth::user()->name);
                  });
                User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
            }
        $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client  Email Send";
        addUserActivity($subject,'add',$notification,$message);
            echo "Email has been sent succesfully";
        }
        else{
            echo "Something went wrong!!!";
        }
    }
    public function manage_client_video_send_on(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $now = $request->sendon;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $file = $request->file('video');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            foreach($mails as $malto){
                $values = array(
                    'email'             => $malto,
                    'subject'           => $subject,
                    'video'             => $fileNameToStore,
                    'message'           => $message,
                    'date'              => $now,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid,
                    'created_at'        => date('Y-m-d')
                );
                DB::table('manage_client_video_email')->insert($values);
            }
            $datee = date('d F Y', strtotime($now));
         $notification  = getNotificationMessage(41);
        $message = $notification;
        $subject = "Client  Email Send";
        addUserActivity($subject,'add',$notification,$message);
            echo "Email will be sent on ".$datee;
        }
        else{
            echo "Something went wrong !!!";
        }
    }
    public function manage_client_video_send_with_reminder(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $image = $request->img;
        $now = date('Y-m-d');
        $time1 = date("H:i");
        $time = date("H:i", strtotime('+'.$request->reminderdate.' hours', strtotime($time1)));
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $file = $request->file('video');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        if($file->move($destinationPath,$fileNameToStore))
        {
            foreach($mails as $malto){
                $values = array(
                    'email'             => $malto,
                    'subject'           => $subject,
                    'video'             => $fileNameToStore,
                    'message'           => $message,
                    'date'              => $now,
                    'time'              => $time,
                    'status'            => "sent",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid,
                    'created_at'        => date('Y-m-d')
                );
                DB::table('manage_client_video_email')->insert($values);
                $SendVideo = SendVideo::create([
                    'email'             => $malto,
                    'subject'           => $subject,
                    'image'             => $fileNameToStore,
                    'backhground'       => "",
                    'message'           => $message,
                    'date'              => $now,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'time'              => $time,
                    'uid'               => $uid,
                    'time_diff'         => $request->reminderdate,
                    'times'             => $request->remindertimes,
                ]);
            }
            $datee = date('d F Y', strtotime($now));
            $notification  = getNotificationMessage(41);
            $message = $notification;
           $subject = "Client  Email Send";
           addUserActivity($subject,'add',$notification,$message);
            echo "Email will be sent.";
        }
        else{
            echo "Something went wrong !!!";
        }
    }
    public function user_banner_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
         $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
         echo $user_banner->preview;
    }
    public function schedule_birthday_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uemail = "";
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
            $uid = Auth::id();
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
            $uid = Auth::user()->affiliate_user_id;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $date = ClientAppointmentList::where('email', $malto)->first();
            $now = $date->dob;
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'background'        => $bakg,
                'message'           => $message,
                'date'              => $now,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
            );
            DB::table('schedule_birthday')->insert($values);
        }
         $notification  = getNotificationMessage(52);
        $message = $notification;
        $subject = "Birthday  Scheduled";
        addUserActivity($subject,'add',$notification,$message);
        echo "Birthday has been scheduled.";
    }
    public function schedule_birthday_card_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
            $uid = Auth::id();
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
            $uid = Auth::user()->affiliate_user_id;
        }
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $image = $request->img;
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $date = ClientAppointmentList::where('email', $malto)->first();
            $now = $date->dob;
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $image,
                'message'           => $message,
                'date'              => $now,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
            );
            DB::table('schedule_birthday_card')->insert($values);
        }
         $notification  = getNotificationMessage(52);
        $message = $notification;
        $subject="Birthday Scheduled";
        addUserActivity($subject,'add',$notification,$message);
        echo "Birthday has been schedulded.";
    }
    public function schedule_birthday_video_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
            $uid = Auth::id();
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
            $uid = Auth::user()->affiliate_user_id;
        }
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $file = $request->file('video');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        $url = url('/');
        $video = $url."/".$destinationPath."/".$fileNameToStore;
        if($file->move($destinationPath,$fileNameToStore))
        {
            foreach($mails as $malto){
                $date = ClientAppointmentList::where('email', $malto)->first();
                $now = $date->dob;
                $values = array(
                    'email'             => $malto,
                    'subject'           => $subject,
                    'video'             => $video,
                    'message'           => $message,
                    'date'              => $now,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid,
                );
                DB::table('schedule_birthday_video')->insert($values);
            }
            $notification  = getNotificationMessage(52);
        $message = $notification;
        $subject = "Birthday  Scheduled";
        addUserActivity($subject,'add',$notification,$message);
            echo "Birthday has been scheduled.";
        }
        else{
            echo "Something went wrong !!!";
        }
    }
    public function holiday_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $details = DB::table('holiday')->where('id', $request->id)->first();
        $day = $details->day;
        $month = date('F', strtotime($details->date));
        $year = date('Y');
        $name = $details->holiday;
        echo $day." ".$month.", ".$year." ".$name;
    }
    public function schedule_holiday_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $bakg = $request->bakg;
        $holiday_id = $request->holiday_id;
        $holiday_details = DB::table('holiday')->where('id', $holiday_id)->first();
        $holiday = $holiday_details->date;
        $uemail = "";
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
            $uid = Auth::id();
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
            $uid = Auth::user()->affiliate_user_id;
        }
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'background'        => $bakg,
                'message'           => $message,
                'holiday'           => $holiday,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
            );
            DB::table('schedule_holiday')->insert($values);
        }
         $notification  = getNotificationMessage(52);
        $message = $notification;
        $subject = "Birthday  Scheduled";
        addUserActivity($subject,'add',$notification,$message);
        echo "Birthday has been scheduled.";
    }
    public function schedule_holiday_card_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $image = $request->img;
        $holiday_id = $request->holiday_id;
        $holiday_details = DB::table('holiday')->where('id', $holiday_id)->first();
        $holiday = $holiday_details->date;
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
            $uid = Auth::id();
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
            $uid = Auth::user()->affiliate_user_id;
        }
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        foreach($mails as $malto){
            $values = array(
                'email'             => $malto,
                'subject'           => $subject,
                'image'             => $image,
                'message'           => $message,
                'holiday'           => $holiday,
                'status'            => "pending",
                'user_banner'       => $user_banner->preview,
                'uid'               => $uid,
            );
            DB::table('schedule_holiday_card')->insert($values);
        }
         $notification  = getNotificationMessage(52);
        $message = $notification;
        $subject = "Birthday  Scheduled";
        addUserActivity($subject,'add',$notification,$message);
        echo "Birthday has been scheduled.";
    }
    public function schedule_holiday_video_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $mails = explode(',', $request->malto);
        $subject = $request->subject;
        $submit_value = $request->submit_value;
        $message = $request->message;
        $holiday_id = $request->holiday_id;
        $holiday_details = DB::table('holiday')->where('id', $holiday_id)->first();
        $holiday = $holiday_details->date;
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
            $uid = Auth::id();
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
            $uid = Auth::user()->affiliate_user_id;
        }
        $user_banner = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $file = $request->file('video');
        $filenames = explode('.', $file->getClientOriginalName());
        $filename = $filenames[0];
        $extension = $file->getClientOriginalExtension();
        $fileNameToStore = $filename.'_'.time().'.'.$extension;
        $destinationPath = 'public/videos';
        $url = url('/');
        $video = $url."/".$destinationPath."/".$fileNameToStore;
        if($file->move($destinationPath,$fileNameToStore))
        {
            foreach($mails as $malto){
                $values = array(
                    'email'             => $malto,
                    'subject'           => $subject,
                    'video'             => $video,
                    'message'           => $message,
                    'holiday'           => $holiday,
                    'status'            => "pending",
                    'user_banner'       => $user_banner->preview,
                    'uid'               => $uid,
                );
                DB::table('schedule_holiday_video')->insert($values);
            }
            $notification  = getNotificationMessage(52);
        $message = $notification;
        $subject = "Birthday  Scheduled";
        addUserActivity($subject,'add',$notification,$message);
            echo "Birthday has been scheduled.";
        }
        else{
            echo "Something went wrong !!!";
        }
    }
    public function revenue_account_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $values2 = array(
            'name'      => $request->account_name,
            'jan'       => 0,
            'feb'       => 0,
            'mar'       => 0,
            'apr'       => 0,
            'may'       => 0,
            'jun'       => 0,
            'jul'       => 0,
            'aug'       => 0,
            'sep'       => 0,
            'oct'       => 0,
            'nov'       => 0,
            'decem'     => 0,
            'uid'       => $uid
        );
        DB::table('revenue_budget')->insert($values2);
        DB::table('revenue_projection')->insert($values2);
        $values3 = array(
            'name'          => $request->account_name,
            'janmar'        => 0,
            'aprjun'        => 0,
            'julsep'        => 0,
            'octdec'        => 0,
            'uid'           => $uid
        );
        DB::table('revenue_quaterly_budget')->insert($values3);
        DB::table('revenue_quaterly_projection')->insert($values3);
        $category = AffiliateRegistration::where('email', Auth::user()->email)->first();
        $values = array(
            'account_name'  => $request->account_name,
            'amount'        => $request->amount,
            'category'        => $category->business_category,
            'date'          => date('Y-m-d'),
            'uid'           => $uid
        );
        DB::table('revenue_account')->insert($values);
         $notification  = getNotificationMessage(12);
        $message = $notification;
        $subject = "Revenue  Account Created";
        addUserActivity($subject,'add',$notification,$message);
        // Session::flash('success', "Success!");
        // return redirect()->back()->with('status',"Inserted successfully");
    }
    public function edit_revenue_aacount(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode('edit', $request->id);
        $revenue = DB::table('revenue_account')->where('id', $id[1])->first();
        $arr = [];
        array_push($arr, $revenue->account_name, $revenue->amount);
        return $arr;
    }
    public function revenue_account_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode('edit', $request->id);
        $values = array(
            'account_name'      => $request->account_name,
            'amount'            => $request->amount,
            'edit_reason'       => $request->edit_reason,
            'edit_updated_at'   => date('Y-m-d')
        );
        $revenue = DB::table('revenue_account')->where('id', $id[1])->update($values);
        $notification  = getNotificationMessage(13);
        $message = $notification;
        $subject = "Revenue  Account Updated";
        addUserActivity($subject,'add',$notification,$message);
    }
    public function delete_revenue_aacount(Request $request)
    {
        //\LogActivity::addToLog('deleled account','delete',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $id = explode('delete', $request->id);
        // echo $request->delete_reason; die();
        $det = DB::table('revenue_account')->where('id', $id[1])->get();
        $values = array(
            'account_name'      => $det[0]->account_name,
            'amount'            => $det[0]->amount,
            'reason'            => $request->delete_reason,
            'deleted_date'      => date('Y-m-d')
        );
         $notification  = getNotificationMessage(14);
        $message = $notification;
        $subject = "Revenue  Account Delete";
        addUserActivity($subject,'add',$notification,$message);
        DB::table('deleted_revenue_account')->insert($values);
        DB::table('revenue_account')->where('id', $id[1])->delete();
        DB::table('revenue_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('revenue_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('revenue_quaterly_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('revenue_quaterly_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
    }
    public function delete_revenue_aacount_post(Request $request)
    {
        //\LogActivity::addToLog('deleled account','delete',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $det = DB::table('revenue_account')->where('id', $request->id)->get();
        $values = array(
            'account_name'      => $det[0]->account_name,
            'amount'            => $det[0]->amount,
            'reason'            => '',
            'deleted_date'      => date('Y-m-d')
        );
       $notification  = getNotificationMessage(14);
        $message = $notification;
        $subject = "Revenue  Account Delete";
        addUserActivity($subject,'add',$notification,$message);
        DB::table('deleted_revenue_account')->insert($values);
        DB::table('revenue_account')->where('id', $request->id)->delete();
        DB::table('revenue_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('revenue_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('revenue_quaterly_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('revenue_quaterly_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
    }
    public function expenses_account_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $values2 = array(
            'name'      => $request->account_name,
            'jan'       => 0,
            'feb'       => 0,
            'mar'       => 0,
            'apr'       => 0,
            'may'       => 0,
            'jun'       => 0,
            'jul'       => 0,
            'aug'       => 0,
            'sep'       => 0,
            'oct'       => 0,
            'nov'       => 0,
            'decem'     => 0,
            'uid'       => $uid
        );
        DB::table('expense_budget')->insert($values2);
        DB::table('expense_projection')->insert($values2);
        $values3 = array(
            'name'          => $request->account_name,
            'janmar'        => 0,
            'aprjun'        => 0,
            'julsep'        => 0,
            'octdec'        => 0,
            'uid'           => $uid
        );
        DB::table('expense_quaterly_budget')->insert($values3);
        DB::table('expense_quaterly_projection')->insert($values3);
         $category = AffiliateRegistration::where('email', Auth::user()->email)->first();
        $values = array(
            'account_name'  => $request->account_name,
            'amount'        => $request->amount,
            'category'        => $category->business_category,
            'date'          => date('Y-m-d'),
            'uid'           => $uid
        );
        DB::table('expenses_account')->insert($values);
        $notification  = getNotificationMessage(9);
        $message = $notification;
        $subject = "Expense  Account Created";
        addUserActivity($subject,'add',$notification,$message);
        Session::flash('success', "Success!");
        return redirect()->back()->with('status',"Inserted successfully");
    }
    public function edit_expenses_aacount(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode('edit', $request->id);
        $expenses = DB::table('expenses_account')->where('id', $id[1])->first();
        $arr = [];
        array_push($arr, $expenses->account_name, $expenses->amount);
        return $arr;
    }
    public function expenses_account_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode('edit', $request->id);
        $values = array(
            'account_name'      => $request->account_name,
            'amount'            => $request->amount,
            'edit_reason'       => $request->edit_reason,
            'edit_updated_at'   => date('Y-m-d')
        );
        $expenses = DB::table('expenses_account')->where('id', $id[1])->update($values);
          $notification  = getNotificationMessage(10);
        $message = $notification;
        $subject = "Expense  Account Updated";
        addUserActivity($subject,'update',$notification,$message);
    }
public function delete_balancesheet_settings_account_post(Request $request)
    {
        //\LogActivity::addToLog('account deleted','delete',Auth::user());
        $det = DB::table('balancesheet_account')->where('id', $request->id)->get();
       $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
          $notification  = getNotificationMessage(55);
        $message = $notification;
        $subject = "Balancesheet Deleted";
        addUserActivity($subject,'delete',$notification,$message);
        DB::table('balancesheet_account')->where(['account_name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
    }
    public function delete_expenses_aacount_post(Request $request)
    {
        //\LogActivity::addToLog('account deleted','delete',Auth::user());
        $det = DB::table('expenses_account')->where('id', $request->id)->get();
       $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $values = array(
            'account_name'      => $det[0]->account_name,
            'amount'            => $det[0]->amount,
            'reason'            => '',
            'deleted_date'      => date('Y-m-d')
        );
          $notification  = getNotificationMessage(11);
        $message = $notification;
        $subject = "Expense  Account Deleted";
        addUserActivity($subject,'delete',$notification,$message);
        DB::table('deleted_expenses_account')->insert($values);
        DB::table('expenses_account')->where('id', $request->id)->delete();
        DB::table('expense_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('expense_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('expense_quaterly_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('expense_quaterly_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
    }
    public function delete_expenses_aacount(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode('delete', $request->id);
        $det = DB::table('expenses_account')->where('id', $id[1])->get();
        $values = array(
            'account_name'      => $det[0]->account_name,
            'amount'            => $det[0]->amount,
            'reason'            => $request->delete_reason,
            'deleted_date'      => date('Y-m-d')
        );
        $notification  = getNotificationMessage(11);
        $message = $notification;
        $subject = "Expense  Account Deleted";
        addUserActivity($subject,'delete',$notification,$message);
        DB::table('deleted_expenses_account')->insert($values);
        DB::table('expenses_account')->where('id', $id[1])->delete();
        DB::table('expense_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('expense_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('expense_quaterly_budget')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
        DB::table('expense_quaterly_projection')->where(['name'=>$det[0]->account_name,'uid'=>$uid ])->delete();
    }
    public function create_budget_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $revenue = DB::table('revenue_budget')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($revenue as $value) {
            array_push($existrevenue, $value->name);
        }
        $revenue_account = DB::table('revenue_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($revenue_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function create_projection_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $revenue = DB::table('revenue_projection')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($revenue as $value) {
            array_push($existrevenue, $value->name);
        }
        $revenue_account = DB::table('revenue_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($revenue_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function create_quarterlybudget_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $revenue = DB::table('revenue_quaterly_budget')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($revenue as $value) {
            array_push($existrevenue, $value->name);
        }
        $revenue_account = DB::table('revenue_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($revenue_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function create_quarterlyprojection_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $revenue = DB::table('revenue_quaterly_projection')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($revenue as $value) {
            array_push($existrevenue, $value->name);
        }
        $revenue_account = DB::table('revenue_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($revenue_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function create_expenses_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $expenses = DB::table('expense_budget')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($expenses as $value) {
            array_push($existrevenue, $value->name);
        }
        $expenses_account = DB::table('expenses_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($expenses_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function create_projection_expenses_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $expenses = DB::table('expense_projection')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($expenses as $value) {
            array_push($existrevenue, $value->name);
        }
        $expenses_account = DB::table('expenses_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($expenses_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function create_quarterlyexpenses_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $expenses = DB::table('expense_quaterly_budget')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($expenses as $value) {
            array_push($existrevenue, $value->name);
        }
        $expenses_account = DB::table('expenses_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($expenses_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function create_projection_quarterlyexpenses_names(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $x = $request->x;
        $expenses = DB::table('expense_quaterly_projection')->orderBy('id', 'desc')->get();
        $existrevenue = [];
        foreach ($expenses as $value) {
            array_push($existrevenue, $value->name);
        }
        $expenses_account = DB::table('expenses_account')->whereNotIn('account_name', $existrevenue)->get();
        echo '<select class="form-control">';
        foreach($expenses_account as $value){
            echo '<option value="'.$value->account_name.'">'.$value->account_name.'</option>';
        }
        echo '</select>';
    }
    public function chart()
    {
        $details = DB::table('revenue_budget')->get();
        $users = User::where(DB::raw("(DATE_FORMAT(created_at,'%Y'))"),date('Y'))
                    ->get();
        // print_r($users);die();
        $chart = Charts::database($details, 'bar', 'highcharts')
                  ->elementLabel("Total Users")
                  ->dimensions(1000, 500)
                  ->responsive(false)
                  ->groupByMonth(date('Y'), true);
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('chart',compact('chart'));
    }
    public function getgraph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url("monthly_budget_chart")."/".$request->id."'><div id='bar-chart".$request->id."' style='height: 20px; width: 50px'></div></a>
                    <script type='text/javascript'>
                              $(function () {
                                    'use strict';
                                    var bar = new Morris.Bar({
                                      element: 'bar-chart".$request->id."',
                                      resize: true,
                                      data: [
                                        {y: '', a: ".$request->jan."},
                                        {y: '', a: ".$request->feb."},
                                        {y: '', a: ".$request->mar."},
                                        {y: '', a: ".$request->apr."},
                                        {y: '', a: ".$request->may."},
                                        {y: '', a: ".$request->jun."},
                                        {y: '', a: ".$request->jul."},
                                        {y: '', a: ".$request->aug."},
                                        {y: '', a: ".$request->sep."},
                                        {y: '', a: ".$request->oct."},
                                        {y: '', a: ".$request->nov."},
                                        {y: '', a: ".$request->dec."}
                                      ],
                                      barColors: ['#da291c'],
                                      xkey: 'y',
                                      ykeys: ['a'],
                                      labels: ['', ''],
                                      hideHover: 'auto',
                                      padding: 1,
                                    });
                                  });
                    </script>";
        $result2 = "<a href='".url("total_monthly_budget_chart")."'><div id='bar-chart_total' style='height: 20px; width: 50px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_total',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->jantotal."},
                                {y: '', a: ".$request->febtotal."},
                                {y: '', a: ".$request->martotal."},
                                {y: '', a: ".$request->aprtotal."},
                                {y: '', a: ".$request->maytotal."},
                                {y: '', a: ".$request->juntotal."},
                                {y: '', a: ".$request->jultotal."},
                                {y: '', a: ".$request->augtotal."},
                                {y: '', a: ".$request->septotal."},
                                {y: '', a: ".$request->octtotal."},
                                {y: '', a: ".$request->novtotal."},
                                {y: '', a: ".$request->dectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getgraphexp(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url("monthly_expense_chart")."/".$request->id."'><div id='bar-chart".$request->id."' style='height: 20px; width: 50px'></div></a>
            <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart".$request->id."',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->jan."},
                                {y: '', a: ".$request->feb."},
                                {y: '', a: ".$request->mar."},
                                {y: '', a: ".$request->apr."},
                                {y: '', a: ".$request->may."},
                                {y: '', a: ".$request->jun."},
                                {y: '', a: ".$request->jul."},
                                {y: '', a: ".$request->aug."},
                                {y: '', a: ".$request->sep."},
                                {y: '', a: ".$request->oct."},
                                {y: '', a: ".$request->nov."},
                                {y: '', a: ".$request->dec."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
            </script>";
        $result2 = "<a href='".url("total_monthly_expense_chart")."'><div id='bar-chart_total' style='height: 20px; width: 50px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_total',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->jantotal."},
                                {y: '', a: ".$request->febtotal."},
                                {y: '', a: ".$request->martotal."},
                                {y: '', a: ".$request->aprtotal."},
                                {y: '', a: ".$request->maytotal."},
                                {y: '', a: ".$request->juntotal."},
                                {y: '', a: ".$request->jultotal."},
                                {y: '', a: ".$request->augtotal."},
                                {y: '', a: ".$request->septotal."},
                                {y: '', a: ".$request->octtotal."},
                                {y: '', a: ".$request->novtotal."},
                                {y: '', a: ".$request->dectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getgraph2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url("monthly_projection_chart")."/".$request->id."'><div id='bar-chart".$request->id."' style='height: 20px; width: 50px'></div></a>
                    <script type='text/javascript'>
                              $(function () {
                                    'use strict';
                                    var bar = new Morris.Bar({
                                      element: 'bar-chart".$request->id."',
                                      resize: true,
                                      data: [
                                        {y: '', a: ".$request->jan."},
                                        {y: '', a: ".$request->feb."},
                                        {y: '', a: ".$request->mar."},
                                        {y: '', a: ".$request->apr."},
                                        {y: '', a: ".$request->may."},
                                        {y: '', a: ".$request->jun."},
                                        {y: '', a: ".$request->jul."},
                                        {y: '', a: ".$request->aug."},
                                        {y: '', a: ".$request->sep."},
                                        {y: '', a: ".$request->oct."},
                                        {y: '', a: ".$request->nov."},
                                        {y: '', a: ".$request->dec."}
                                      ],
                                      barColors: ['#da291c'],
                                      xkey: 'y',
                                      ykeys: ['a'],
                                      labels: ['', ''],
                                      hideHover: 'auto',
                                      padding: 1,
                                    });
                                  });
                    </script>";
        $result2 = "<a href='".url("total_monthly_projection_chart")."'><div id='bar-chart_total' style='height: 20px; width: 50px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_total',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->jantotal."},
                                {y: '', a: ".$request->febtotal."},
                                {y: '', a: ".$request->martotal."},
                                {y: '', a: ".$request->aprtotal."},
                                {y: '', a: ".$request->maytotal."},
                                {y: '', a: ".$request->juntotal."},
                                {y: '', a: ".$request->jultotal."},
                                {y: '', a: ".$request->augtotal."},
                                {y: '', a: ".$request->septotal."},
                                {y: '', a: ".$request->octtotal."},
                                {y: '', a: ".$request->novtotal."},
                                {y: '', a: ".$request->dectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getgraphproexp(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url("monthly_projectionexp_chart")."/".$request->id."'><div id='bar-chart".$request->id."' style='height: 20px; width: 50px'></div></a>
                <script type='text/javascript'>
                          $(function () {
                                'use strict';
                                var bar = new Morris.Bar({
                                  element: 'bar-chart".$request->id."',
                                  resize: true,
                                  data: [
                                    {y: '', a: ".$request->jan."},
                                    {y: '', a: ".$request->feb."},
                                    {y: '', a: ".$request->mar."},
                                    {y: '', a: ".$request->apr."},
                                    {y: '', a: ".$request->may."},
                                    {y: '', a: ".$request->jun."},
                                    {y: '', a: ".$request->jul."},
                                    {y: '', a: ".$request->aug."},
                                    {y: '', a: ".$request->sep."},
                                    {y: '', a: ".$request->oct."},
                                    {y: '', a: ".$request->nov."},
                                    {y: '', a: ".$request->dec."}
                                  ],
                                  barColors: ['#da291c'],
                                  xkey: 'y',
                                  ykeys: ['a'],
                                  labels: ['', ''],
                                  hideHover: 'auto',
                                  padding: 1,
                                });
                              });
                </script>";
        $result2 = "<a href='".url("total_monthly_projectionexp_chart")."'><div id='bar-chart_total' style='height: 20px; width: 50px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_total',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->jantotal."},
                                {y: '', a: ".$request->febtotal."},
                                {y: '', a: ".$request->martotal."},
                                {y: '', a: ".$request->aprtotal."},
                                {y: '', a: ".$request->maytotal."},
                                {y: '', a: ".$request->juntotal."},
                                {y: '', a: ".$request->jultotal."},
                                {y: '', a: ".$request->augtotal."},
                                {y: '', a: ".$request->septotal."},
                                {y: '', a: ".$request->octtotal."},
                                {y: '', a: ".$request->novtotal."},
                                {y: '', a: ".$request->dectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getremovedgraph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        echo "<div id='bar-chart_total' style='height: 20px; width: 50px'></div>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_total',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->jantotal."},
                                {y: '', a: ".$request->febtotal."},
                                {y: '', a: ".$request->martotal."},
                                {y: '', a: ".$request->aprtotal."},
                                {y: '', a: ".$request->maytotal."},
                                {y: '', a: ".$request->juntotal."},
                                {y: '', a: ".$request->jultotal."},
                                {y: '', a: ".$request->augtotal."},
                                {y: '', a: ".$request->septotal."},
                                {y: '', a: ".$request->octtotal."},
                                {y: '', a: ".$request->novtotal."},
                                {y: '', a: ".$request->dectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
    }
    public function getquarrterlygraph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url('quarterly_budget_chart')."/".$request->id."'><div id='bar-chartq".$request->id."' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chartq".$request->id."',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmar."},
                                {y: '', a: ".$request->aprjun."},
                                {y: '', a: ".$request->julsep."},
                                {y: '', a: ".$request->octdec."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $result2 = "<a href='".url('total_quarterly_budget_chart')."'><div id='bar-chart_totalq' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_totalq',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmartotal."},
                                {y: '', a: ".$request->aprjuntotal."},
                                {y: '', a: ".$request->julseptotal."},
                                {y: '', a: ".$request->octdectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getquarrterlygraphexp(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url('quarterly_expense_chart')."/".$request->id."'><div id='bar-chartq".$request->id."' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chartq".$request->id."',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmar."},
                                {y: '', a: ".$request->aprjun."},
                                {y: '', a: ".$request->julsep."},
                                {y: '', a: ".$request->octdec."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $result2 = "<a href='".url('total_quarterly_expense_chart')."'><div id='bar-chart_totalq' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_totalq',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmartotal."},
                                {y: '', a: ".$request->aprjuntotal."},
                                {y: '', a: ".$request->julseptotal."},
                                {y: '', a: ".$request->octdectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getquarrterlygraph2(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url('quarterly_projection_chart')."/".$request->id."'><div id='bar-chartq".$request->id."' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chartq".$request->id."',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmar."},
                                {y: '', a: ".$request->aprjun."},
                                {y: '', a: ".$request->julsep."},
                                {y: '', a: ".$request->octdec."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $result2 = "<a href='".url('total_quarterly_projection_chart')."'><div id='bar-chart_totalq' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_totalq',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmartotal."},
                                {y: '', a: ".$request->aprjuntotal."},
                                {y: '', a: ".$request->julseptotal."},
                                {y: '', a: ".$request->octdectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getquarrterlygraphproexp(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $result = "<a href='".url('quarterly_projectionexp_chart')."/".$request->id."'><div id='bar-chartq".$request->id."' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chartq".$request->id."',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmar."},
                                {y: '', a: ".$request->aprjun."},
                                {y: '', a: ".$request->julsep."},
                                {y: '', a: ".$request->octdec."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $result2 = "<a href='".url('total_quarterly_projectionexp_chart')."'><div id='bar-chart_totalq' style='height: 20px; width: 30px'></div></a>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_totalq',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmartotal."},
                                {y: '', a: ".$request->aprjuntotal."},
                                {y: '', a: ".$request->julseptotal."},
                                {y: '', a: ".$request->octdectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
        $arr = [$result, $result2];
        return $arr;
    }
    public function getremovedgraphquarterly(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        echo "<div id='bar-chart_totalq' style='height: 20px; width: 30px'></div>
                    <script type='text/javascript'>
                      $(function () {
                            'use strict';
                            var bar = new Morris.Bar({
                              element: 'bar-chart_totalq',
                              resize: true,
                              data: [
                                {y: '', a: ".$request->janmartotal."},
                                {y: '', a: ".$request->aprjuntotal."},
                                {y: '', a: ".$request->julseptotal."},
                                {y: '', a: ".$request->octdectotal."}
                              ],
                              barColors: ['#da291c'],
                              xkey: 'y',
                              ykeys: ['a'],
                              labels: ['', ''],
                              hideHover: 'auto',
                              padding: 1,
                            });
                          });
                    </script>";
    }
    public function add_user_access(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $monday = ""; $tuesday = ""; $wednesday = ""; $thursday = ""; $friday = ""; $saturday = ""; $sunday = "";
        if($request->mon_start == ""){
            $monday = "block";
        }
        else{
            $monday = date('H:i', strtotime($request->mon_start)).",".date('H:i', strtotime($request->mon_end));
        }
        //print_r($monday);die();
        if($request->tues_start == ""){
            $tuesday = "block";
        }
        else{
            $tuesday = date('H:i', strtotime($request->tues_start)).",".date('H:i', strtotime($request->tues_end));
        }
        if($request->wed_start == ""){
            $wednesday = "block";
        }
        else{
            $wednesday = date('H:i', strtotime($request->wed_start)).",".date('H:i', strtotime($request->wed_end));
        }
        if($request->thu_start == ""){
            $thursday = "block";
        }
        else{
            $thursday = date('H:i', strtotime($request->thu_start)).",".date('H:i', strtotime($request->thu_end));
        }
        if($request->fri_start == ""){
            $friday = "block";
        }
        else{
            $friday = date('H:i', strtotime($request->fri_start)).",".date('H:i', strtotime($request->fri_end));
        }
        if($request->sat_start == ""){
            $saturday = "block";
        }
        else{
            $saturday = date('H:i', strtotime($request->sat_start)).",".date('H:i', strtotime($request->sat_end));
        }
        if($request->sun_start == ""){
            $sunday = "block";
        }
        else{
            $sunday = date('H:i', strtotime($request->sun_start)).",".date('H:i', strtotime($request->sun_end));
        }


   $total_registered1=DB::table('user_access_role')->where('status',1)->where('sponsor_id',Auth::id())->get();
    $total_registered=$total_registered1->count();
    $registration_limit=total_access_user();
   // echo $registration_limit .'>'. $total_registered ;die;

    if($registration_limit > $total_registered)
    {
        if($request->hasFile('image'))
        {
            $file = $request->file('image');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/images/client';
            if($file->move($destinationPath,$fileNameToStore))
            {
                // if($request->hasFile('video')){
                    $file2 = $request->file('video');
                    $filenames2 = explode('.', $file2->getClientOriginalName());
                    $filename2 = $filenames2[0];
                    $extension2 = $file2->getClientOriginalExtension();
                    $fileNameToStore2 = $filename2.'-'.time().'.'.$extension2;
                    $destinationPath2 = 'public/images/client';
                    if($file2->move($destinationPath2,$fileNameToStore2))
                    {
                        $UserAccess = array(
                            'first_name'            => $request->first_name,
                            'last_name'             => $request->last_name,
                            'email'                 => $request->email,
                            'cellphone'             => $request->cellphone,
                            'address'               => $request->address,
                            'zip'                   => $request->zip,
                            'city'                  => $request->city,
                            'state'                 => $request->state,
                            'country'               => $request->country,
                            'religion'              => $request->religion,
                            'video'                 => $fileNameToStore2,
                            'file'                  => $fileNameToStore,
                            'note'                  => $request->note,
                            'sponsor_id'            => Auth::id(),
                            'cpassword'             => $request->password,
                        );
                        DB::table('user_access_role')->insert($UserAccess);
                     $full_address=$request->address.' '.$request->city.' '.$request->zip.' '.$request->state.' '.$request->country;
                     $loc=getLatLong($full_address);
                     $latitute=$loc['latitute'];
                     $longitude=$loc['longitude'];
                        $User = User::create([
                            'name'                  => $request->first_name." ".$request->last_name,
                            'email'                 => $request->email,
                            'password'              => Hash::make($request->password),
                            'role'                  => "affiliate_user",
                            'status'                  => 1,
                            'latitute'              => $latitute,
                            'longitude'             => $longitude,
                            'affiliate_user_id'     => Auth::id(),
                            'affiliate_user_email'  => Auth::user()->email,
                        ]);
                              $notification  = getNotificationMessage(27);
                              $message = $notification;
                            $subject = "User Access Role Created";
                            addUserActivity($subject,'add',$notification,$message);
                        $user_day_access = array(
                            'uemail'        => $request->email,
                            'monday'        => $monday,
                            'tuesday'       => $tuesday,
                            'wednesday'     => $wednesday,
                            'thursday'      => $thursday,
                            'friday'        => $friday,
                            'saturday'      => $saturday,
                            'sunday'        => $sunday
                        );
                        DB::table('user_day_access')->insert($user_day_access);
                        $user_menu_access = array(
                            'uemail'                    => $request->email,
                            'make_appointment'          => $request->make_appointment,
                            'change_appointment'        => $request->change_appointment,
                            'cancel_appointment'        => $request->cancel_appointment,
                            'appointment_comparison'    => $request->appointment_comparison,
                            'add_client'                => $request->add_client,
                            'manage_appointment'        => $request->manage_appointment,
                            'appointment_tutorial'      => $request->appointment_tutorial,
                            'email_campaign'            => $request->email_campaign,
                            'send_emails'               => $request->send_emails,
                            'send_card'                 => $request->send_card,
                            'send_video'                => $request->send_video,
                            'send_sms'                  => $request->send_sms,
                            'comparison_email'          => $request->comparison_email,
                            'manage_email'              => $request->manage_email,
                            'email_tutorial'            => $request->email_tutorial,
                            'record_transaction'        => $request->record_transaction,
                            'create_budget'             => $request->create_budget,
                            'create_projection'         => $request->create_projection,
                            'reports'                   => $request->reports,
                            'financial_comparison'      => $request->financial_comparison,
                            'financial_tutorial'        => $request->financial_tutorial,
                            'archive_edit'              => $request->archive_edit,
                            'archive_delete'            => $request->archive_delete,
                            'archive_appointment'       => $request->archive_appointment,
                            'archive_finance'           => $request->archive_finance,
                            'archive_email'             => $request->archive_email,
                            'archive_client'            => $request->archive_client,
                            'archive_comparison'        => $request->archive_comparison,
                            'archive_tutorial'          => $request->archive_tutorial,
                        );
                        $user_menu_access2 = array(
                            'uemail'                    => $request->email,
                            'setting_profile'           => $request->setting_profile,
                            'setting_banner'            => $request->setting_banner,
                            'setting_import_contact'    => $request->setting_import_contact,
                            'setting_user_access_role'  => $request->setting_user_access_role,
                            'setting_survey'            => $request->setting_survey,
                            'setting_appointment'       => $request->setting_appointment,
                            'setting_client_management' => $request->setting_client_management,
                            'setting_email_management'  => $request->setting_email_management,
                            'setting_financial_management' => $request->setting_financial_management,
                            'setting_upload_library'    => $request->setting_upload_library,
                            'setting_tutorial'          => $request->setting_tutorial,
                            'add_client_management'     => $request->add_client_management,
                            'manage_client_profile'     => $request->manage_client_profile,
                            'schedular'                 => $request->schedular,
                            'client_comparison'         => $request->client_comparison,
                            'client_access'             => $request->client_access,
                            'client_tutorial'           => $request->client_tutorial,
                            'chat'                      => $request->chat,
                            'tools'                     => $request->tools,
                            'upload_files'              => $request->upload_files,
                        );
                        DB::table('user_menu_access')->insert($user_menu_access);
                        DB::table('user_menu_access2')->insert($user_menu_access2);
                        Session::flash('success', "Success!");
                        return redirect('user_access_rights')->with('status',"Inserted successfully");
                    }//
                // }
            }
            else {
                return redirect()->back()->with('status',"Something went wrong!!!");
            }

        }
       }else{
        return redirect()->back()->with('status',"Your have cross maximum assign users limits!");
       }
    }
    public function appointment_setting_entry(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $monday = ""; $tuesday = ""; $wednesday = ""; $thursday = ""; $friday = ""; $saturday = ""; $sunday = "";
        if($request->mon_start == ""){
            $monday = "block";
        }
        else{
            $monday = date('H:i', strtotime($request->mon_start)).",".date('H:i', strtotime($request->mon_end));
        }
        if($request->tues_start == ""){
            $tuesday = "block";
        }
        else{
            $tuesday = date('H:i', strtotime($request->tues_start)).",".date('H:i', strtotime($request->tues_end));
        }
        if($request->wed_start == ""){
            $wednesday = "block";
        }
        else{
            $wednesday = date('H:i', strtotime($request->wed_start)).",".date('H:i', strtotime($request->wed_end));
        }
        if($request->thu_start == ""){
            $thursday = "block";
        }
        else{
            $thursday = date('H:i', strtotime($request->thu_start)).",".date('H:i', strtotime($request->thu_end));
        }
        if($request->fri_start == ""){
            $friday = "block";
        }
        else{
            $friday = date('H:i', strtotime($request->fri_start)).",".date('H:i', strtotime($request->fri_end));
        }
        if($request->sat_start == ""){
            $saturday = "block";
        }
        else{
            $saturday = date('H:i', strtotime($request->sat_start)).",".date('H:i', strtotime($request->sat_end));
        }
        if($request->sun_start == ""){
            $sunday = "block";
        }
        else{
            $sunday = date('H:i', strtotime($request->sun_start)).",".date('H:i', strtotime($request->sun_end));
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $values = array(
            'uemail'            => $uemail,
            'monday'            => $monday,
            'tuesday'           => $tuesday,
            'wednesday'         => $wednesday,
            'thursday'          => $thursday,
            'friday'            => $friday,
            'saturday'          => $saturday,
            'sunday'            => $sunday,
            'receive_time'      => $request->receive_time,
            'popup_reminder'    => $request->popup_reminder,
            'change_time'       => $request->change_time,
            'change_unit'       => $request->change_unit,
            'cancel_time'       => $request->cancel_time,
            'cancel_unit'       => $request->cancel_unit,
            'notification_time' => $request->notification_time,
            'notification_unit' => $request->notification_unit
        );
        DB::table('appointment_settings')->insert($values);
           $notification  = getNotificationMessage(56);
        $message = $notification;
        $subject = "Appointment Setting Added";
        addUserActivity($subject,'add',$notification,$message);
        Session::flash('success', "Success!");
        return redirect('add_appointment_setting')->with('status',"Inserted successfully");
    }
    public function appointment_setting_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $monday = ""; $tuesday = ""; $wednesday = ""; $thursday = ""; $friday = ""; $saturday = ""; $sunday = "";
        if($request->mon_start == ""){
            $monday = "block";
        }
        else{
            $monday = date('H:i', strtotime($request->mon_start)).",".date('H:i', strtotime($request->mon_end));
        }
        if($request->tues_start == ""){
            $tuesday = "block";
        }
        else{
            $tuesday = date('H:i', strtotime($request->tues_start)).",".date('H:i', strtotime($request->tues_end));
        }
        if($request->wed_start == ""){
            $wednesday = "block";
        }
        else{
            $wednesday = date('H:i', strtotime($request->wed_start)).",".date('H:i', strtotime($request->wed_end));
        }
        if($request->thu_start == ""){
            $thursday = "block";
        }
        else{
            $thursday = date('H:i', strtotime($request->thu_start)).",".date('H:i', strtotime($request->thu_end));
        }
        if($request->fri_start == ""){
            $friday = "block";
        }
        else{
            $friday = date('H:i', strtotime($request->fri_start)).",".date('H:i', strtotime($request->fri_end));
        }
        if($request->sat_start == ""){
            $saturday = "block";
        }
        else{
            $saturday = date('H:i', strtotime($request->sat_start)).",".date('H:i', strtotime($request->sat_end));
        }
        if($request->sun_start == ""){
            $sunday = "block";
        }
        else{
            $sunday = date('H:i', strtotime($request->sun_start)).",".date('H:i', strtotime($request->sun_end));
        }
        $values = array(
            'monday'            => $monday,
            'tuesday'           => $tuesday,
            'wednesday'         => $wednesday,
            'thursday'          => $thursday,
            'friday'            => $friday,
            'saturday'          => $saturday,
            'sunday'            => $sunday,
            'receive_time'      => $request->receive_time,
            'popup_reminder'    => $request->popup_reminder,
            'change_time'       => $request->change_time,
            'change_unit'       => $request->change_unit,
            'cancel_time'       => $request->cancel_time,
            'cancel_unit'       => $request->cancel_unit,
            'notification_time' => $request->notification_time,
            'notification_unit' => $request->notification_unit
        );
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
          $notification  = getNotificationMessage(57);
        $message = $notification;
        $subject = "Appointment Setting Updated";
        addUserActivity($subject,'add',$notification,$message);
        DB::table('appointment_settings')->where('uemail', $uemail)->update($values);
        Session::flash('success', "Success!");
        return redirect('add_appointment_setting')->with('status',"Saved successfully");
    }
    public function edit_user_access(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $video = "";
        $img = "";
        if($request->mon_start == ""){
            $monday = "block";
        }
        else{
            $monday = date('H:i', strtotime($request->mon_start)).",".date('H:i', strtotime($request->mon_end));
        }
        //print_r($monday);die();
        if($request->tues_start == ""){
            $tuesday = "block";
        }
        else{
            $tuesday = date('H:i', strtotime($request->tues_start)).",".date('H:i', strtotime($request->tues_end));
        }
        if($request->wed_start == ""){
            $wednesday = "block";
        }
        else{
            $wednesday = date('H:i', strtotime($request->wed_start)).",".date('H:i', strtotime($request->wed_end));
        }
        if($request->thu_start == ""){
            $thursday = "block";
        }
        else{
            $thursday = date('H:i', strtotime($request->thu_start)).",".date('H:i', strtotime($request->thu_end));
        }
        if($request->fri_start == ""){
            $friday = "block";
        }
        else{
            $friday = date('H:i', strtotime($request->fri_start)).",".date('H:i', strtotime($request->fri_end));
        }
        if($request->sat_start == ""){
            $saturday = "block";
        }
        else{
            $saturday = date('H:i', strtotime($request->sat_start)).",".date('H:i', strtotime($request->sat_end));
        }
        if($request->sun_start == ""){
            $sunday = "block";
        }
        else{
            $sunday = date('H:i', strtotime($request->sun_start)).",".date('H:i', strtotime($request->sun_end));
        }
        if($request->hasFile('image'))
        {
            $file = $request->file('image');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/images/client';
            if($file->move($destinationPath,$fileNameToStore))
            {
                $img = $fileNameToStore;
            }
        }
        else
        {
            $img = $request->previmg;
        }
        if($request->hasFile('video')){
            $file2 = $request->file('video');
            $filenames2 = explode('.', $file2->getClientOriginalName());
            $filename2 = $filenames2[0];
            $extension2 = $file2->getClientOriginalExtension();
            $fileNameToStore2 = $filename2.'-'.time().'.'.$extension2;
            $destinationPath2 = 'public/images/client';
            if($file2->move($destinationPath2,$fileNameToStore2))
            {
                $video = $fileNameToStore2;
            }
        }
        else
        {
            $video = $request->prevvideo;
        }
        $UserAccess = array(
            'first_name'            => $request->first_name,
            'last_name'             => $request->last_name,
            'cellphone'             => $request->cellphone,
            'address'               => $request->address,
            'zip'                   => $request->zip,
            'city'                  => $request->city,
            'state'                 => $request->state,
            'country'               => $request->country,
            'religion'              => $request->religion,
            'video'                 => $video,
            'file'                  => $img,
            'note'                  => $request->note
        );
        DB::table('user_access_role')->where('email', $request->email)->update($UserAccess);
           $notification  = getNotificationMessage(28);
        $message = $notification;
        $subject = "User Access Updated";
        addUserActivity($subject,'update',$notification,$message);
        $user_day_access = array(
            'monday'        => $monday,
            'tuesday'       => $tuesday,
            'wednesday'     => $wednesday,
            'thursday'      => $thursday,
            'friday'        => $friday,
            'saturday'      => $saturday,
            'sunday'        => $sunday
        );
        DB::table('user_day_access')->where('uemail', $request->email)->update($user_day_access);
        $user_menu_access = array(
            'make_appointment'          => $request->make_appointment,
            'change_appointment'        => $request->change_appointment,
            'cancel_appointment'        => $request->cancel_appointment,
            'appointment_comparison'    => $request->appointment_comparison,
            'add_client'                => $request->add_client,
            'manage_appointment'        => $request->manage_appointment,
            'appointment_tutorial'      => $request->appointment_tutorial,
            'email_campaign'            => $request->email_campaign,
            'send_emails'               => $request->send_emails,
            'send_card'                 => $request->send_card,
            'send_video'                => $request->send_video,
            'send_sms'                  => $request->send_sms,
            'comparison_email'          => $request->comparison_email,
            'manage_email'              => $request->manage_email,
            'email_tutorial'            => $request->email_tutorial,
            'record_transaction'        => $request->record_transaction,
            'create_budget'             => $request->create_budget,
            'create_projection'         => $request->create_projection,
            'reports'                   => $request->reports,
            'financial_comparison'      => $request->financial_comparison,
            'financial_tutorial'        => $request->financial_tutorial,
            'archive_edit'              => $request->archive_edit,
            'archive_delete'            => $request->archive_delete,
            'archive_appointment'       => $request->archive_appointment,
            'archive_finance'           => $request->archive_finance,
            'archive_email'             => $request->archive_email,
            'archive_client'            => $request->archive_client,
            'archive_comparison'        => $request->archive_comparison,
            'archive_tutorial'          => $request->archive_tutorial,
        );
        $user_menu_access2 = array(
            'setting_profile'           => $request->setting_profile,
            'setting_banner'            => $request->setting_banner,
            'setting_import_contact'    => $request->setting_import_contact,
            'setting_user_access_role'  => $request->setting_user_access_role,
            'setting_survey'            => $request->setting_survey,
            'setting_appointment'       => $request->setting_appointment,
            'setting_client_management' => $request->setting_client_management,
            'setting_email_management'  => $request->setting_email_management,
            'setting_financial_management' => $request->setting_financial_management,
            'setting_upload_library'    => $request->setting_upload_library,
            'setting_tutorial'          => $request->setting_tutorial,
            'add_client_management'     => $request->add_client_management,
            'manage_client_profile'     => $request->manage_client_profile,
            'schedular'                 => $request->schedular,
            'client_comparison'         => $request->client_comparison,
            'client_access'             => $request->client_access,
            'client_tutorial'           => $request->client_tutorial,
            'chat'                      => $request->chat,
            'tools'                     => $request->tools,
            'upload_files'              => $request->upload_files,
        );
        DB::table('user_menu_access')->where('uemail', $request->email)->update($user_menu_access);
        DB::table('user_menu_access2')->where('uemail', $request->email)->update($user_menu_access2);
        // DB::table('user_menu_access')->where('uemail', $request->email)->update($user_menu_access);
        Session::flash('success', "Success!");
        return redirect('user_access_rights')->with('status',"Inserted successfully");
    }
    public function delete_user_access_rights(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = base64_decode($request->id);
          $notification  = getNotificationMessage(29);
        $message = $notification;
        $subject = "User Access Right Deleted";
        addUserActivity($subject,'delete',$notification,$message);
        DB::table('user_access_role')->where('email', $email)->delete();
        DB::table('user_day_access')->where('uemail', $email)->delete();
        DB::table('user_menu_access')->where('uemail', $email)->delete();
        DB::table('user_menu_access2')->where('uemail', $email)->delete();
        DB::table('users')->where('email', $email)->delete();
        return redirect('user_access_rights')->with('status',"Deleted successfully");
    }
    public function view_access_roles(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $email = base64_decode($request->id);
        $data['users'] = DB::table('user_access_role')->join('user_day_access', 'user_access_role.email', 'user_day_access.uemail')->join('user_menu_access', 'user_access_role.email', 'user_menu_access.uemail')->join('user_menu_access2', 'user_access_role.email', 'user_menu_access2.uemail')->where('email', $email)->first();
        $data['religion'] = Religion::get();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('view_access_roles')->with($data);
    }
    public function import_contact_entry(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $folder = "";
        if($request->new_folder == ""){
            $folder = $request->added_folder;
        }
        else{
            $folder = $request->new_folder;
            DB::table('import_contact_folder')->insert(array('folder_name' => $request->new_folder));
        }
        $notification  = getNotificationMessage(28);
        $message = $notification;
        $subject = "User Access Updated";
        addUserActivity($subject,'update',$notification,$message);
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $values = array(
            'provider'  => $request->provider,
            'username'  => $request->username,
            'password'  => $request->password,
            'folder'    => $folder,
            'uemail'    => $uemail,
        );
        DB::table('import_contacts')->insert($values);
        $folders = DB::table('import_contact_folder')->get();
        foreach($folders as $value)
        {
            echo '<option value="'.$value->folder_name.'">'.$value->folder_name.'</option>';
        }
    }
    public function block_appointment_entry(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $values = array('uemail' => $uemail,'startdate' => $request->startdate, 'enddate' => $request->enddate, 'reason' => $request->reason);
        DB::table('block_appointment_date')->insert($values);
        // Session::flash('success', "Success!");
        // return redirect()->back()->with('status',"Inserted successfully");
         $notification  = getNotificationMessage(59);
        $message = $notification;
        $subject = "Appointment Blocked";
        addUserActivity($subject,'add',$notification,$message);
        $appointmwnt = DB::table('block_appointment_date')->get();
        foreach($appointmwnt as $value)
        {
            echo '<tr class="odd gradeX">
                    <td>'.$value->reason.'</td>
                    <td>'.date('d F Y', strtotime($value->startdate)).'</td>
                    <td>'.date('d F Y', strtotime($value->enddate)).'</td>
                    <td>
                        <a href="" class="btn btn-xs btn-info">Edit</a>
                        <a href="" class="btn btn-xs btn-info">Delete</a>
                    </td>
                </tr>';
        }
    }
    public function checkblockdate(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $appointmwnt = DB::table('block_appointment_date')->get();
        $cnt = 0;
        $date = $request->date;
        foreach($appointmwnt as $value)
        {
            if(($date >= $value->startdate) && ($date <= $value->enddate)){
                $cnt++;
            }
        }
        if($cnt == 0){
            echo "yes";
        }
        else{
            echo "no";
        }
    }
    public function delete_block_date(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        DB::table('block_appointment_date')->where('id', $request->id)->delete();
        Session::flash('success', "Success!");
        $notification  = getNotificationMessage(5);
        $message = $notification;
        $subject = "Appointment Deleted";
         addUserActivity($subject,'delete',$notification,$message);
        return redirect()->back()->with('status',"Deleted successfully");
    }
    public function revenue_records_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
         $usr = User::where('id', $uid)->first();
        $affiliate = AffiliateRegistration::where('email', $usr->email)->first();

        $values = array(
            'client_name'           => $request->client_name,
            'client_email'          => $request->client_email,
            'transaction_date'      => $request->transaction_date,
            'account_description'   => $request->account_description,
            'business_category'     => $affiliate->business_category,
            'bill'                  => $request->bill,
            'discount'              => $request->discount,
            'discount_type'         => $request->discount_type,
            'tax'                   => $request->tax,
            'shipping'              => $request->shipping,
            'total'                 => $request->total,
            'amount_paid'           => $request->amount_paid,
            'balance'               => $request->balance,
            'created_at'            => date('Y-m-d'),
            'uid'                   => $uid
        );
        DB::table('revenue_record')->insert($values);
         $notification  = getNotificationMessage(12);
        $message = $notification;
        $subject = "Revenue Created";
         addUserActivity($subject,'add',$notification,$message);
        $data['years'] = [];
            for($i = 0; $i < 10; $i++){
                $lastYear = date("Y", strtotime("-$i years"));
                if($lastYear > 2019){
                    array_push($data['years'], $lastYear);
                }
            }
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
            $invoice_setup = FinancialInvoiceSetup::where('uid', $uid)->first();
            foreach($data['years'] as $year){
                foreach($months as $month){
                    if($invoice_setup->is_tax == 1){
                        $tax = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('tax');
                        $revrecrd1 = DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                        if(count($revrecrd1) > 0){
                            DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->update([
                                'bill'                  => $tax,
                                'total'                 => $tax,
                                'amount_paid'           => $tax,
                            ]);
                        }else{
                            DB::table('revenue_record')->insert([
                                'transaction_date'      => $year."-".$month."-01",
                                'account_description'   => "Sales Tax Collected",
                                'bill'                  => $tax,
                                'tax'                   => "0",
                                'shipping'              => "0",
                                'total'                 => $tax,
                                'amount_paid'           => $tax,
                                'balance'               => "0",
                                'created_at'            => $year."-".$month."-01",
                                'uid'                   => $uid
                            ]);
                        }
                    }
                    if($invoice_setup->shipping_cost == 1){
                        $shipping = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('shipping');
                        $revrecrd2 = DB::table('revenue_record')->where('account_description', 'Shipping Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                        if(count($revrecrd2) > 0){
                            DB::table('revenue_record')->where('account_description', 'Shipping Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->update([
                                'bill'                  => $shipping,
                                'total'                 => $shipping,
                                'amount_paid'           => $shipping,
                            ]);
                        }else{
                            DB::table('revenue_record')->insert([
                                'transaction_date'      => $year."-".$month."-01",
                                'account_description'   => "Shipping Collected",
                                'bill'                  => $shipping,
                                'tax'                   => "0",
                                'shipping'              => "0",
                                'total'                 => $shipping,
                                'amount_paid'           => $shipping,
                                'balance'               => "0",
                                'created_at'            => $year."-".$month."-01",
                                'uid'                   => $uid
                            ]);
                        }
                    }
                }
            }
            $admin_email=Setting::get_admin_email();
            $fullname=$request->client_name;
            $affiliate_name=Auth::user()->name;
            $affiliate_email=Auth::user()->email;
             $link=url('/');
             $website_url="<a href='".$link."' target='_blank'>click here to login</a>";
             $temp=DB::table('record_transactions_email_template')->where('id',1)->first();
             $email_message=$temp->email_body;
             $email_subject=$temp->email_subject;
             $email_message=str_replace('{fullname}',$fullname,$email_message);
             $email_message=str_replace('{website_url}',$website_url,$email_message);
             $email=$request->client_email;
              $data2 = array(
                      'admin_email'       =>   $admin_email,
                      'template'          =>  'email_template',
                      'webtitle'          =>  'MAFAMA',
                      'subject'           =>  $email_subject,
                      'email_message'     =>  $email_message,
                  );
                \Mail::to($email)->send(new SendMail($data2));
          if($request->balance < 0){
            $balance=$request->balance;
             $temp=DB::table('minus_balance_email_template')->where('id',1)->first();
             $email_message=$temp->email_body;
             $email_subject=$temp->email_subject;
             $email_message=str_replace('{fullname}',$fullname,$email_message);
             $email_message=str_replace('{balance}',$balance,$email_message);
             $email_message=str_replace('{website_url}',$website_url,$email_message);
             $email=$request->client_email;
             $data3 = array(
                      'admin_email'       =>   $admin_email,
                      'template'          =>  'email_template',
                      'webtitle'          =>  'MAFAMA',
                      'subject'           =>  $email_subject,
                      'email_message'     =>  $email_message,
                  );
                \Mail::to($email)->send(new SendMail($data3));
          }
        // $exist1 = DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->where('uid', $uid)->get();
        // $exist2 = DB::table('revenue_record')->where('account_description', 'Shipping Collected')->where('uid', $uid)->get();
        // $exist3 = DB::table('expense_record')->where('account_description', 'Sales Tax Paid')->where('uid', $uid)->get();
        // $exist4 = DB::table('expense_record')->where('account_description', 'Shipping Paid')->where('uid', $uid)->get();
        // $tax = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('tax');
        // $shipping = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('shipping');
        // $invoice_setup = FinancialInvoiceSetup::where('uid', $uid)->first();
        // if(count($exist1) > 0){
        //      DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->where('uid', $uid)->update([
        //         'bill'                  =>  $tax,
        //         'total'                 =>  $tax,
        //         'transaction_date'      =>  date('Y-m-d'),
        //         'amount_paid'           =>  $tax
        //     ]);
        // }
        // else{
        //     if($invoice_setup->is_tax == 1){
        //         DB::table('revenue_record')->insert([
        //             'transaction_date'      => date('Y-m-d'),
        //             'account_description'   => "Sales Tax Collected",
        //             'bill'                  => $tax,
        //             'tax'                   => "0",
        //             'shipping'              => "0",
        //             'total'                 => $tax,
        //             'amount_paid'           => $tax,
        //             'balance'               => "0",
        //             'created_at'            => date('Y-m-d'),
        //             'uid'                   => $uid
        //         ]);
        //     }
        // }
        // if(count($exist2) > 0){
        //     DB::table('revenue_record')->where('account_description', 'Shipping Collected')->where('uid', $uid)->update([
        //         'bill'                  =>  $shipping,
        //         'total'                 =>  $shipping,
        //         'transaction_date'      =>  date('Y-m-d'),
        //         'amount_paid'           =>  $shipping
        //     ]);
        // }
        // else{
        //     if($invoice_setup->shipping_cost == 1){
        //         DB::table('revenue_record')->insert([
        //             'transaction_date'      => date('Y-m-d'),
        //             'account_description'   => "Shipping Collected",
        //             'bill'                  => $shipping,
        //             'tax'                   => "0",
        //             'shipping'              => "0",
        //             'total'                 => $shipping,
        //             'amount_paid'           => $shipping,
        //             'balance'               => "0",
        //             'created_at'            => date('Y-m-d'),
        //             'uid'                   => $uid
        //         ]);
        //     }
        // }
        // if(count($exist3) > 0){
        //     DB::table('expense_record')->where('account_description', 'Sales Tax Paid')->where('uid', $uid)->update([
        //         'total'                 =>  $tax,
        //         'transaction_date'      =>  date('Y-m-d'),
        //         'amount_paid'           =>  $tax
        //     ]);
        // }
        // else{
        //     if($invoice_setup->is_tax == 1){
        //         DB::table('expense_record')->insert([
        //             'transaction_date'      => date('Y-m-d'),
        //             'account_description'   => "Sales Tax Paid",
        //             'total'                 => $tax,
        //             'amount_paid'           => $tax,
        //             'balance'               => "0",
        //             'created_at'            => date('Y-m-d'),
        //             'uid'                   => $uid
        //         ]);
        //     }
        // }
        // if(count($exist4) > 0){
        //     DB::table('expense_record')->where('account_description', 'Shipping Paid')->where('uid', $uid)->update([
        //         'total'                 =>  $shipping,
        //         'transaction_date'      =>  date('Y-m-d'),
        //         'amount_paid'           =>  $shipping
        //     ]);
        // }
        // else{
        //     if($invoice_setup->shipping_cost == 1){
        //         DB::table('expense_record')->insert([
        //             'transaction_date'      => date('Y-m-d'),
        //             'account_description'   => "Shipping Paid",
        //             'total'                 => $shipping,
        //             'amount_paid'           => $shipping,
        //             'balance'               => "0",
        //             'created_at'            => date('Y-m-d'),
        //             'uid'                   => $uid
        //         ]);
        //     }
        // }
    }
    public function expense_records_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        // print_r($request->total);die()
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $usr = User::where('id', $uid)->first();
        $affiliate = AffiliateRegistration::where('email', $usr->email)->first();

        $values = array(
            'transaction_date'      => $request->transaction_date,
            'account_description'   => $request->account_description,
            'business_category'     => $affiliate->business_category,
            'total'                 => $request->bill,
            'amount_paid'           => $request->amount_paid,
            'balance'               => $request->balance,
            'created_at'            => date('Y-m-d'),
            'uid'                   => $uid
        );
        DB::table('expense_record')->insert($values);
         $notification  = getNotificationMessage(9);
        $message = $notification;
        $subject = "Expense Created";
         addUserActivity($subject,'add',$notification,$message);
        $admin_email=Setting::get_admin_email();
            $fullname=Auth::user()->name;
            $email=Auth::user()->email;
             $link=url('/');
             $website_url="<a href='".$link."' target='_blank'>click here to login</a>";
             $temp=DB::table('record_transactions_email_template')->where('id',1)->first();
             $email_message=$temp->email_body;
             $email_subject=$temp->email_subject;
             $email_message=str_replace('{fullname}',$fullname,$email_message);
             $email_message=str_replace('{website_url}',$website_url,$email_message);
              $data2 = array(
                      'admin_email'       =>   $admin_email,
                      'template'          =>  'email_template',
                      'webtitle'          =>  'MAFAMA',
                      'subject'           =>  $email_subject,
                      'email_message'     =>  $email_message,
                  );
                \Mail::to($email)->send(new SendMail($data2));
          if($request->balance < 0){
            $balance=$request->balance;
             $temp=DB::table('minus_balance_email_template')->where('id',1)->first();
             $email_message=$temp->email_body;
             $email_subject=$temp->email_subject;
             $email_message=str_replace('{fullname}',$fullname,$email_message);
             $email_message=str_replace('{balance}',$balance,$email_message);
             $email_message=str_replace('{website_url}',$website_url,$email_message);
             $data3 = array(
                      'admin_email'       =>   $admin_email,
                      'template'          =>  'email_template',
                      'webtitle'          =>  'MAFAMA',
                      'subject'           =>  $email_subject,
                      'email_message'     =>  $email_message,
                  );
                \Mail::to($email)->send(new SendMail($data3));
          }
    }
    public function asset_records_submit(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $values = array(
            'purchase_date'         => $request->purchase_date,
            'quantity'              => $request->quantity,
            'price'                 => $request->price,
            'description'           => $request->description,
            'created_at'            => date('Y-m-d'),
            'uid'                   => $uid
        );
        DB::table('asset_record')->insert($values);
          $notification  = getNotificationMessage(6);
        $message = $notification;
        $subject = "Asset Created";
         addUserActivity($subject,'add',$notification,$message);
    }
    public function asset_records_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $asset = DB::table('asset_record')->where('id', $request->id)->first();
         $notification  = getNotificationMessage(7);
        $message = $notification;
        $subject = "Asset Record Update";
        addUserActivity($subject,'update',$notification,$message);
        $values = array(
            'purchase_date'         => $request->purchase_date,
            'quantity'              => $request->quantity,
            'price'                 => $request->price,
            'description'           => $request->description,
        );
        $values2 = array(
            'purchase_date'         => $asset->purchase_date,
            'quantity'              => $asset->quantity,
            'price'                 => $asset->price,
            'description'           => $asset->description,
            'updated_at'            => date('Y-m-d H:i:s'),
            'uid'                   => $uid,
            'reason'                => $request->reason,
            'asset_id'              => $request->id,
            'user_email'            => Auth::user()->email
        );
         DB::table('asset_record_update')->insert($values2);
        DB::table('asset_record')->where('id', $request->id)->update($values);
        // $vl = DB::table('asset_record_update')->where('asset_id', $request->id)->get();
        // if(count($vl) > 0){
        //     DB::table('asset_record_update')->where('asset_id', $request->id)->update($values2);
        // }
        // else{

        // }

    }
    public function expense_record_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $expense = DB::table('expense_record')->where('id', $request->id)->first();
        $notification  = getNotificationMessage(10);
        $message = $notification;
        $subject = "Expense Record Update";
        addUserActivity($subject,'update',$notification,$message);
        $values = array(
            'transaction_date'      => $request->transaction_date,
            'account_description'   => $request->account_description,
            'total'                 => $request->total,
            'amount_paid'           => $request->amount_paid,
            'balance'               => $request->balance
        );
        $values2 = array(
            'transaction_date'      => $expense->transaction_date,
            'account_description'   => $expense->account_description,
            'total'                 => $expense->total,
            'updated_at'            => date('Y-m-d H:i:s'),
            'uid'                   => $uid,
            'reason'                => $request->reason,
            'exp_id'                => $request->id,
            'amount_paid'           => $expense->amount_paid,
            'balance'               => $expense->balance,
            'user_email'            => Auth::user()->email
        );
         DB::table('expense_record_update')->insert($values2);
        DB::table('expense_record')->where('id', $request->id)->update($values);
        // $vl = DB::table('expense_record_update')->where('exp_id', $request->id)->get();
        // if(count($vl) > 0){
        //     DB::table('expense_record_update')->where('exp_id', $request->id)->update($values2);
        // }
        // else{

        // }

        Session::flash('success', "Success!");
        return redirect('expenses_reord')->with('status',"Updated successfully");
    }
    public function revenue_records_update(Request $request)
    {
        // return $request;
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $revenue = DB::table('revenue_record')->where('id', $request->id)->first();

         $notification  = getNotificationMessage(13);
        $message = $notification;
        $subject = "Record Revenue Update";
        addUserActivity($subject,'update',$notification,$message);


        $values = array(
            'client_name'           => $request->client_name,
            'client_email'          => $request->client_email,
            'transaction_date'      => $request->transaction_date,
            'account_description'   => $request->account_description,
            'bill'                  => $request->bill,
            'discount'              => $request->discount,
            'tax'                   => $request->tax,
            'shipping'              => $request->shipping,
            'total'                 => $request->total,
            'amount_paid'           => $request->amount_paid,
            'balance'               => $request->balance,
        );
        $values2 = array(
            'client_name'           => $request->client_name,
            'client_email'          => $request->client_email,
            'transaction_date'      => $revenue->transaction_date,
            'account_description'   => $revenue->account_description,
            'bill'                  => $revenue->bill,
            'tax'                   => $revenue->tax,
            'shipping'              => $revenue->shipping,
            'total'                 => $revenue->total,
            'amount_paid'           => $revenue->amount_paid,
            'balance'               => $revenue->balance,
            'updated_at'            => date('Y-m-d H:i:s'),
            'uid'                   => $uid,
            'reason'                => $request->reason,
            'rev_id'                => $request->id,
            'user_email'            => Auth::user()->email,

        );
        DB::table('revenue_record_update')->insert($values2);
        DB::table('revenue_record')->where('id', $request->id)->update($values);

        $data['years'] = [];
            for($i = 0; $i < 10; $i++){
                $lastYear = date("Y", strtotime("-$i years"));
                if($lastYear > 2019){
                    array_push($data['years'], $lastYear);
                }
            }
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
            $invoice_setup = FinancialInvoiceSetup::where('uid', $uid)->first();
            foreach($data['years'] as $year){
                foreach($months as $month){
                    if($invoice_setup->is_tax == 1){
                        $tax = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('tax');
                        $revrecrd1 = DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                        if(count($revrecrd1) > 0){
                            DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->update([
                                'bill'                  => $tax,
                                'total'                 => $tax,
                                'amount_paid'           => $tax,
                            ]);
                        }else{
                            DB::table('revenue_record')->insert([
                                'transaction_date'      => $year."-".$month."-01",
                                'account_description'   => "Sales Tax Collected",
                                'bill'                  => $tax,
                                'tax'                   => "0",
                                'shipping'              => "0",
                                'total'                 => $tax,
                                'amount_paid'           => $tax,
                                'balance'               => "0",
                                'created_at'            => $year."-".$month."-01",
                                'uid'                   => $uid
                            ]);
                        }
                    }
                    if($invoice_setup->shipping_cost == 1){
                        $shipping = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('shipping');
                        $revrecrd2 = DB::table('revenue_record')->where('account_description', 'Shipping Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                        if(count($revrecrd2) > 0){
                            DB::table('revenue_record')->where('account_description', 'Shipping Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->update([
                                'bill'                  => $shipping,
                                'total'                 => $shipping,
                                'amount_paid'           => $shipping,
                            ]);
                        }else{
                            DB::table('revenue_record')->insert([
                                'transaction_date'      => $year."-".$month."-01",
                                'account_description'   => "Shipping Collected",
                                'bill'                  => $shipping,
                                'tax'                   => "0",
                                'shipping'              => "0",
                                'total'                 => $shipping,
                                'amount_paid'           => $shipping,
                                'balance'               => "0",
                                'created_at'            => $year."-".$month."-01",
                                'uid'                   => $uid
                            ]);
                        }
                    }
                }
            }
    }
    public function get_client_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $idd = explode('client', $request->id);
        $id = $idd[1];
        $client = DB::table('client_appointment_lists')->where('id', $id)->first();
        $name = $client->first_name." ".$client->last_name;
        $email = $client->email;
        $phone = $client->cell_phone;
        $address = $client->address;
        $company = $client->company;
        $work_phone = $client->work_phone;
        $arr = [];
        array_push($arr, $name, $email, $phone, $address, $company, $work_phone);
        return $arr;
    }
    public function client_revenue_list(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $revenue = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->get();
        if(count($revenue) > 0){
            foreach ($revenue as $value) {

                $temp = $value->discount;
                if(empty($temp)){
                    $temp = 0;
                }

                echo '<tr>
                        <td>
                            <label class="checkbox chk-sm">
                                <input class="tran_check" type="checkbox" value="'.$value->id.'" onchange="tran_check()" />
                                <i></i> '.date("d M Y", strtotime($value->transaction_date)).'
                            </label>
                        </td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->bill.'</td>
                        <td>'.$temp.'</td>
                        <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                        <td>
                           <a href="'. url('edit_revenue_record').'/'.$value->id.'" class="btn btn-xs btn-info">Edit</a>
                            <a id="'.$value->id.'" class="btn btn-xs btn-info delete">Delete</a>
                        </td>
                    </tr>';
                }
                $bill = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->sum('bill');
                $discount = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->sum('discount');


                $tax = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->sum('tax');
                $shipping = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->sum('shipping');
                $total = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->sum('total');
                $amount_paid = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->sum('amount_paid');
                $balance = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->sum('balance');
                echo'
                    <tr class="" style="background-color:#FFCCCB">
                    <td> '.date("d M Y").' </td>
                    <th>Total</th>
                    <td> '.$bill.'</td>
                    <td> '.$discount.'</td>
                    <td>'.$tax.'</td>
                    <td>'.$shipping.'</td>
                    <td>'.$total.'</td>
                    <td>'.$amount_paid.'</td>
                    <td>'.$balance.'</td>
                    <td></td>

                </tr>
                    ';


        }
        else{
            echo 'No Result Found';
        }
    }

    public function client_revenue_list_pos(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $revenue = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->get();
        if(count($revenue) > 0){
            $charge=0;
            $tax=0;
            $shipping=0;
            $total=0;
            $amount_paid=0;
            $balance=0;
            foreach ($revenue as $value) {
                $charge +=$value->bill;
                $tax +=$value->tax;
                $shipping +=$value->shipping;
                $amount_paid +=$value->amount_paid;
                $total +=$value->total;
                $balance +=str_replace('-', '', $value->balance);



                echo '<tr>
                        <td>
                            <label class="checkbox chk-sm">
                                <input class="tran_check" type="checkbox" value="'.$value->id.'" onchange="tran_check()" />
                                <i></i> '.date("d F Y", strtotime($value->transaction_date)).'
                            </label>
                        </td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->bill.'</td>
                        <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                        <td>
                           <a href="'. url('edit_revenue_record').'/'.$value->id.'" class="btn btn-xs btn-info">Edit</a>
                            <a id="'.$value->id.'" class="btn btn-xs btn-info delete">Delete</a>
                        </td>
                    </tr>';


                }
                echo'
                <tr   style="background-color:#FFCCCB">
                <td>
                '.date('d M Y').'
                </td>
                <th>Total</th>
                <td>'.$charge.'</td>
                <td>'.$tax.'</td>
                <td>'.$shipping.'</td>
                <td>'.$total.'</td>
                <td>'.$amount_paid.'</td>

                <td>'.-$balance.'</td>

                <td>

                </td>
            </tr>

                ';
        }
        else{
            echo 'No Result Found';
        }
    }


    public function client_revenue_list_neg(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $revenue = DB::table('revenue_record')->where('client_email', $request->client_email)->whereYear('transaction_date',date('Y'))->get();
        if(count($revenue) > 0){

            $charge=0;
        $tax=0;
        $shipping=0;
        $total=0;
        $amount_paid=0;
        $balance=0;
            foreach ($revenue as $value) {

               if($value->balance < 0){
                $charge +=$value->bill;
                $tax +=$value->tax;
                $shipping +=$value->shipping;
                $amount_paid +=$value->amount_paid;
                $total +=$value->total;
                $balance +=str_replace('-', '', $value->balance);

                echo '<tr   ">
                        <td>
                            <label class="checkbox chk-sm">
                                <input class="tran_check" type="checkbox" value="'.$value->id.'" onchange="tran_check()" />
                                <i></i> '.date("d F Y", strtotime($value->transaction_date)).'
                            </label>
                        </td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->bill.'</td>
                        <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                        <td>
                           <a href="'. url('edit_revenue_record').'/'.$value->id.'" class="btn btn-xs btn-info">Edit</a>
                            <a id="'.$value->id.'" class="btn btn-xs btn-info delete">Delete</a>
                        </td>
                    </tr>


                    ';


                }}
                echo'
                <tr  style="background-color:#FFCCCB">
                <td>
                '.date('d M Y').'
                </td>
                <th>Total</th>
                <td>'.$charge.'</td>
                <td>'.$tax.'</td>
                <td>'.$shipping.'</td>
                <td>'.$total.'</td>
                <td>'.$amount_paid.'</td>

                <td>'.-$balance.'</td>

                <td>

                </td>
            </tr>

                ';
        }
        else{
            echo 'No Result Found';
        }
    }




    public function get_invoice_list(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode(',', $request->invoice_id);
        $list = DB::table('revenue_record')->whereIn('id', $id)->get();
        foreach ($list as $value) {
            echo '<tr>
                    <td style="padding: 8px;line-height: 1.42857143;vertical-align: middle; border: 1px solid red;background-color: white;color: black; text-align: center">'.date("d F Y", strtotime($value->transaction_date)).'</td>
                    <td style="padding: 8px;line-height: 1.42857143;vertical-align: middle; border: 1px solid red;background-color: white;color: black; text-align: center">'.$value->account_description.'</td>
                    <td style="padding: 8px;line-height: 1.42857143;vertical-align: middle; border: 1px solid red;background-color: white;color: black; text-align: center">'.$value->total.'</td>
                  </tr>';
        }
    }
    public function get_invoice_amount(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $id = explode(',', $request->invoice_id);
        $bill = 0;
        $tax = 0;
        $discount = 0;
        $shipping = 0;
        $total = 0;
        $amount_paid = 0;
        $balance = 0;
        $arr = [];
        $list = DB::table('revenue_record')->whereIn('id', $id)->get();
        foreach ($list as $value) {
            $bill = $bill + $value->bill;
            $tax = $tax + $value->tax;
            $shipping = $shipping + $value->shipping;
            $total = $total + $value->total;
            $discount = $discount + $value->discount;
            $amount_paid = $amount_paid + $value->amount_paid;
            $balance = $balance + $value->balance;
        }
        array_push($arr, $bill, $tax, $shipping, $total, $amount_paid, $balance, $discount);
        return $arr;
    }
    public static function getjanactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '01')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getfebactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '02')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getmaractual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '03')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getapractual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '04')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getmayactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '05')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getjunactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '06')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getjulactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '07')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getaugactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '08')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getsepactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '09')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getoctactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '10')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getnovactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '11')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getdecemactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereMonth('transaction_date', '12')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function gettotalactual($name)
    {
        $total = 0;
        $list = DB::table('revenue_record')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->get();
        foreach ($list as $value) {
            $total = $total + $value->total;
        }
        return $total;
    }
    public static function getjanactualexp($name)
    {
        $total = 0;
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '01')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getjanmaractualexp($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', $name)->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', $name)->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', $name)->sum('amount_paid');
        return $janmartotal2actual = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'];
    }
    public static function getaprjunactualexp($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', $name)->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', $name)->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', $name)->sum('amount_paid');
        return $aprjuntotal2actual = $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'];
    }
    public static function getjulsepactualexp($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', $name)->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', $name)->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', $name)->sum('amount_paid');
        return $julseptotal2actual = $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'];
    }
    public static function getoctdecactualexp($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', $name)->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', $name)->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', $name)->sum('amount_paid');
        return $octdectotal2actual = $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
    }
    public static function getfebactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '02')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getmaractualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '03')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getapractualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '04')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getmayactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '05')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getjunactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '06')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getjulactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '07')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getaugactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '08')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getsepactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '09')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getoctactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '10')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getnovactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '11')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function getdecemactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereMonth('transaction_date', '12')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public static function gettotalactualexp($name)
    {
        $total = 0;
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $list = DB::table('expense_record')->whereYear('transaction_date', date('Y'))->where('account_description', $name)->where('uid', $uid)->get();
        foreach ($list as $value) {
            $total = $total + $value->amount_paid;
        }
        return $total;
    }
    public function appointment_email_send(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $mail = $request->email;
        $subject = $request->subject;
        $message = $request->message;
        $emaildetails = array(
            'body'    => $message,
        );
        Mail::send('appointment_emaill_template', $emaildetails, function($message) use ($mail, $subject) {
             $message->to($mail)
             ->subject($subject);
             $message->from('support@mafama.com', Auth::user()->name);
          });
        User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
          $notification  = getNotificationMessage(60);
        $message = $notification;
        $subject = "Appointment Email Send";
         addUserActivity($subject,'add',$notification,$message);
    }
    public function appointmentstepdet(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $now = date('Y-m-d');
        $date = $request->currentyear."-".$request->currentmonth."-".$request->date;
        // $date = '2021-02-02';
        $day =  strtolower(Carbon::parse($date)->format('l'));
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        elseif((Auth::user()->role) == "client"){
            $uemail = Session::get('affemail');
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $details = DB::table('appointment_settings')->where('uemail', $uemail)->first();
        // print_r($details);die();
        $blocks = DB::table('block_appointment_date')->where('uemail', $uemail)->get();
        if(strtotime($date) < strtotime($now)){
            echo "prev_day";
        }
        else{
            if($details->$day == "block"){
                echo "blocked_day";
            }
            else{
                $cnt = 0;
                foreach ($blocks as $value) {
                    if(($date >= $value->startdate) && ($date <= $value->enddate)){
                        $cnt++;
                    }
                }
                if($cnt == 0){
                    echo "on";
                }
                else{
                    echo "blocked_day";
                }
            }
        }
        // echo $date;
    }
    public function appointment_date_availabilityy(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        elseif((Auth::user()->role) == "client"){
            $uemail = Session::get('affemail');
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $main_date = $request->todaysDate;
        $docid = $request->appn_id;
        $day =  strtolower(Carbon::parse($main_date)->format('l'));
        $details = DB::table('appointment_settings')->where('uemail', $uemail)->get();
        if(count($details) > 0){
            $selecteddate = date('Y-m-d', strtotime($request->todaysDate));
            $nowtime = date('H:i', strtotime(now()));
            $today = date('Y-m-d', strtotime(now()));
            // $today = "2021-01-11";
            $seconds = time();
            $rounded_seconds = "";
            $noww = "";
            $slot = $details[0]->receive_time;
            if($slot == 30){
                $rounded_seconds = ceil($seconds / (30 * 60)) * (30 * 60);
                $noww = date('H:i', $rounded_seconds);
            }
            elseif($slot == 60){
                $rounded_seconds = ceil($seconds / (60 * 60)) * (60 * 60);
                $noww = date('H:i', $rounded_seconds);
            }
            $timing = explode(',', $details[0]->$day);
            // $a = explode(':', $timing[0]);
            // $b = explode(':', $timing[1]);
            // $start_time1 = explode(' ', $a[0]);
            // $start_time2 = explode(' ', $a[1]);
            // $finishtime1 = explode(' ', $b[0]);
            // $finishtime2 = explode(' ', $b[1]);
            $availadoctorstart = $timing[0];
            $availadoctorend = $timing[1];
            // die();
            $now = "";
            $endtime = "";
            if ($selecteddate == $today) {
                if($noww >= $availadoctorstart){
                    $now = $noww;
                    $endtime = date("H:i", strtotime('+'.$slot.' minutes', strtotime($now)));
                }
                else {
                    $now = $availadoctorstart;
                    $endtime = date("H:i", strtotime('+'.$slot.' minutes', strtotime($now)));
                }
            }
            else{
                $now = $availadoctorstart;
                $endtime = date("H:i", strtotime('+'.$slot.' minutes', strtotime($now)));
            }
            $timings = DB::table('appointments')->select(['appointment_time','appointment_end'])->where([['appointment_id', '=', $docid],['appointment_date', '=', $selecteddate]])->where('appointments.cstatus', "on")->orderBy('appointment_time','ASC')->get();
            // echo $now.", ".$endtime;
            $amarr = [];
            $pmarr = [];
            if(count($timings) > 0){
                $len = count($timings);
                $cnt = 1;
                for($i = 0; $i < 50; $i++)
                {
                    if($cnt <50){
                        $flag = 0;
                        $starttime = '';
                        $end = '';
                        $f = 0;
                         $big = 0;
                        foreach($timings as $value){
                            if(($now <= $value->appointment_time) && ($endtime <= $value->appointment_time)) {
                                $starttime = $now;
                                $end = $endtime;
                                if($flag == 0){
                                    $flag++;
                                }
                                elseif($flag == $f){
                                    $flag++;
                                }
                            }
                            else{
                                if(($now >= $value->appointment_end)){
                                    $starttime = $now;
                                    $end = $endtime;
                                    $flag++;
                                }
                                else{
                                    $starttime = $now;
                                    $end = $endtime;
                                }
                            }
                            $f++;
                            // print_r($flag);
                        }
                        // die();
                        // print_r($end);die();
                        if(($starttime >= $availadoctorstart) && ($starttime < $availadoctorend) && ($end < $availadoctorend)){
                            if (($flag == $f)) {
                               if($starttime < date('h:i', strtotime("12:00")) ){
                                $var = "<li class='selecttimee' style='float:left; text-align: center; margin: 3px 3px'><label style='font-size: 12px'>".date('h:i', strtotime($starttime))."</lable><br><input class='slottime' type='checkbox' onclick='myFunction(this.id)' id='selecttimee".$i."' name='slot' value='".$starttime."'></li>";
                                array_push($amarr, $var);
                               }
                               else{
                                $var2 = "<li class='selecttimee' style='float:left; text-align: center; margin: 3px 3px'><label style='font-size: 12px'>".date('h:i', strtotime($starttime))."</lable><br><input class='slottime' type='checkbox' onclick='myFunction(this.id)' id='selecttimee".$i."' name='slot' value='".$starttime."'></li>";
                                array_push($pmarr, $var2);
                               }
                                $cnt++;
                            }
                            $now = date("H:i", strtotime($end));
                            $endtime = date("H:i", strtotime('+'.$slot.' minutes', strtotime($now)));
                        }
                    }
                }
                // echo $amarr[0]; die();
                if(count($amarr) > 0){
                    echo '<div class="row margin-bottom-20">
                                    <div class="col-md-1" style="padding: 8px;">
                                        <label style="margin-top:45px;font-size:24px;">AM </label>
                                    </div>
                                    <div class="col-md-11"><ul class="timingul time-table" style="padding: 0; list-style-type: none; width: 100%;">';
                    // foreach($amarr as $value) {
                    //     echo $value;
                    // }
                    for($x = 0; $x < count($amarr); $x++)
                    {
                        echo $amarr[$x];
                    }
                    echo '</ul></div></div>';
                }
                if(count($pmarr) > 0){
                     echo '<div class="row margin-bottom-20">
                                    <div class="col-md-1" style="padding: 8px;">
                                        <label style="margin-top:45px;font-size:24px;">PM </label>
                                    </div>
                                    <div class="col-md-11"><div style="border: 1px solid grey; border-radius: 10px; margin-bottom: 10px;"><ul class="timingul time-table" style="padding: 0; list-style-type: none; width: 100%;">';
                    // foreach($amarr as $value) {
                    //     echo $value;
                    // }
                    for($x = 0; $x < count($pmarr); $x++)
                    {
                        echo $pmarr[$x];
                    }
                    echo '</ul></div></div></div>';
                }
            }
            else{
                for($i=0; $i <= 50; $i++) {
                    $starttime = $now;
                    $end = $endtime;
                    if(($starttime >= $availadoctorstart) && ($starttime < $availadoctorend) && ($end < $availadoctorend)){
                        if ($endtime == "00:00") {
                            break;
                        }
                        if(($starttime >= $availadoctorstart) && ($starttime < $availadoctorend) && ($end < $availadoctorend)){
                            if($starttime < date('h:i', strtotime("12:00")) ){
                                $var = "<li class='selecttimee' style='float:left; text-align: center; margin: 3px 3px'><label style='font-size: 12px'>".date('h:i', strtotime($starttime))."</lable><br><input class='slottime' type='checkbox' onclick='myFunction(this.id)' id='selecttimee".$i."' name='slot' value='".$starttime."'></li>";
                                array_push($amarr, $var);
                               }
                               else{
                                $var2 = "<li class='selecttimee' style='float:left; text-align: center; margin: 3px 3px'><label style='font-size: 12px'>".date('h:i', strtotime($starttime))."</lable><br><input class='slottime' type='checkbox' onclick='myFunction(this.id)' id='selecttimee".$i."' name='slot' value='".$starttime."'></li>";
                                array_push($pmarr, $var2);
                               }
                        }
                        $now = date("H:i", strtotime($end));
                        $endtime = date("H:i", strtotime('+'.$slot.' minutes', strtotime($now)));
                    }
                }
                if(count($amarr) > 0){
                    echo '<div class="row margin-bottom-20">
                                    <div class="col-md-1" style="padding: 8px;">
                                        <label style="margin-top:45px;font-size:24px;">AM </label>
                                    </div>
                                    <div class="col-md-11"><ul class="timingul time-table" style="padding: 0; list-style-type: none; width: 100%;">';
                    // foreach($amarr as $value) {
                    //     echo $value;
                    // }
                    for($x = 0; $x < count($amarr); $x++)
                    {
                        echo $amarr[$x];
                    }
                    echo '</ul></div></div>';
                }
                if(count($pmarr) > 0){
                     echo '<div class="row margin-bottom-20">
                                    <div class="col-md-1" style="padding: 8px;">
                                        <label style="margin-top:45px;font-size:24px;">PM </label>
                                    </div>
                                    <div class="col-md-11"><div style="border: 1px solid grey; border-radius: 10px; margin-bottom: 10px;"><ul class="timingul time-table" style="padding: 0; list-style-type: none; width: 100%;">';
                    // foreach($amarr as $value) {
                    //     echo $value;
                    // }
                    for($x = 0; $x < count($pmarr); $x++)
                    {
                        echo $pmarr[$x];
                    }
                    echo '</ul></div></div></div>';
                }
            }
        }
        else{
            echo "Slot is not available";
        }
    }
    public function appointment_step4_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if($request->app_date == ""){
            return redirect()->back()->with('status',"Please select a date and time slot.");
        }
        if($request->slot == ""){
            return redirect()->back()->with('status',"Please select a time slot.");
        }
        Session::put('appointment_date', $request->app_date);
        Session::put('appointment_time', $request->slot);
        Session::put('appointment_reason', $request->reason);
        Session::put('appointment_id', $request->id);
        return redirect('appointment_step4');
    }
    public function appointment_additional(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        Session::put('additional_comment', $request->additional_comment);
        Session::put('name1', $request->name1);
        Session::put('name2', $request->name2);
        Session::put('name3', $request->name3);
        Session::put('email1', $request->email1);
        Session::put('email2', $request->email2);
        Session::put('email3', $request->email3);
        return redirect('confirm_appointment');
    }
    public function monthlylistappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $new_clients = [];
        $new_appointment_arr = [];
        $change_appointment_arr = [];
        $cancel_appointment_arr = [];
        $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
        $contacts = DB::table('contacts')->get();
        foreach ($months_arr as $valuee) {
            $month_year = $year."-".$valuee;
            $emcnt = 0;
            $emailarr = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            // foreach($contacts as $val){
            //     // print_r($val->email);
            //     $single = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('email1', $val->email)->orWhere('email2', $val->email)->orWhere('email3', $val->email)->first();
            //     if($single != null){
            //         // print_r($single->appointment_date);
            //         $dattt = date('Y-m', strtotime($single->appointment_date));
            //         if($dattt == $month_year){
            //             $emcnt++;
            //         }
            //     }
            //     // foreach($single as $apt){
            //     // if(count($single) > 0){
            //     // }
            // }
            // die();
            // $users = DB::table('appointments')
            //      ->select(DB::raw('count(*) as user_count, email1'))
            //      ->where('email1', '<=', 1)
            //      ->where('created_at', 'like', '%' . $month_year . '%')
            //      ->groupBy('email1')
            //      ->get();
            //      // echo $users;
            //     // print_r($users);die();
            // $cntt = 0;
            // foreach ($users as $value) {
            //     $cntt++;
            // }
            array_push($new_appointment_arr, $emcnt);
            $getclnt = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            array_push($new_clients, $getclnt);
            $getcount = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            array_push($change_appointment_arr, $getcount);
            $getcount2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            array_push($cancel_appointment_arr, $getcount2);
        }
        // return $new_client." ".$new_appointment." ".$change_appointment." ".$cancel_appointment;
        echo '<tr>
                    <td class="fixed-side">New Clients</td>
                    <td>'; if($new_clients[0] != 0){ echo '<a class="new_client_det" id="01nclient123">'; } echo ''.$new_clients[0].'';if($new_clients[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[1] != 0){ echo '<a class="new_client_det" id="02nclient123">'; } echo ''.$new_clients[1].'';if($new_clients[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[2] != 0){ echo '<a class="new_client_det" id="03nclient123">'; } echo ''.$new_clients[2].'';if($new_clients[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[3] != 0){ echo '<a class="new_client_det" id="04nclient123">'; } echo ''.$new_clients[3].'';if($new_clients[3] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[4] != 0){ echo '<a class="new_client_det" id="05nclient123">'; } echo ''.$new_clients[4].'';if($new_clients[4] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[5] != 0){ echo '<a class="new_client_det" id="06nclient123">'; } echo ''.$new_clients[5].'';if($new_clients[5] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[6] != 0){ echo '<a class="new_client_det" id="07nclient123">'; } echo ''.$new_clients[6].'';if($new_clients[6] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[7] != 0){ echo '<a class="new_client_det" id="08nclient123">'; } echo ''.$new_clients[7].'';if($new_clients[7] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[8] != 0){ echo '<a class="new_client_det" id="09nclient123">'; } echo ''.$new_clients[8].'';if($new_clients[8] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[9] != 0){ echo '<a class="new_client_det" id="10nclient123">'; } echo ''.$new_clients[9].'';if($new_clients[9] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[10] != 0){ echo '<a class="new_client_det" id="11nclient123">'; } echo ''.$new_clients[10].'';if($new_clients[10] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[11] != 0){ echo '<a class="new_client_det" id="12nclient123">'; } echo ''.$new_clients[11].'';if($new_clients[11] != 0){ echo '</a>'; } echo '</td>
                    <td class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($new_clients)!= 0){ echo '<a class="total_new_clients" >'; } echo ''.array_sum($new_clients).'';if(array_sum($new_clients) != 0){ echo '</a>'; } echo '</td>

                </tr>';
        echo '<tr>
                <td class="fixed-side">New Appointments</td>
                <td>'; if($new_appointment_arr[0] != 0){ echo '<a class="new_appointment_det" id="01nappointments123">'; } echo ''.$new_appointment_arr[0].'';if($new_appointment_arr[0] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[1] != 0){ echo '<a class="new_appointment_det" id="02nappointments123">'; } echo ''.$new_appointment_arr[1].'';if($new_appointment_arr[1] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[2] != 0){ echo '<a class="new_appointment_det" id="03nappointments123">'; } echo ''.$new_appointment_arr[2].'';if($new_appointment_arr[2] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[3] != 0){ echo '<a class="new_appointment_det" id="04nappointments123">'; } echo ''.$new_appointment_arr[3].'';if($new_appointment_arr[3] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[4] != 0){ echo '<a class="new_appointment_det" id="05nappointments123">'; } echo ''.$new_appointment_arr[4].'';if($new_appointment_arr[4] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[5] != 0){ echo '<a class="new_appointment_det" id="06nappointments123">'; } echo ''.$new_appointment_arr[5].'';if($new_appointment_arr[5] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[6] != 0){ echo '<a class="new_appointment_det" id="07nappointments123">'; } echo ''.$new_appointment_arr[6].'';if($new_appointment_arr[6] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[7] != 0){ echo '<a class="new_appointment_det" id="08nappointments123">'; } echo ''.$new_appointment_arr[7].'';if($new_appointment_arr[7] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[8] != 0){ echo '<a class="new_appointment_det" id="09nappointments123">'; } echo ''.$new_appointment_arr[8].'';if($new_appointment_arr[8] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[9] != 0){ echo '<a class="new_appointment_det" id="10nappointments123">'; } echo ''.$new_appointment_arr[9].'';if($new_appointment_arr[9] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[10] != 0){ echo '<a class="new_appointment_det" id="11nappointments123">'; } echo ''.$new_appointment_arr[10].'';if($new_appointment_arr[10] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[11] != 0){ echo '<a class="new_appointment_det" id="12nappointments123">'; } echo ''.$new_appointment_arr[11].'';if($new_appointment_arr[11] != 0){ echo '</a>'; } echo '</td>
                <td  class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($new_appointment_arr) != 0){ echo '<a class="total_new_appointments" >'; } echo ''.array_sum($new_appointment_arr).'';if(array_sum($new_appointment_arr) != 0){ echo '</a>'; } echo '</td>

            </tr>';
        echo '<tr>
                <td class="fixed-side">Change Appointments</td>
                <td>'; if($change_appointment_arr[0] != 0){ echo '<a class="change_appointment_det" id="01cappointments123">'; } echo ''.$change_appointment_arr[0].'';if($change_appointment_arr[0] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[1] != 0){ echo '<a class="change_appointment_det" id="02cappointments123">'; } echo ''.$change_appointment_arr[1].'';if($change_appointment_arr[1] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[2] != 0){ echo '<a class="change_appointment_det" id="03cappointments123">'; } echo ''.$change_appointment_arr[2].'';if($change_appointment_arr[2] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[3] != 0){ echo '<a class="change_appointment_det" id="04cappointments123">'; } echo ''.$change_appointment_arr[3].'';if($change_appointment_arr[3] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[4] != 0){ echo '<a class="change_appointment_det" id="05cappointments123">'; } echo ''.$change_appointment_arr[4].'';if($change_appointment_arr[4] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[5] != 0){ echo '<a class="change_appointment_det" id="06cappointments123">'; } echo ''.$change_appointment_arr[5].'';if($change_appointment_arr[5] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[6] != 0){ echo '<a class="change_appointment_det" id="07cappointments123">'; } echo ''.$change_appointment_arr[6].'';if($change_appointment_arr[6] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[7] != 0){ echo '<a class="change_appointment_det" id="08cappointments123">'; } echo ''.$change_appointment_arr[7].'';if($change_appointment_arr[7] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[8] != 0){ echo '<a class="change_appointment_det" id="09cappointments123">'; } echo ''.$change_appointment_arr[8].'';if($change_appointment_arr[8] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[9] != 0){ echo '<a class="change_appointment_det" id="10cappointments123">'; } echo ''.$change_appointment_arr[9].'';if($change_appointment_arr[9] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[10] != 0){ echo '<a class="change_appointment_det" id="11cappointments123">'; } echo ''.$change_appointment_arr[10].'';if($change_appointment_arr[10] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[11] != 0){ echo '<a class="change_appointment_det" id="12cappointments123">'; } echo ''.$change_appointment_arr[11].'';if($change_appointment_arr[11] != 0){ echo '</a>'; } echo '</td>
                <td class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($change_appointment_arr)!= 0){ echo '<a class="total_change_appointments" >'; } echo ''.array_sum($change_appointment_arr).'';if(array_sum($change_appointment_arr) != 0){ echo '</a>'; } echo '</td>

            </tr>';
        echo '<tr>
                <td class="fixed-side">Cancel Appointments</td>
                <td>'; if($cancel_appointment_arr[0] != 0){ echo '<a class="cancel_appointment_det" id="01canappointments123">'; } echo ''.$cancel_appointment_arr[0].'';if($cancel_appointment_arr[0] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[1] != 0){ echo '<a class="cancel_appointment_det" id="02canappointments123">'; } echo ''.$cancel_appointment_arr[1].'';if($cancel_appointment_arr[1] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[2] != 0){ echo '<a class="cancel_appointment_det" id="03canappointments123">'; } echo ''.$cancel_appointment_arr[2].'';if($cancel_appointment_arr[2] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[3] != 0){ echo '<a class="cancel_appointment_det" id="04canappointments123">'; } echo ''.$cancel_appointment_arr[3].'';if($cancel_appointment_arr[3] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[4] != 0){ echo '<a class="cancel_appointment_det" id="05canappointments123">'; } echo ''.$cancel_appointment_arr[4].'';if($cancel_appointment_arr[4] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[5] != 0){ echo '<a class="cancel_appointment_det" id="06canappointments123">'; } echo ''.$cancel_appointment_arr[5].'';if($cancel_appointment_arr[5] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[6] != 0){ echo '<a class="cancel_appointment_det" id="07canappointments123">'; } echo ''.$cancel_appointment_arr[6].'';if($cancel_appointment_arr[6] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[7] != 0){ echo '<a class="cancel_appointment_det" id="08canappointments123">'; } echo ''.$cancel_appointment_arr[7].'';if($cancel_appointment_arr[7] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[8] != 0){ echo '<a class="cancel_appointment_det" id="09canappointments123">'; } echo ''.$cancel_appointment_arr[8].'';if($cancel_appointment_arr[8] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[9] != 0){ echo '<a class="cancel_appointment_det" id="10canappointments123">'; } echo ''.$cancel_appointment_arr[9].'';if($cancel_appointment_arr[9] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[10] != 0){ echo '<a class="cancel_appointment_det" id="11canappointments123">'; } echo ''.$cancel_appointment_arr[10].'';if($cancel_appointment_arr[10] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[11] != 0){ echo '<a class="cancel_appointment_det" id="12canappointments123">'; } echo ''.$cancel_appointment_arr[11].'';if($cancel_appointment_arr[11] != 0){ echo '</a>'; } echo '</td>
                <td class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($cancel_appointment_arr)!= 0){ echo '<a class="total_cancel_appointments" >'; } echo ''.array_sum($cancel_appointment_arr).'';if(array_sum($cancel_appointment_arr) != 0){ echo '</a>'; } echo '</td>

            </tr>';
    }
    public function monthlyrevenuelistappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $revenue = DB::table('revenue_record_update')->where('uid', $uid)->groupBy('account_description')->get();
        // print_r($revenue);die();
        foreach($revenue as $value){
            $change_revenue_arr = (array) null;
            $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
            foreach ($months_arr as $valuee) {
                $month_year = $year."-".$valuee;
                $getcount = DB::table('revenue_record_update')->where('updated_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_description)->count();
                array_push($change_revenue_arr, $getcount);
            }
            echo '<tr>
                    <td class="fixed-side">'.$value->account_description.'</td>
                    <td>'; if($change_revenue_arr[0] != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[0].'';if($change_revenue_arr[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[1] != 0){ echo '<a class="revenue_det" id="02n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[1].'';if($change_revenue_arr[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[2] != 0){ echo '<a class="revenue_det" id="03n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[2].'';if($change_revenue_arr[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[3] != 0){ echo '<a class="revenue_det" id="04n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[3].'';if($change_revenue_arr[3] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[4] != 0){ echo '<a class="revenue_det" id="05n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[4].'';if($change_revenue_arr[4] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[5] != 0){ echo '<a class="revenue_det" id="06n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[5].'';if($change_revenue_arr[5] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[6] != 0){ echo '<a class="revenue_det" id="07n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[6].'';if($change_revenue_arr[6] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[7] != 0){ echo '<a class="revenue_det" id="08n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[7].'';if($change_revenue_arr[7] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[8] != 0){ echo '<a class="revenue_det" id="09n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[8].'';if($change_revenue_arr[8] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[9] != 0){ echo '<a class="revenue_det" id="10n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[9].'';if($change_revenue_arr[9] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[10] != 0){ echo '<a class="revenue_det" id="11n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[10].'';if($change_revenue_arr[10] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[11] != 0){ echo '<a class="revenue_det" id="12n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[11].'';if($change_revenue_arr[11] != 0){ echo '</a>'; } echo '</td>
                    <td class="total-td">'; if(array_sum($change_revenue_arr) != 0){ echo '<a class="total_revenue_det" id="13n123'.$value->account_description.'">'; } echo ''.array_sum($change_revenue_arr).'';if(array_sum($change_revenue_arr) != 0){ echo '</a>'; } echo '</td>
                </tr>';
            // unset($change_revenue_arr);
        }
    }
    public function monthlyexpenseslistappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $revenue = DB::table('expense_record_update')->where('uid', $uid)->groupBy('account_description')->get();
        // print_r($revenue);die();
        foreach($revenue as $value){
            $change_revenue_arr = (array) null;
            $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
            foreach ($months_arr as $valuee) {
                $month_year = $year."-".$valuee;
                $getcount = DB::table('expense_record_update')->where('updated_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_description)->count();
                array_push($change_revenue_arr, $getcount);
            }
            echo '<tr>
                    <td class="fixed-side">'.$value->account_description.'</td>
                    <td>'; if($change_revenue_arr[0] != 0){ echo '<a class="expense_det" id="01n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[0].'';if($change_revenue_arr[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[1] != 0){ echo '<a class="expense_det" id="02n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[1].'';if($change_revenue_arr[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[2] != 0){ echo '<a class="expense_det" id="03n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[2].'';if($change_revenue_arr[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[3] != 0){ echo '<a class="expense_det" id="04n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[3].'';if($change_revenue_arr[3] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[4] != 0){ echo '<a class="expense_det" id="05n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[4].'';if($change_revenue_arr[4] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[5] != 0){ echo '<a class="expense_det" id="06n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[5].'';if($change_revenue_arr[5] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[6] != 0){ echo '<a class="expense_det" id="07n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[6].'';if($change_revenue_arr[6] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[7] != 0){ echo '<a class="expense_det" id="08n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[7].'';if($change_revenue_arr[7] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[8] != 0){ echo '<a class="expense_det" id="09n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[8].'';if($change_revenue_arr[8] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[9] != 0){ echo '<a class="expense_det" id="10n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[9].'';if($change_revenue_arr[9] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[10] != 0){ echo '<a class="expense_det" id="11n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[10].'';if($change_revenue_arr[10] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[11] != 0){ echo '<a class="expense_det" id="12n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[11].'';if($change_revenue_arr[11] != 0){ echo '</a>'; } echo '</td>
                     <td class="total-td">'; if(array_sum($change_revenue_arr) != 0){ echo '<a class="total_expense_det" id="13n123'.$value->account_description.'">'; } echo ''.array_sum($change_revenue_arr).'';if(array_sum($change_revenue_arr) != 0){ echo '</a>'; } echo '</td>

                </tr>';
            // unset($change_revenue_arr);
        }
    }
    public function monthlyassetlistappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $revenue = DB::table('asset_record_update')->where('uid', $uid)->groupBy('description')->get();
        // print_r($revenue);die();
        foreach($revenue as $value){
            $change_revenue_arr = (array) null;
            $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
            foreach ($months_arr as $valuee) {
                $month_year = $year."-".$valuee;
                $getcount = DB::table('asset_record_update')->where('updated_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('description', $value->description)->count();
                array_push($change_revenue_arr, $getcount);
            }
            echo '<tr>
                    <td class="fixed-side">'.$value->description.'</td>
                    <td>'; if($change_revenue_arr[0] != 0){ echo '<a class="asset_det" id="01n123'.$value->description.'">'; } echo ''.$change_revenue_arr[0].'';if($change_revenue_arr[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[1] != 0){ echo '<a class="asset_det" id="02n123'.$value->description.'">'; } echo ''.$change_revenue_arr[1].'';if($change_revenue_arr[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[2] != 0){ echo '<a class="asset_det" id="03n123'.$value->description.'">'; } echo ''.$change_revenue_arr[2].'';if($change_revenue_arr[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[3] != 0){ echo '<a class="asset_det" id="04n123'.$value->description.'">'; } echo ''.$change_revenue_arr[3].'';if($change_revenue_arr[3] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[4] != 0){ echo '<a class="asset_det" id="05n123'.$value->description.'">'; } echo ''.$change_revenue_arr[4].'';if($change_revenue_arr[4] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[5] != 0){ echo '<a class="asset_det" id="06n123'.$value->description.'">'; } echo ''.$change_revenue_arr[5].'';if($change_revenue_arr[5] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[6] != 0){ echo '<a class="asset_det" id="07n123'.$value->description.'">'; } echo ''.$change_revenue_arr[6].'';if($change_revenue_arr[6] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[7] != 0){ echo '<a class="asset_det" id="08n123'.$value->description.'">'; } echo ''.$change_revenue_arr[7].'';if($change_revenue_arr[7] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[8] != 0){ echo '<a class="asset_det" id="09n123'.$value->description.'">'; } echo ''.$change_revenue_arr[8].'';if($change_revenue_arr[8] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[9] != 0){ echo '<a class="asset_det" id="10n123'.$value->description.'">'; } echo ''.$change_revenue_arr[9].'';if($change_revenue_arr[9] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[10] != 0){ echo '<a class="asset_det" id="11n123'.$value->description.'">'; } echo ''.$change_revenue_arr[10].'';if($change_revenue_arr[10] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[11] != 0){ echo '<a class="asset_det" id="12n123'.$value->description.'">'; } echo ''.$change_revenue_arr[11].'';if($change_revenue_arr[11] != 0){ echo '</a>'; } echo '</td>
                    <td class="total-td">'; if(array_sum($change_revenue_arr) != 0){ echo '<a class="total_asset_det" id="13n123'.$value->description.'">'; } echo ''.array_sum($change_revenue_arr).'';if(array_sum($change_revenue_arr) != 0){ echo '</a>'; } echo '</td>

                </tr>';
            // unset($change_revenue_arr);
        }
    }
    public function monthlyrevenuelistappointmentt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $revenue = DB::table('revenue_record_delete')->where('uid', $uid)->groupBy('account_description')->get();
        // print_r($revenue);die();
        foreach($revenue as $value){
            $change_revenue_arr = (array) null;
            $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
            foreach ($months_arr as $valuee) {
                $month_year = $year."-".$valuee;
                $getcount = DB::table('revenue_record_delete')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_description)->count();
                array_push($change_revenue_arr, $getcount);
            }
            echo '<tr>
                    <td class="fixed-side">'.$value->account_description.'</td>
                    <td>'; if($change_revenue_arr[0] != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[0].'';if($change_revenue_arr[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[1] != 0){ echo '<a class="revenue_det" id="02n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[1].'';if($change_revenue_arr[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[2] != 0){ echo '<a class="revenue_det" id="03n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[2].'';if($change_revenue_arr[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[3] != 0){ echo '<a class="revenue_det" id="04n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[3].'';if($change_revenue_arr[3] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[4] != 0){ echo '<a class="revenue_det" id="05n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[4].'';if($change_revenue_arr[4] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[5] != 0){ echo '<a class="revenue_det" id="06n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[5].'';if($change_revenue_arr[5] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[6] != 0){ echo '<a class="revenue_det" id="07n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[6].'';if($change_revenue_arr[6] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[7] != 0){ echo '<a class="revenue_det" id="08n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[7].'';if($change_revenue_arr[7] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[8] != 0){ echo '<a class="revenue_det" id="09n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[8].'';if($change_revenue_arr[8] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[9] != 0){ echo '<a class="revenue_det" id="10n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[9].'';if($change_revenue_arr[9] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[10] != 0){ echo '<a class="revenue_det" id="11n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[10].'';if($change_revenue_arr[10] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[11] != 0){ echo '<a class="revenue_det" id="12n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[11].'';if($change_revenue_arr[11] != 0){ echo '</a>'; } echo '</td>

                    <td class="total-td">'; if(array_sum($change_revenue_arr) != 0){ echo '<a class="total_revenue_delete" id="13n123'.$value->account_description.'">'; } echo ''.array_sum($change_revenue_arr).'';if(array_sum($change_revenue_arr) != 0){ echo '</a>'; } echo '</td>
                </tr>';
            // unset($change_revenue_arr);
        }
    }
    public function monthlyexpenseslistappointmentt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $revenue = DB::table('expense_record_delete')->where('uid', $uid)->groupBy('account_description')->get();
        // print_r($revenue);die();
        foreach($revenue as $value){
            $change_revenue_arr = (array) null;
            $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
            foreach ($months_arr as $valuee) {
                $month_year = $year."-".$valuee;
                $getcount = DB::table('expense_record_delete')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_description)->count();
                array_push($change_revenue_arr, $getcount);
            }
            echo '<tr>
                    <td class="fixed-side">'.$value->account_description.'</td>
                    <td>'; if($change_revenue_arr[0] != 0){ echo '<a class="expense_det" id="01n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[0].'';if($change_revenue_arr[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[1] != 0){ echo '<a class="expense_det" id="02n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[1].'';if($change_revenue_arr[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[2] != 0){ echo '<a class="expense_det" id="03n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[2].'';if($change_revenue_arr[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[3] != 0){ echo '<a class="expense_det" id="04n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[3].'';if($change_revenue_arr[3] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[4] != 0){ echo '<a class="expense_det" id="05n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[4].'';if($change_revenue_arr[4] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[5] != 0){ echo '<a class="expense_det" id="06n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[5].'';if($change_revenue_arr[5] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[6] != 0){ echo '<a class="expense_det" id="07n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[6].'';if($change_revenue_arr[6] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[7] != 0){ echo '<a class="expense_det" id="08n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[7].'';if($change_revenue_arr[7] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[8] != 0){ echo '<a class="expense_det" id="09n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[8].'';if($change_revenue_arr[8] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[9] != 0){ echo '<a class="expense_det" id="10n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[9].'';if($change_revenue_arr[9] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[10] != 0){ echo '<a class="expense_det" id="11n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[10].'';if($change_revenue_arr[10] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[11] != 0){ echo '<a class="expense_det" id="12n123'.$value->account_description.'">'; } echo ''.$change_revenue_arr[11].'';if($change_revenue_arr[11] != 0){ echo '</a>'; } echo '</td>

                     <td class="total-td">'; if(array_sum($change_revenue_arr) != 0){ echo '<a class="total_expense_delete" id="13n123'.$value->account_description.'">'; } echo ''.array_sum($change_revenue_arr).'';if(array_sum($change_revenue_arr) != 0){ echo '</a>'; } echo '</td>
                </tr>';
            // unset($change_revenue_arr);
        }
    }
    public function monthlyassetlistappointmentt(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $revenue = DB::table('asset_record_delete')->where('uid', $uid)->groupBy('description')->get();
        // print_r($revenue);die();
        foreach($revenue as $value){
            $change_revenue_arr = (array) null;
            $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
            foreach ($months_arr as $valuee) {
                $month_year = $year."-".$valuee;
                $getcount = DB::table('asset_record_delete')->where('updated_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('description', $value->description)->count();
                array_push($change_revenue_arr, $getcount);
            }
            echo '<tr>
                    <td class="fixed-side">'.$value->description.'</td>
                    <td>'; if($change_revenue_arr[0] != 0){ echo '<a class="asset_det" id="01n123'.$value->description.'">'; } echo ''.$change_revenue_arr[0].'';if($change_revenue_arr[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[1] != 0){ echo '<a class="asset_det" id="02n123'.$value->description.'">'; } echo ''.$change_revenue_arr[1].'';if($change_revenue_arr[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[2] != 0){ echo '<a class="asset_det" id="03n123'.$value->description.'">'; } echo ''.$change_revenue_arr[2].'';if($change_revenue_arr[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[3] != 0){ echo '<a class="asset_det" id="04n123'.$value->description.'">'; } echo ''.$change_revenue_arr[3].'';if($change_revenue_arr[3] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[4] != 0){ echo '<a class="asset_det" id="05n123'.$value->description.'">'; } echo ''.$change_revenue_arr[4].'';if($change_revenue_arr[4] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[5] != 0){ echo '<a class="asset_det" id="06n123'.$value->description.'">'; } echo ''.$change_revenue_arr[5].'';if($change_revenue_arr[5] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[6] != 0){ echo '<a class="asset_det" id="07n123'.$value->description.'">'; } echo ''.$change_revenue_arr[6].'';if($change_revenue_arr[6] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[7] != 0){ echo '<a class="asset_det" id="08n123'.$value->description.'">'; } echo ''.$change_revenue_arr[7].'';if($change_revenue_arr[7] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[8] != 0){ echo '<a class="asset_det" id="09n123'.$value->description.'">'; } echo ''.$change_revenue_arr[8].'';if($change_revenue_arr[8] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[9] != 0){ echo '<a class="asset_det" id="10n123'.$value->description.'">'; } echo ''.$change_revenue_arr[9].'';if($change_revenue_arr[9] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[10] != 0){ echo '<a class="asset_det" id="11n123'.$value->description.'">'; } echo ''.$change_revenue_arr[10].'';if($change_revenue_arr[10] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($change_revenue_arr[11] != 0){ echo '<a class="asset_det" id="12n123'.$value->description.'">'; } echo ''.$change_revenue_arr[11].'';if($change_revenue_arr[11] != 0){ echo '</a>'; } echo '</td>

                    <td class="total-td">'; if(array_sum($change_revenue_arr) != 0){ echo '<a class="total_asset_delete" id="13n123'.$value->description.'">'; } echo ''.array_sum($change_revenue_arr).'';if(array_sum($change_revenue_arr) != 0){ echo '</a>'; } echo '</td>
                </tr>';
            // unset($change_revenue_arr);
        }
    }
    public function quarterlylistappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $new_appointment_arr = [];
        $new_clients = [];
        $change_appointment_arr = [];
        $cancel_appointment_arr = [];
        $months_arr = ['01','04','07','10'];
        foreach ($months_arr as $valuee) {
            $month_year = $year."-".$valuee;
            $month_year1 = $year."-".str_pad(($valuee +1), 2, '0', STR_PAD_LEFT);
            $month_year2 = $year."-".str_pad(($valuee +2), 2, '0', STR_PAD_LEFT);
            // $emcnt = 0;
            // $emailarr = [];
            // $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('uid', $uid)->where('appointment_date', 'like', '%' . $month_year . '%')->orWhere('appointment_date', 'like', '%' . $month_year1 . '%')->orWhere('appointment_date', 'like', '%' . $month_year2 . '%')->groupBy('email1','email2','email3')->get();
            // foreach ($apptn as $aptn) {
            //     if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
            //         array_push($emailarr, $aptn->email1);
            //         $emcnt++;
            //     }
            //     if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
            //         array_push($emailarr, $aptn->email2);
            //         $emcnt++;
            //     }
            //     if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
            //         array_push($emailarr, $aptn->email3);
            //         $emcnt++;
            //     }
            // }
            // array_push($new_appointment_arr, $emcnt);
            $emcnt = 0;
            $emcnt2  = 0;
            $emcnt3 = 0;
            $emailarr = [];
            $emailarr2 = [];
            $emailarr3 = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            $apptn2 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn2 as $aptn2) {
                if(($aptn2->email1 != "") && (in_array($aptn2->email1, $emailarr2) == false)){
                    array_push($emailarr2, $aptn2->email1);
                    $emcnt2++;
                }
                if(($aptn2->email2 != "") && (in_array($aptn2->email2, $emailarr2) == false)){
                    array_push($emailarr2, $aptn2->email2);
                    $emcnt2++;
                }
                if(($aptn2->email3 != "") && (in_array($aptn2->email3, $emailarr2) == false)){
                    array_push($emailarr2, $aptn2->email3);
                    $emcnt2++;
                }
            }
            $apptn3 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn3 as $aptn3) {
                if(($aptn3->email1 != "") && (in_array($aptn3->email1, $emailarr3) == false)){
                    array_push($emailarr3, $aptn3->email1);
                    $emcnt3++;
                }
                if(($aptn3->email2 != "") && (in_array($aptn3->email2, $emailarr3) == false)){
                    array_push($emailarr3, $aptn3->email2);
                    $emcnt3++;
                }
                if(($aptn3->email3 != "") && (in_array($aptn3->email3, $emailarr3) == false)){
                    array_push($emailarr3, $aptn3->email3);
                    $emcnt3++;
                }
            }
            $new_appointmentt = $emcnt + $emcnt2 + $emcnt3;
            array_push($new_appointment_arr, $new_appointmentt);
            $getclnt1 = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getclnt2 = ClientAppointmentList::where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
            $getclnt3 = ClientAppointmentList::where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getclnt = $getclnt1 + $getclnt2 + $getclnt3;
            array_push($new_clients, $getclnt);
            $getcount1 = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getcount2 = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
            $getcount3 = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getcount = $getcount1 + $getcount2 + $getcount3;
            array_push($change_appointment_arr, $getcount);
            $getcountt1 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getcountt2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
            $getcountt3 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getcountt = $getcountt1 + $getcountt2 + $getcountt3;
            array_push($cancel_appointment_arr, $getcountt);
        }
        echo '<tr>
                    <td class="fixed-side">New Clients</td>
                    <td>'; if($new_clients[0] != 0){ echo '<a class="new_client_detq" id="01qnclient123">'; } echo ''.$new_clients[0].'';if($new_clients[0] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[1] != 0){ echo '<a class="new_client_detq" id="04qnclient123">'; } echo ''.$new_clients[1].'';if($new_clients[1] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[2] != 0){ echo '<a class="new_client_detq" id="07qnclient123">'; } echo ''.$new_clients[2].'';if($new_clients[2] != 0){ echo '</a>'; } echo '</td>
                    <td>'; if($new_clients[3] != 0){ echo '<a class="new_client_detq" id="10qnclient123">'; } echo ''.$new_clients[3].'';if($new_clients[3] != 0){ echo '</a>'; } echo '</td>

                    <td class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($new_clients)!= 0){ echo '<a class="total_new_clients" >'; } echo ''.array_sum($new_clients).'';if(array_sum($new_clients) != 0){ echo '</a>'; } echo '</td>
                </tr>';
        echo '<tr>
                <td class="fixed-side">New Appointments</td>
                <td>'; if($new_appointment_arr[0] != 0){ echo '<a class="new_appointment_detq" id="01qnappointments123">'; } echo ''.$new_appointment_arr[0].'';if($new_appointment_arr[0] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[1] != 0){ echo '<a class="new_appointment_detq" id="04qnappointments123">'; } echo ''.$new_appointment_arr[1].'';if($new_appointment_arr[1] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[2] != 0){ echo '<a class="new_appointment_detq" id="07qnappointments123">'; } echo ''.$new_appointment_arr[2].'';if($new_appointment_arr[2] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[3] != 0){ echo '<a class="new_appointment_detq" id="10qnappointments123">'; } echo ''.$new_appointment_arr[3].'';if($new_appointment_arr[3] != 0){ echo '</a>'; } echo '</td>

                <td  class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($new_appointment_arr) != 0){ echo '<a class="total_new_appointments" >'; } echo ''.array_sum($new_appointment_arr).'';if(array_sum($new_appointment_arr) != 0){ echo '</a>'; } echo '</td>
            </tr>';
        echo '<tr>
                <td class="fixed-side">Change Appointments</td>
                <td>'; if($change_appointment_arr[0] != 0){ echo '<a class="change_appointment_detq" id="01qcappointments123">'; } echo ''.$change_appointment_arr[0].'';if($change_appointment_arr[0] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[1] != 0){ echo '<a class="change_appointment_detq" id="04qcappointments123">'; } echo ''.$change_appointment_arr[1].'';if($change_appointment_arr[1] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[2] != 0){ echo '<a class="change_appointment_detq" id="07qcappointments123">'; } echo ''.$change_appointment_arr[2].'';if($change_appointment_arr[2] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($change_appointment_arr[3] != 0){ echo '<a class="change_appointment_detq" id="10qcappointments123">'; } echo ''.$change_appointment_arr[3].'';if($change_appointment_arr[3] != 0){ echo '</a>'; } echo '</td>

                <td class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($change_appointment_arr)!= 0){ echo '<a class="total_change_appointments" >'; } echo ''.array_sum($change_appointment_arr).'';if(array_sum($change_appointment_arr) != 0){ echo '</a>'; } echo '</td>
            </tr>';
        echo '<tr>
                <td class="fixed-side">Cancel Appointments</td>
                <td>'; if($cancel_appointment_arr[0] != 0){ echo '<a class="cancel_appointment_detq" id="01qcanappointments123">'; } echo ''.$cancel_appointment_arr[0].'';if($cancel_appointment_arr[0] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[1] != 0){ echo '<a class="cancel_appointment_detq" id="04qcanappointments123">'; } echo ''.$cancel_appointment_arr[1].'';if($cancel_appointment_arr[1] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[2] != 0){ echo '<a class="cancel_appointment_detq" id="07qcanappointments123">'; } echo ''.$cancel_appointment_arr[2].'';if($cancel_appointment_arr[2] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($cancel_appointment_arr[3] != 0){ echo '<a class="cancel_appointment_detq" id="10qcanappointments123">'; } echo ''.$cancel_appointment_arr[3].'';if($cancel_appointment_arr[3] != 0){ echo '</a>'; } echo '</td>

                <td class="total-td" style="color: rgb(218, 41, 28);">'; if(array_sum($cancel_appointment_arr)!= 0){ echo '<a class="total_cancel_appointments" >'; } echo ''.array_sum($cancel_appointment_arr).'';if(array_sum($cancel_appointment_arr) != 0){ echo '</a>'; } echo '</td>
            </tr>';
    }
    public function new_clients_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $clients = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }

 public function total_clients_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;

        $month_year = $year;
        $clients = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }




    public function new_appointment_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $emailarr = [];
        $idarr = [];
        $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
        foreach ($apptn as $aptn) {
            if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                array_push($emailarr, $aptn->email1);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
            if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                array_push($emailarr, $aptn->email2);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
            if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                array_push($emailarr, $aptn->email3);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
        }
        $clients = ClientAppointmentList::whereIn('id', $idarr)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
        // echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
        //         <thead>
        //             <tr>
        //                 <th>Client Name</th>
        //                 <th>Client Email</th>
        //                 <th>Appointment Date</th>
        //                 <th>Appointment Time</th>
        //                 <th>Email1</th>
        //                 <th>Name1</th>
        //                 <th>Email2</th>
        //                 <th>Name2</th>
        //                 <th>Email3</th>
        //                 <th>Name3</th>
        //             </tr>
        //         </thead><tbody>';
        // foreach ($clients as $value) {
        //     echo '<tr class="odd gradeX">
        //                 <td>'.$value->first_name.' '.$value->last_name.'</td>
        //                 <td>'.$value->email.'</td>
        //                 <td>'.date('d M Y', strtotime($value->appointment_date)).'</td>
        //                 <td>'.$value->appointment_time.'</td>
        //                 <td>'.$value->email1.'</td>
        //                 <td>'.$value->name1.'</td>
        //                 <td>'.$value->email2.'</td>
        //                 <td>'.$value->name2.'</td>
        //                 <td>'.$value->email3.'</td>
        //                 <td>'.$value->name3.'</td>
        //                 </tr>';
        // }
        // echo '</tbody></table>';
    }





    public function total_new_appointment_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;

        $month_year = $year;
        $emailarr = [];
        $idarr = [];
        $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
        foreach ($apptn as $aptn) {
            if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                array_push($emailarr, $aptn->email1);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
            if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                array_push($emailarr, $aptn->email2);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
            if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                array_push($emailarr, $aptn->email3);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
        }
        $clients = ClientAppointmentList::whereIn('id', $idarr)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';

    }



    public function change_appointment_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $clients = DB::table('change_appointment')->join('client_appointment_lists', 'change_appointment.appointment_id', 'client_appointment_lists.id')->where('change_appointment.created_at', 'like', '%' . $month_year . '%')->where('change_appointment.uid', Auth::id())->groupBy('change_appointment.appointment_id')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }



    public function total_change_appointment_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $year = $request->year;

        $month_year = $year;
        $clients = DB::table('change_appointment')->join('client_appointment_lists', 'change_appointment.appointment_id', 'client_appointment_lists.id')->where('change_appointment.created_at', 'like', '%' . $month_year . '%')->where('change_appointment.uid', Auth::id())->groupBy('change_appointment.appointment_id')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }


    public function cancel_appointment_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $clients = DB::table('cancel_appointment')->join('client_appointment_lists', 'cancel_appointment.appointment_id', 'client_appointment_lists.id')->where('cancel_appointment.created_at', 'like', '%' . $month_year . '%')->where('cancel_appointment.uid', Auth::id())->groupBy('cancel_appointment.appointment_id')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }

    public function total_cancel_appointment_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $year = $request->year;

        $month_year = $year;
        $clients = DB::table('cancel_appointment')->join('client_appointment_lists', 'cancel_appointment.appointment_id', 'client_appointment_lists.id')->where('cancel_appointment.created_at', 'like', '%' . $month_year . '%')->where('cancel_appointment.uid', Auth::id())->groupBy('cancel_appointment.appointment_id')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }

    public function new_clients_detailsq(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $clients = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->orWhere('created_at', 'like', '%' . $month_year1 . '%')->orWhere('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }

    public function new_appointment_detailsq(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $emailarr = [];
        $idarr = [];
        $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->orWhere('appointment_date', 'like', '%' . $month_year1 . '%')->orWhere('appointment_date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
        foreach ($apptn as $aptn) {
            if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                array_push($emailarr, $aptn->email1);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
            if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                array_push($emailarr, $aptn->email2);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
            if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                array_push($emailarr, $aptn->email3);
                if(in_array($aptn->id, $idarr) == false){
                    array_push($idarr, $aptn->appointment_id);
                }
            }
        }
        $clients = ClientAppointmentList::whereIn('id', $idarr)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
        // echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
        //         <thead>
        //             <tr>
        //                 <th>Client Name</th>
        //                 <th>Client Email</th>
        //                 <th>Appointment Date</th>
        //                 <th>Appointment Time</th>
        //                 <th>Email1</th>
        //                 <th>Name1</th>
        //                 <th>Email2</th>
        //                 <th>Name2</th>
        //                 <th>Email3</th>
        //                 <th>Name3</th>
        //             </tr>
        //         </thead><tbody>';
        // foreach ($clients as $value) {
        //     echo '<tr class="odd gradeX">
        //                 <td>'.$value->first_name.' '.$value->last_name.'</td>
        //                 <td>'.$value->email.'</td>
        //                 <td>'.date('d M Y', strtotime($value->appointment_date)).'</td>
        //                 <td>'.$value->appointment_time.'</td>
        //                 <td>'.$value->email1.'</td>
        //                 <td>'.$value->name1.'</td>
        //                 <td>'.$value->email2.'</td>
        //                 <td>'.$value->name2.'</td>
        //                 <td>'.$value->email3.'</td>
        //                 <td>'.$value->name3.'</td>
        //                 </tr>';
        // }
        // echo '</tbody></table>';
    }
    public function change_appointment_detailsq(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $clients = DB::table('change_appointment')->join('client_appointment_lists', 'change_appointment.appointment_id', 'client_appointment_lists.id')->where('change_appointment.created_at', 'like', '%' . $month_year . '%')->orWhere('change_appointment.created_at', 'like', '%' . $month_year1 . '%')->orWhere('change_appointment.created_at', 'like', '%' . $month_year2 . '%')->where('change_appointment.uid', Auth::id())->groupBy('change_appointment.appointment_id')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function cancel_appointment_detailsq(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $year = $request->year;
        $month = $request->month;
        $month_year = $year."-".$month;
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $clients = DB::table('cancel_appointment')->join('client_appointment_lists', 'cancel_appointment.appointment_id', 'client_appointment_lists.id')->where('cancel_appointment.created_at', 'like', '%' . $month_year . '%')->orWhere('change_appointment.created_at', 'like', '%' . $month_year1 . '%')->orWhere('change_appointment.created_at', 'like', '%' . $month_year2 . '%')->where('cancel_appointment.uid', Auth::id())->groupBy('cancel_appointment.appointment_id')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>D. O. B</th>
                        <th>Phone</th>
                        <th>Religion</th>
                    </tr>
                </thead><tbody>';
        foreach ($clients as $value) {
            echo '<tr class="odd gradeX">
                        <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->first_name.' '.$value->last_name.'</td>
                        <td>'.$value->email.'</td>
                        <td>'.date('d M Y', strtotime($value->dob)).'</td>
                        <td>'.$value->cell_phone.'</td>
                        <td>'.$value->religion.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function record_revenue_month_details(Request $request)
    {
        // //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $account_description = $request->account_description;
        $revenues = DB::table('revenue_record_update')->where('account_description', $account_description)->whereYear('updated_at', '=', $year)->whereMonth('updated_at', '=', $month)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $rev = DB::table('revenue_record')->where('id', $value->rev_id)->first();
                $phone = "";
                $user_name = "";
                $userdet = DB::table('users')->where('email', $value->user_email)->first();
                if($userdet->role == "affiliate"){
                    $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                    $phone = $alldet->business_telephone;
                    $user_name = $alldet->first_name." ".$alldet->last_name;
                }
                elseif($userdet->role == "affiliate_user")
                {
                    $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                    $phone = $alldet->cellphone;
                    $user_name = $alldet->first_name." ".$alldet->last_name;
                }
                echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p>Record is created on <b>'.date('d F Y', strtotime($rev->created_at)).'</b></p><p>Updated Invoice Date for <b>'.$value->account_description.'</b> is <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for updating: '.$value->reason.'</p>';
              if(($value->transaction_date) != ($rev->transaction_date)){
                    echo '<p>Transaction date has been changed from <b>'.date('d F Y', strtotime($value->transaction_date))."</b> to <b>".date('d F Y', strtotime($rev->transaction_date)).'</b>.</p>';
                }
                if(($value->account_description) != ($rev->account_description)){
                    echo '<p>Account has been changed from <b>'.$value->account_description."</b> to <b>".$rev->account_description.'</b>.</p>';
                }
                if(($value->bill) != ($rev->bill)){
                    echo '<p>Bill amount has been changed from <b>'.$value->bill."</b> to <b>".$rev->bill.'</b>.</p>';
                }
                if(($value->tax) != ($rev->tax)){
                    echo '<p>Tax has been changed from <b>'.$value->tax."</b> to <b>".$rev->tax.'</b>.</p>';
                }
                 if(($value->shipping) != ($rev->shipping)){
                    echo '<p>Shipping has been changed from <b>'.$value->shipping."</b> to <b>".$rev->shipping.'</b>.</p>';
                }
                 if(($value->amount_paid) != ($rev->amount_paid)){
                    echo '<p>Paid amount has been changed from <b>'.$value->amount_paid."</b> to <b>".$rev->amount_paid.'</b>.</p>';
                }
                echo '<p></p></td></tr>';
                // echo '<table class="table table-bordered" style="width:100%"><thead><tr><th>Client Name</th><th>Client Email</th><th>Client Phone</th><th>Recording Date</th></tr></thead><tbody><tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date('d F Y', strtotime($value->updated_at)).'</td></tr><td colspan="4"><p>Record is created on <b>'.date('d F Y', strtotime($rev->created_at)).'</b></p><p>Updated Invoice Date for <b>'.$value->account_description.'</b> is <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for updating: '.$value->reason.'</p>';
                // if(($value->total) != ($rev->total)){
                //     echo '<p>Amount has been changed from <b>'.$rev->total."</b> to <b>".$value->total.'</b>.</p>';
                // }
                // echo '<p></p></td></tr></tbody></table>';
            // }
        }
        echo '</tbody></table>';
        // echo '<b>Total Revenue for this month is </b>';
    }

     public function total_record_revenue_month_details(Request $request)
    {
        // //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $account_description = $request->account_description;
        $revenues = DB::table('revenue_record_update')->where('account_description', $account_description)->whereYear('updated_at', '=', $year)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $rev = DB::table('revenue_record')->where('id', $value->rev_id)->first();
                $phone = "";
                $user_name = "";
                $userdet = DB::table('users')->where('email', $value->user_email)->first();
                if($userdet->role == "affiliate"){
                    $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                    $phone = $alldet->business_telephone;
                    $user_name = $alldet->first_name." ".$alldet->last_name;
                }
                elseif($userdet->role == "affiliate_user")
                {
                    $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                    $phone = $alldet->cellphone;
                    $user_name = $alldet->first_name." ".$alldet->last_name;
                }
                echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p>Record is created on <b>'.date('d F Y', strtotime($rev->created_at)).'</b></p><p>Updated Invoice Date for <b>'.$value->account_description.'</b> is <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for updating: '.$value->reason.'</p>';
                if(($value->transaction_date) != ($rev->transaction_date)){
                    echo '<p>Transaction date has been changed from <b>'.date('d F Y', strtotime($value->transaction_date))."</b> to <b>".date('d F Y', strtotime($rev->transaction_date)).'</b>.</p>';
                }
                if(($value->account_description) != ($rev->account_description)){
                    echo '<p>Account has been changed from <b>'.$value->account_description."</b> to <b>".$rev->account_description.'</b>.</p>';
                }
                if(($value->bill) != ($rev->bill)){
                    echo '<p>Bill amount has been changed from <b>'.$value->bill."</b> to <b>".$rev->bill.'</b>.</p>';
                }
                if(($value->tax) != ($rev->tax)){
                    echo '<p>Tax has been changed from <b>'.$value->tax."</b> to <b>".$rev->tax.'</b>.</p>';
                }
                 if(($value->shipping) != ($rev->shipping)){
                    echo '<p>Shipping has been changed from <b>'.$value->shipping."</b> to <b>".$rev->shipping.'</b>.</p>';
                }
                 if(($value->amount_paid) != ($rev->amount_paid)){
                    echo '<p>Paid amount has been changed from <b>'.$value->amount_paid."</b> to <b>".$rev->amount_paid.'</b>.</p>';
                }
                echo '<p></p></td></tr>';

        }
        echo '</tbody></table>';
        // echo '<b>Total Revenue for this month is </b>';
    }

    public function record_expense_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $account_description = $request->account_description;
        $revenues = DB::table('expense_record_update')->where('account_description', $account_description)->whereYear('updated_at', '=', $year)->whereMonth('updated_at', '=', $month)->where('uid', $uid)->orderBy('id','desc')->get();
        // $revtotal = DB::table('')
        // $userdet = AffiliateRegistration::where('email', Auth::user()->email)->first();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $rev = DB::table('expense_record')->where('id', $value->exp_id)->first();
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p>Record is created on <b>'.date('d F Y', strtotime($rev->created_at)).'</b></p><p>Date of updating <b>'.$value->account_description.'</b> is <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for updating: '.$value->reason.'</p>';

             if(($value->transaction_date) != ($rev->transaction_date)){
                    echo '<p>Transaction date has been changed from <b>'.date('d F Y', strtotime($value->transaction_date))."</b> to <b>".date('d F Y', strtotime($rev->transaction_date)).'</b>.</p>';
                }
                if(($value->account_description) != ($rev->account_description)){
                    echo '<p>Account has been changed from <b>'.$value->account_description."</b> to <b>".$rev->account_description.'</b>.</p>';
                }
                if(($value->total) != ($rev->total)){
                    echo '<p>Amount has been changed from <b>'.$value->total."</b> to <b>".$rev->total.'</b>.</p>';
                }

                 if(($value->amount_paid) != ($rev->amount_paid)){
                    echo '<p>Paid amount has been changed from <b>'.$value->amount_paid."</b> to <b>".$rev->amount_paid.'</b>.</p>';
                }
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }

 public function total_record_expense_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;

        $account_description = $request->account_description;
        $revenues = DB::table('expense_record_update')->where('account_description', $account_description)->whereYear('updated_at', '=', $year)->where('uid', $uid)->orderBy('id','desc')->get();
        // $revtotal = DB::table('')
        // $userdet = AffiliateRegistration::where('email', Auth::user()->email)->first();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $rev = DB::table('expense_record')->where('id', $value->exp_id)->first();
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p>Record is created on <b>'.date('d F Y', strtotime($rev->created_at)).'</b></p><p>Date of updating <b>'.$value->account_description.'</b> is <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for updating: '.$value->reason.'</p>';

             if(($value->transaction_date) != ($rev->transaction_date)){
                    echo '<p>Transaction date has been changed from <b>'.date('d F Y', strtotime($value->transaction_date))."</b> to <b>".date('d F Y', strtotime($rev->transaction_date)).'</b>.</p>';
                }
                if(($value->account_description) != ($rev->account_description)){
                    echo '<p>Account has been changed from <b>'.$value->account_description."</b> to <b>".$rev->account_description.'</b>.</p>';
                }
                if(($value->total) != ($rev->total)){
                    echo '<p>Amount has been changed from <b>'.$value->total."</b> to <b>".$rev->total.'</b>.</p>';
                }

                 if(($value->amount_paid) != ($rev->amount_paid)){
                    echo '<p>Paid amount has been changed from <b>'.$value->amount_paid."</b> to <b>".$rev->amount_paid.'</b>.</p>';
                }
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }




    public function record_asset_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $description = $request->description;
        $revenues = DB::table('asset_record_update')->where('description', $description)->whereYear('updated_at', '=', $year)->whereMonth('updated_at', '=', $month)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $rev = DB::table('asset_record')->where('id', $value->asset_id)->first();
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p>Record is created on <b>'.date('d F Y', strtotime($rev->created_at)).'</b></p><p>Date of updating <b>'.$value->description.'</b> is <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for updating: '.$value->reason.'</p>';
            if(($value->purchase_date) != ($rev->purchase_date)){
                    echo '<p>Purchase date has been changed from <b>'.date('d F Y', strtotime($value->purchase_date))."</b> to <b>".date('d F Y', strtotime($rev->purchase_date)).'</b>.</p>';
                }
            if(($value->description) != ($rev->description)){
                    echo '<p>Account has been changed from <b>'.$value->description."</b> to <b>".$rev->description.'</b>.</p>';
                }
             if(($value->quantity) != ($rev->quantity)){
                    echo '<p>Quantity has been changed from <b>'.$value->quantity."</b> to <b>".$rev->quantity.'</b>.</p>';
                }
            if(($value->price) != ($rev->price)){
                echo '<p>Amount has been changed from <b>'.$value->price."</b> to <b>".$rev->price.'</b>.</p>';
            }
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }


    public function total_record_asset_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;

        $description = $request->description;
        $revenues = DB::table('asset_record_update')->where('description', $description)->whereYear('updated_at', '=', $year)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $rev = DB::table('asset_record')->where('id', $value->asset_id)->first();
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p>Record is created on <b>'.date('d F Y', strtotime($rev->created_at)).'</b></p><p>Date of updating <b>'.$value->description.'</b> is <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for updating: '.$value->reason.'</p>';
             if(($value->purchase_date) != ($rev->purchase_date)){
                    echo '<p>Purchase date has been changed from <b>'.date('d F Y', strtotime($value->purchase_date))."</b> to <b>".date('d F Y', strtotime($rev->purchase_date)).'</b>.</p>';
                }
            if(($value->description) != ($rev->description)){
                    echo '<p>Account has been changed from <b>'.$value->description."</b> to <b>".$rev->description.'</b>.</p>';
                }
             if(($value->quantity) != ($rev->quantity)){
                    echo '<p>Quantity has been changed from <b>'.$value->quantity."</b> to <b>".$rev->quantity.'</b>.</p>';
                }
            if(($value->price) != ($rev->price)){
                echo '<p>Amount has been changed from <b>'.$value->price."</b> to <b>".$rev->price.'</b>.</p>';
            }
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }
    public function record_revenue_delete_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $account_description = $request->account_description;
        $revenues = DB::table('revenue_record_delete')->where('account_description', $account_description)->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', $month)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
        echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->created_at).'</td><td><p><b>'.$value->account_description.'</b> is deleted on <b>'.date('d F Y', strtotime($value->created_at)).'</b></p><p>Reason for deleting: '.$value->reason.'</p>';
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }

    public function total_record_revenue_delete_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;

        $account_description = $request->account_description;
        $revenues = DB::table('revenue_record_delete')->where('account_description', $account_description)->whereYear('created_at', '=', $year)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
        echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->created_at).'</td><td><p><b>'.$value->account_description.'</b> is deleted on <b>'.date('d F Y', strtotime($value->created_at)).'</b></p><p>Reason for deleting: '.$value->reason.'</p>';
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }


    public function record_expense_delete_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $account_description = $request->account_description;
        $revenues = DB::table('expense_record_delete')->where('account_description', $account_description)->whereYear('created_at', '=', $year)->whereMonth('created_at', '=', $month)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            // else{
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
        echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->created_at).'</td><td><p><b>'.$value->account_description.'</b> is deleted on <b>'.date('d F Y', strtotime($value->created_at)).'</b></p><p>Reason for deleting: '.$value->reason.'</p>';
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }
  public function total_record_expense_delete_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;

        $account_description = $request->account_description;
        $revenues = DB::table('expense_record_delete')->where('account_description', $account_description)->whereYear('created_at', '=', $year)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            // else{
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
        echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->created_at).'</td><td><p><b>'.$value->account_description.'</b> is deleted on <b>'.date('d F Y', strtotime($value->created_at)).'</b></p><p>Reason for deleting: '.$value->reason.'</p>';
        echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }

    public function record_asset_delete_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $month = $request->month;
        $description = $request->description;
        $revenues = DB::table('asset_record_delete')->where('description', $description)->whereYear('updated_at', '=', $year)->whereMonth('updated_at', '=', $month)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            // else{
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p><b>'.$value->description.'</b> is deleted on <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for deleting: '.$value->reason.'</p>';
            echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }


    public function total_record_asset_delete_month_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;

        $description = $request->description;
        $revenues = DB::table('asset_record_delete')->where('description', $description)->whereYear('updated_at', '=', $year)->where('uid', $uid)->orderBy('id','desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width:100%"><thead><tr><th>User Name</th><th>User Email</th><th>User Phone</th><th>Recording Date/Time</th><th>Description</th></tr></thead><tbody>';
        foreach($revenues as $value){
            // else{
            $phone = "";
            $user_name = "";
            $userdet = DB::table('users')->where('email', $value->user_email)->first();
            if($userdet->role == "affiliate"){
                $alldet = DB::table('affiliate_registrations')->where('email', $value->user_email)->first();
                $phone = $alldet->business_telephone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            elseif($userdet->role == "affiliate_user")
            {
                $alldet = DB::table('user_access_role')->where('email', $value->user_email)->first();
                $phone = $alldet->cellphone;
                $user_name = $alldet->first_name." ".$alldet->last_name;
            }
            echo '<tr><td>'.$user_name.'</td><td>'.$value->user_email.'</td><td>'.$phone.'</td><td>'.date_formate($value->updated_at).'</td><td><p><b>'.$value->description.'</b> is deleted on <b>'.date('d F Y', strtotime($value->updated_at)).'</b></p><p>Reason for deleting: '.$value->reason.'</p>';
            echo '<p></p></td></tr>';
        }
        echo '</tbody></table>';
    }

// ramkishor script
      public function adaffiliate_entry(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        // print_r($request->all());
        $fileNameToStore="";
         if($request->hasFile('image'))
            {
            $file = $request->file('image');
            $filenames = explode('.', $file->getClientOriginalName());
            $filename = $filenames[0];
            $extension = $file->getClientOriginalExtension();
            $fileNameToStore = $filename.'_'.time().'.'.$extension;
            $destinationPath = 'public/images/affiliates';
            $file->move($destinationPath,$fileNameToStore);
            }
        if(!empty($request->code))
        {
           $sponsor_id=$request->sponsor_id;
           $affiliate_code=$request->code;
           $code = Levels::where('code_name', $affiliate_code)->get();
           if(count($code) > 0){
            $now = date('Y-m-d H:i A');
            $vstart_date=$code[0]->vstart_date.' '.$code[0]->vstart_time;
            $vstart_date=date('Y-m-d H:i A',strtotime($vstart_date));
            $vend_date=$code[0]->vend_date.' '.$code[0]->vend_time;
            $vend_date=date('Y-m-d H:i A',strtotime($vend_date));
            if ($now >= $vstart_date && $now <= $vend_date)
             {
            return    $this->add_affiliate_entry($request->all(),$fileNameToStore,$sponsor_id,$affiliate_code);
             }else{
                 if($now < $vstart_date){
                    return redirect()->back()->with('status',"Validation start date for this code is ".$vstart_date);
                }
                else{
                    return redirect()->back()->with('status',"The code has expired.");
                }
             }
            }else{
             return redirect()->back()->with('status',"The code doesn't match.");
                exit;
            }
        }else{
           $sponsor_id='admin@gmail.com';
           $affiliate_code=DB::table('levels')->orderBy('id','asc')->first()->code_name;
         return  $this->add_affiliate_entry($request->all(),$fileNameToStore,$sponsor_id,$affiliate_code);
        }
    }
public function add_affiliate_entry($request,$fileNameToStore,$sponsor_id,$affiliate_code)
{
  // print_r($request['joining_date']);die;
            $AffiliateRegistration     = TempAffiliateRegistration::create([
                'code'                  => $affiliate_code,
                'joining_date'          => $request['joining_date'],
                'password'              => Hash::make($request['password']),
                'show_pass'              => $request['password'],
                'first_name'            => $request['first_name'],
                'last_name'             => $request['last_name'],
                'religion'              => $request['religion'],
                'email'                 => $request['email'],
                'cellphone'             => $request['cellphone'],
                'business_telephone'    => $request['business_telephone'],
                'business_category'     => $request['business_category'],
                'address'               => $request['address'],
                'zip_code'              => $request['zip_code'],
                'city'                  => $request['city'],
                'state'                 => $request['state'],
                'country'               => $request['country'],
                'billing_address'       => $request['billing_address'],
                'billing_zip_code'      => $request['billing_zip_code'],
                'billing_city'          => $request['billing_city'],
                'billing_state'         => $request['billing_state'],
                'billing_country'       => $request['billing_country'],
                'sponsor_id'            => $sponsor_id,
                'image'                 => $fileNameToStore,
                'company'               => $request['company'],
            ]);
        if($AffiliateRegistration)
         {
            $last_id=$AffiliateRegistration->id;
            session()->put('user_id',$last_id);
            Session::flash('success', "Inserted successfully");
            return redirect('/affiliate-preview/'.$last_id);
        }
        else {
            return redirect()->back()->with('status',"Something went wrong!!!");
        }
}
public function add_affiliate_final_data($user_id)
{
         $request=TempAffiliateRegistration::where('id',$user_id)->first();
      //  print_r($request);die();
         if(!empty($affiliate->sponsor_id))
         {
            $sponsor_id=User::where('email',$affiliate->sponsor_id)->first()->id;
         }else{
           $sponsor_id=1;
         }
         $AffiliateRegistration      = AffiliateRegistration::create([
                'code'                  => $request->code,
                'joining_date'          => $request->joining_date,
                'password'              => Hash::make($request->password),
                'first_name'            => $request->first_name,
                'last_name'             => $request->last_name,
                'religion'              => $request->religion,
                'email'                 => $request->email,
                'cellphone'             => $request->cellphone,
                'business_telephone'    => $request->business_telephone,
                'business_category'     => $request->business_category,
                'address'               => $request->address,
                'zip_code'              => $request->zip_code,
                'city'                  => $request->city,
                'state'                 => $request->state,
                'country'               => $request->country,
                'billing_address'       => $request->billing_address,
                'billing_zip_code'      => $request->billing_zip_code,
                'billing_city'          => $request->billing_city,
                'billing_state'         => $request->billing_state,
                'billing_country'       => $request->billing_country,
                'sponsor_id'            => $sponsor_id,
                'image'                 => $request->image,
                'status'                => 2,
                'company'               => $request->company,
            ]);
        if($AffiliateRegistration)
         {
            $full_address=$request->address.' '.$request->city.' '.$request->zip_code.' '.$request->state.' '.$request->country;
                     $loc=getLatLong($full_address);
                     $latitute=$loc['latitute'];
                     $longitude=$loc['longitude'];
              $User = User::create([
                 'name'         => $request->first_name." ".$request->last_name,
                 'email'        => $request->email,
                 'password'     => Hash::make($request->password),
                 'show_pass'    => $request->show_pass,
                 'latitute'     => $latitute,
                 'longitude'    => $longitude,
                 'role'         => "affiliate",
                 'status'       => 2,
             ]);
            DB::table('affiliate_banner')->insert(array('affiliate_email' => $request->email));
           TempAffiliateRegistration::where('id',$request->id)->delete();
            $last_id=$User->id;
            session()->put('user_id',$last_id);
            session()->put('share_link_enable','Yes');
            session()->put('share_step1','Yes');
           // Session::flash('success', "Inserted successfully");
            return redirect('/paywithpaypal');
        }
        else {
            return redirect()->back()->with('status',"Something went wrong!!!");
        }
}
  public function complete_registration_update(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        // print_r($request->all());
        if(!empty($request->user_id))
        {
            $data= array(
                      'fees'               => $request->fees,
                       );
            $query = TempAffiliateRegistration::where('id',$request->user_id)->update($data);
            if($query){
                session()->put('user_id',$request->user_id);
             return   $this->postPaymentWithpaypal($request->fees,$request->user_id);
                //Session::flash('success', "Inserted successfully");
               // redirect()->back()->with('status',"Inserted successfully");
                }
                else {
                    return redirect()->back()->with('status',"Something went wrong!!!");
                }
        }
    }

public function send_invitation_link(Request $request)
{
    //\LogActivity::addToLog('visited profile','view',Auth::user());
    //print_r($request->all());
  $success=false;
    if(!empty($request->user)){
        $user_id=$request->user_id;
        $user=User::find($user_id);
        $aff_data=AffiliateRegistration::where('email',$user->email)->first();
        $sponsor_link=AffiliateRegistration::get_user_referral_link($aff_data->code,$aff_data->email);
        $sponsor_name=$aff_data->first_name.' '.$aff_data->first_name;
        $profile_image=Balance_info::get_affiliate_profile_pic($user->email);
        $setting=Setting::general_setting();
        $i=0;
        foreach ($request->user['email'] as $email) {
         $fullname=$request->user['first_name'][$i].' '.$request->user['last_name'][$i];
         $data=array('name'=>$fullname,'email'=>$email,'user_id'=>$user_id);
         $q=User_invite::create($data);
         if($q){
            $link="<a href='".$sponsor_link."' target='_blank'>Click Here</a>";
            $data2 = array(
            'template'          =>  'invitation_email_template',
            'subject'           =>  $setting->invitation_email_subject,
            'email_body'        =>  $setting->invitation_email_body,
            'fullname'          =>  $fullname,
            'profile_photo'     =>  $profile_image,
            'sponsor_name'      =>  $sponsor_name,
            'sponsor_link'      =>  $link,
           );
           Mail::to($email)->send(new SendMail($data2));
            $success=true;
         }
         $i++;
        }
      if($success==true)
      {
       if(!empty(session()->get('share_step1')) && session()->get('share_step1')=='Yes') {
           session()->forget('share_step1');
           session()->put('share_step2','Yes');
           Session::flash('success', "Invitation send successfully");
            return redirect('/paywithpaypal');
       }elseif(!empty(session()->get('share_step2')) && session()->get('share_step2')=='Yes') {
           session()->forget('share_step2');
           session()->forget('share_link_enable');
           Session::flash('success', "Invitation send successfully");
            return redirect('/registration-success');
       }
      }else{
          return redirect()->back()->with('status',"Something went wrong!!!");
      }
    }
}
public function registration_success()
{
   if(!empty(session()->get('user_id')))
     {
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['religion'] = Religion::get();
        $data['business_category'] = BusinessCategory::get();
        $user_id=session()->get('user_id');
        $user=User::find($user_id);
        $da2=array('status'=>1);
        $aff_data=AffiliateRegistration::where('email',$user->email)->update($da2);
        $update=User::where('id',$user_id)->update($da2);
        $setting=Setting::general_setting();
          $data2 = array(
            'template'          =>  'welcome_email_template',
            'subject'           =>  $setting->email_subject,
            'email_body'        =>  $setting->email_body,
            'fullname'          =>  $user->name,
            'email'             =>  $user->email,
            'password'          =>  $user->show_pass,
           );
           Mail::to($user->email)->send(new SendMail($data2));
         session()->forget('user_id');
          Session::flash('success', "Registration completed successfully");
          Session::flash('success_msg', $setting->success_page_message);
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('registration_success_page')->with($data);
     }else{
       return  redirect('/');
     }
}
   public  function affiliate_preview($user_id)
   {
     if(!empty(session()->get('user_id')))
     {
    $data['user'] = DB::table('temp_affiliate_registrations')->where('id',$user_id)->first();
     $data['fees'] = Setting::general_setting()->registration_fee;
      $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['religion'] = Religion::get();
        $data['business_category'] = BusinessCategory::get();
       //print_r( $data['user']->code );die;
       $data['chat'] = "";
       $data['tools'] = "";
       if(Auth::user()->role == "affiliate_user"){
        $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
        if($cdet->chat == "on"){
            $data['chat'] = "on";
        }
        else{
            $data['chat'] = "off";
        }
        if($cdet->tools == "on"){
            $data['tools'] = "on";
        }
        else{
            $data['tools'] = "off";
        }
       }
       return view('affiliate_registration_preview')->with($data);
     }else{
        return  redirect('affiliate_registration');
     }
   }
 public function payWithPaypal()
    {
       $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['religion'] = Religion::get();
        $data['business_category'] = BusinessCategory::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('paywithpaypal')->with($data);
    }
    public function postPaymentWithpaypal($price,$order_no)
    {
        $payer = new Payer();
        $payer->setPaymentMethod('paypal');
        $item_1 = new Item();
        $item_1->setName('Registration Fees')
            ->setCurrency('USD')
            ->setQuantity(1)
            ->setPrice($price);
        $item_list = new ItemList();
        $item_list->setItems(array($item_1));
        $amount = new Amount();
        $amount->setCurrency('USD')
            ->setTotal($price);
        $transaction = new Transaction();
        $transaction->setAmount($amount)
            ->setItemList($item_list)
            ->setDescription($order_no);
        $redirect_urls = new RedirectUrls();
        $redirect_urls->setReturnUrl(URL::route('status'))
            ->setCancelUrl(URL::route('status'));
        $payment = new Payment();
        $payment->setIntent('Sale')
            ->setPayer($payer)
            ->setRedirectUrls($redirect_urls)
            ->setTransactions(array($transaction));
        try {
            $payment->create($this->_api_context);
        } catch (\PayPal\Exception\PPConnectionException $ex) {
            if (\Config::get('app.debug')) {
                \Session::put('error','Connection timeout');
                return Redirect::route('paywithpaypal');
            } else {
                \Session::put('error','Some error occur, sorry for inconvenient');
                return Redirect::route('paywithpaypal');
            }
        }
        foreach($payment->getLinks() as $link) {
            if($link->getRel() == 'approval_url') {
                $redirect_url = $link->getHref();
                break;
            }
        }
        Session::put('paypal_payment_id', $payment->getId());
        if(isset($redirect_url)) {
            return Redirect::away($redirect_url);
        }
        \Session::put('error','Unknown error occurred');
        return Redirect::route('paywithpaypal');
    }
    public function getPaymentStatus(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = TopBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['religion'] = Religion::get();
        $data['business_category'] = BusinessCategory::get();
        $payment_id = Session::get('paypal_payment_id');
        Session::forget('paypal_payment_id');
        if (empty($request->input('PayerID')) || empty($request->input('token'))) {
            \Session::put('error','Payment failed');
            return Redirect::route('paywithpaypal');
        }
        $payment = Payment::get($payment_id, $this->_api_context);
        $execution = new PaymentExecution();
        $execution->setPayerId($request->input('PayerID'));
        $result = $payment->execute($execution, $this->_api_context);
        if ($result->getState() == 'approved') {
          //  echo "<pre>";
          //  print_r($result);die;
         $payment_id=$result->getId();
        // $order_no=$result->getDescription();
         $transaction_id=$result->transactions[0]->related_resources[0]->sale->id;
         $order_no=$result->transactions[0]->description;
         $data['payment_id'] =  $payment_id;
         $data['transaction_id'] =  $transaction_id;
         $data['state'] =  $result->transactions[0]->related_resources[0]->sale->state;
        $data['amount'] =  $result->transactions[0]->related_resources[0]->sale->amount->total;
        $data['currency'] =  $result->transactions[0]->related_resources[0]->sale->amount->currency;
        $data1= array(
                      'user_id'          => $order_no,
                      'amount'           => $data['amount'],
                      'currency'         => $data['currency'],
                      'payment_id'       => $data['payment_id'],
                      'transaction_id'   => $data['transaction_id'],
                      'description'      => 'Registration Fee',
                      'payment_status'   => $data['state'],
                      'status'           => 1,
                       );
            $query = Transactionhistory::create($data1);
             $data['order_no'] =  $query->id;
            \Session::put('success','Payment success !!');
           //return Redirect::route('paywithpaypal');
            $data['chat'] = "";
            $data['tools'] = "";
            if(Auth::user()->role == "affiliate_user"){
                $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
                if($cdet->chat == "on"){
                    $data['chat'] = "on";
                }
                else{
                    $data['chat'] = "off";
                }
                if($cdet->tools == "on"){
                    $data['tools'] = "on";
                }
                else{
                    $data['tools'] = "off";
                }
            } //
            return view('paywithpaypal')->with($data);
            return $this->add_affiliate_final_data($order_no);
        }
        \Session::put('error','Payment failed !!');
             return Redirect::route('paywithpaypal');
          //$data['chat'] = "";
             $data['tools'] = "";
             if(Auth::user()->role == "affiliate_user"){
                $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
                if($cdet->chat == "on"){
                    $data['chat'] = "on";
                }
                else{
                    $data['chat'] = "off";
                }
                if($cdet->tools == "on"){
                    $data['tools'] = "on";
                }
                else{
                    $data['tools'] = "off";
                }
             }
             return view('paywithpaypal')->with($data);
    }
    public function revenue_budget_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $revenue = DB::table('revenue_budget')->where($month, ">", 0)->whereYear('created_at', date('Y'))->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Revenue Account</th>
                        <th>Budget</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.$value->name.'</td>
                        <td>'.$value->$month.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function revenue_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $revenue = DB::table('revenue_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', '!=', 'Other Revenue')->where('uid', $uid)->orderBy('transaction_date', 'desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width: 100%; overflow: auto;">
                <thead>
                    <tr>
                       <th class="table-checkbox">
                        <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Tax Collected</th>
                        <th>Shipping Charge</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                    <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->client_name.'</td>
                        <td>'.$value->client_email.'</td>
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }


    public function total_revenue_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }

        $year = $request->year;
        $month_year = $year;
        $revenue = DB::table('revenue_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', '!=', 'Other Revenue')->where('uid', $uid)->orderBy('transaction_date', 'desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample1" style="width: 100%; overflow: auto;">
                <thead>
                    <tr>
                       <th class="table-checkbox">
                        <input type="checkbox" class="group-checkable" data-set="#datatable_sample checkboxes" />
                        </th>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Tax Collected</th>
                        <th>Shipping Charge</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                    <td><input type="checkbox" class="checkboxes" value="'.$value->id.'" /></td>
                        <td>'.$value->client_name.'</td>
                        <td>'.$value->client_email.'</td>
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function other_revenue_monthly_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $revenue = DB::table('revenue_budget')->where('name', "Other Revenue")->where($month, ">", 0)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Revenue Account</th>
                        <th>Budget</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.$value->name.'</td>
                        <td>'.$value->$month.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function other_revenue_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $revenue = DB::table('revenue_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', 'Other Revenue')->where('uid', $uid)->orderBy('transaction_date', 'desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Tax Collected</th>
                        <th>Shipping Charge</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }

    public function total_other_revenue_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }

        $year = $request->year;
        $month_year = $year;
        $revenue = DB::table('revenue_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', 'Other Revenue')->where('uid', $uid)->orderBy('transaction_date', 'desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Tax Collected</th>
                        <th>Shipping Charge</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                         <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }


    public function total_yearly_revenue_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }

        $year = $request->year;
        $month_year = $year;
        $revenue = DB::table('revenue_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->orderBy('transaction_date', 'desc')->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Tax Collected</th>
                        <th>Shipping Charge</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                         <td>'.$value->tax.'</td>
                        <td>'.$value->shipping.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function monthly_expense_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $name = $request->name;
        $expense = DB::table('expense_budget')->where('name', $name)->where($month, ">", 0)->whereYear('created_at', date('Y'))->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Expense Account</th>
                        <th>Budget</th>
                    </tr>
                </thead><tbody>';
        foreach ($expense as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.$value->name.'</td>
                        <td>'.$value->$month.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function expense_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $name = $request->name;
        $expense = DB::table('expense_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', $name)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($expense as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }

    public function total_expense_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }

        $year = $request->year;
        $month_year = $year;
        $name = $request->name;
        $expense = DB::table('expense_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', $name)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($expense as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }


    public function total_yearly_expenses_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }

        $year = $request->year;
        $month_year = $year;

        $expense = DB::table('expense_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($expense as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }

    public function erevenue_budget_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $revenue = DB::table('revenue_projection')->where($month, ">", 0)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Revenue Account</th>
                        <th>Budget</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.$value->name.'</td>
                        <td>'.$value->$month.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function erevenue_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $revenue = DB::table('revenue_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', '!=', 'Other Revenue')->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Client Name</th>
                        <th>Client Email</th>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.$value->client_name.'</td>
                        <td>'.$value->client_email.'</td>
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function eother_revenue_monthly_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $revenue = DB::table('revenue_projection')->where('name', "Other Revenue")->where($month, ">", 0)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Revenue Account</th>
                        <th>Budget</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.$value->name.'</td>
                        <td>'.$value->$month.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function eother_revenue_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $revenue = DB::table('revenue_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', 'Other Revenue')->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($revenue as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function emonthly_expense_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $name = $request->name;
        $expense = DB::table('expense_projection')->where('name', $name)->where($month, ">", 0)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Expense Account</th>
                        <th>Budget</th>
                    </tr>
                </thead><tbody>';
        foreach ($expense as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.$value->name.'</td>
                        <td>'.$value->$month.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function eexpense_actual_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $name = $request->name;
        $expense = DB::table('expense_record')->where('transaction_date', 'like', '%' . $month_year . '%')->where('account_description', $name)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account Description</th>
                        <th>Total Bill</th>
                        <th>Amount Paid</th>
                        <th>Balance</th>
                    </tr>
                </thead><tbody>';
        foreach ($expense as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->transaction_date)).'</td>
                        <td>'.$value->account_description.'</td>
                        <td>'.$value->total.'</td>
                        <td>'.$value->amount_paid.'</td>
                        <td>'.$value->balance.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function monthly_asset_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $name = $request->name;
        $expense = DB::table('asset_record')->where('purchase_date', 'like', '%' . $month_year . '%')->where('description', $name)->where('uid', $uid)->get();
        echo '<table class="table table-striped table-bordered table-hover" id="datatable_sample">
                <thead>
                    <tr>
                        <th>Purchase Date</th>
                        <th>Description</th>
                        <th>Quantity</th>
                        <th>Price</th>
                    </tr>
                </thead><tbody>';
        foreach ($expense as $value) {
            echo '<tr class="odd gradeX">
                        <td>'.date('d M Y', strtotime($value->purchase_date)).'</td>
                        <td>'.$value->description.'</td>
                        <td>'.$value->quantity.'</td>
                        <td>'.$value->price.'</td>
                    </tr>';
        }
        echo '</tbody></table>';
    }
    public function email_campaign_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $email = $request->email;
        $emaill = EmailCampaign::where('date', 'like', '%' . $month_year . '%')->where('email', $email)->where('uid', $uid)->get();
        $userdet = DB::table('contacts')->where('email', $email)->get();
        if(count($userdet) > 0){
            $username = $userdet[0]->first_name." ".$userdet[0]->last_name;
        }
        else{
            $username = "";
        }
        foreach ($emaill as $emails) {
            echo '<div class="row" style="border: 1px solid #da291c !important; border-radius: 10px; padding: 5px; margin: 10px 0"><div class="col-md-6" style="margin: 10px 0"><b>Subject: '.$emails->subject.'</b></div><div class="col-md-6" style="margin: 10px 0"><p style="text-align: right; margin-bottom: 0;"><b>Date: '.$emails->date.'</b></p></div>';
            echo '<div class="col-md-12" '; if ($emails->backhground != "") { echo 'style="padding:20px 10px; background-color: '.$emails->backhground.'"'; } echo '>
            <div style="padding: 5px">
                '.$emails->user_banner .'
            </div>';
                if($emails->greeting != ""){
            echo '<p style="margin-bottom: 0px; color: '.$emails->forecolorr.'">
                '.$emails->greeting.' '.$username.',
            </p>';
            }
            echo $emails->message.'</div></div>';
        }
    }
    public function send_email_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $email = $request->email;
        $emaill = SendEmail::where('date', 'like', '%' . $month_year . '%')->where('email', $email)->where('uid', $uid)->get();
        // return $emaill; die();
        foreach ($emaill as $emails) {
            echo '<div class="row" style="border: 1px solid #da291c !important; border-radius: 10px; padding: 5px; margin: 10px 0"><div class="col-md-6" style="margin: 10px 0"><b>Subject: '.$emails->subject.'</b></div><div class="col-md-6" style="margin: 10px 0"><p style="text-align: right; margin-bottom: 0;"><b>Date: '.$emails->date.'</b></p></div>';
            echo '<div class="col-md-12" '; if ($emails->backhground != "") { echo 'style="padding:20px 10px; background-color: '.$emails->backhground.'"'; } echo '>
            <div style="padding: 5px">
                '.$emails->user_banner .'
            </div>';
            if($emails->campaign_name != ""){
                echo '<p style="margin: 5px 0px;">
                    Campaign Name: '.$emails->campaign_name.'
                </p>';
            }
            echo $emails->message.'</div></div>';
        }
    }
    public function send_card_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $email = $request->email;
        $emaill = SendCard::where('date', 'like', '%' . $month_year . '%')->where('email', $email)->where('uid', $uid)->get();
        $urll = url('/');
        $paath = $urll."/public/images/";
        // return $emaill; die();
        foreach ($emaill as $emails) {
            echo '<div class="row" style="border: 1px solid #da291c !important; border-radius: 10px; padding: 5px; margin: 10px 0">
                    <div class="col-md-6" style="margin: 10px 0"><b>Subject: '.$emails->subject.'</b></div>
                    <div class="col-md-6" style="margin: 10px 0"><p style="text-align: right; margin-bottom: 0;"><b>Date: '.$emails->date.'</b></p></div>
                    <div class="col-md-12" '; if ($emails->backhground != "") { echo 'style="padding:20px 10px; background-color: '.$emails->backhground.'"'; } echo '>
                        <div style="padding: 5px">
                            '.$emails->user_banner .'
                        </div>'.$emails->message.'
                    </div>
                    <div class="col-md-6"> <img src="'.$paath.$emails->image.'" style="width: 300px"></div>
                    <div class="col-md-6"></div>
                </div>';
        }
    }
    public function send_video_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $email = $request->email;
        $emaill = SendVideo::where('date', 'like', '%' . $month_year . '%')->where('email', $email)->where('uid', $uid)->get();
        $urll = url('/');
        $paath = $urll."/public/images/";
        // return $emaill; die();
        foreach ($emaill as $emails) {
            echo '<div class="row" style="border: 1px solid #da291c !important; border-radius: 10px; padding: 5px; margin: 10px 0">
                    <div class="col-md-6" style="margin: 10px 0"><b>Subject: '.$emails->subject.'</b></div>
                    <div class="col-md-6" style="margin: 10px 0"><p style="text-align: right; margin-bottom: 0;"><b>Date: '.$emails->date.'</b></p></div>
                    <div class="col-md-12" '; if ($emails->backhground != "") { echo 'style="padding:20px 10px; background-color: '.$emails->backhground.'"'; } echo '>
                        <div style="padding: 5px">
                            '.$emails->user_banner .'
                        </div>'.$emails->message.'
                    </div>
                    <div class="col-md-6"> <video width="320" height="240" controls><source src="'.$paath.$emails->image.'"></video></div>
                    <div class="col-md-6"></div>
                </div>';
        }
    }
    public function send_sms_details(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = date('Y');
        $month = $request->month;
        $month_year = $year."-".$month;
        $email = $request->email;
        $emaill = SendSms::where('date', 'like', '%' . $month_year . '%')->where('email', $email)->where('uid', $uid)->get();
        $userdet = DB::table('contacts')->where('email', $email)->get();
        if(count($userdet) > 0){
            $username = $userdet[0]->first_name." ".$userdet[0]->last_name;
        }
        else{
            $username = "";
        }
        foreach ($emaill as $emails) {
            echo '<div class="row" style="border: 1px solid #da291c !important; border-radius: 10px; padding: 5px; margin: 10px 0"><div class="col-md-6" style="margin: 10px 0"><b>Subject: '.$emails->subject.'</b></div><div class="col-md-6" style="margin: 10px 0"><p style="text-align: right; margin-bottom: 0;"><b>Date: '.$emails->date.'</b></p></div>';
            echo '<div class="col-md-12" '; if ($emails->backhground != "") { echo 'style="padding:20px 10px; background-color: '.$emails->backhground.'"'; } echo '>
            <div style="padding: 5px">
                '.$emails->user_banner .'
            </div>';
                if($emails->greeting != ""){
            echo '<p style="margin-bottom: 0px; color: '.$emails->forecolorr.'">
                '.$emails->greeting.' '.$username.',
            </p>';
            }
            echo $emails->message.'</div></div>';
        }
    }
    public static function new_client_month_count($month){
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $month = $month;
        $year = date('Y');
        $month_year = $year."-".$month;
        $getclnt = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $getclnt;
    }
    public function newappointment_get_month_count()
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $year = $request->year;
        $new_clients = [];
        $new_appointment_arr = [];
        $change_appointment_arr = [];
        $cancel_appointment_arr = [];
        $months_arr = ['01','02','03','04','05','06','07','08','09','10','11','12'];
        $contacts = DB::table('contacts')->get();
        foreach ($months_arr as $valuee) {
            $month_year = $year."-".$valuee;
            $emcnt = 0;
            $emailarr = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            // foreach($contacts as $val){
            //     // print_r($val->email);
            //     $single = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('email1', $val->email)->orWhere('email2', $val->email)->orWhere('email3', $val->email)->first();
            //     if($single != null){
            //         // print_r($single->appointment_date);
            //         $dattt = date('Y-m', strtotime($single->appointment_date));
            //         if($dattt == $month_year){
            //             $emcnt++;
            //         }
            //     }
            //     // foreach($single as $apt){
            //     // if(count($single) > 0){
            //     // }
            // }
            // die();
            // $users = DB::table('appointments')
            //      ->select(DB::raw('count(*) as user_count, email1'))
            //      ->where('email1', '<=', 1)
            //      ->where('created_at', 'like', '%' . $month_year . '%')
            //      ->groupBy('email1')
            //      ->get();
            //      // echo $users;
            //     // print_r($users);die();
            // $cntt = 0;
            // foreach ($users as $value) {
            //     $cntt++;
            // }
            array_push($new_appointment_arr, $emcnt);
        }
        echo '<tr>
                <td class="fixed-side">New Appointments</td>
                <td>'; if($new_appointment_arr[0] != 0){ echo '<a class="new_appointment_det" id="01nappointments123">'; } echo ''.$new_appointment_arr[0].'';if($new_appointment_arr[0] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[1] != 0){ echo '<a class="new_appointment_det" id="02nappointments123">'; } echo ''.$new_appointment_arr[1].'';if($new_appointment_arr[1] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[2] != 0){ echo '<a class="new_appointment_det" id="03nappointments123">'; } echo ''.$new_appointment_arr[2].'';if($new_appointment_arr[2] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[3] != 0){ echo '<a class="new_appointment_det" id="04nappointments123">'; } echo ''.$new_appointment_arr[3].'';if($new_appointment_arr[3] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[4] != 0){ echo '<a class="new_appointment_det" id="05nappointments123">'; } echo ''.$new_appointment_arr[4].'';if($new_appointment_arr[4] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[5] != 0){ echo '<a class="new_appointment_det" id="06nappointments123">'; } echo ''.$new_appointment_arr[5].'';if($new_appointment_arr[5] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[6] != 0){ echo '<a class="new_appointment_det" id="07nappointments123">'; } echo ''.$new_appointment_arr[6].'';if($new_appointment_arr[6] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[7] != 0){ echo '<a class="new_appointment_det" id="08nappointments123">'; } echo ''.$new_appointment_arr[7].'';if($new_appointment_arr[7] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[8] != 0){ echo '<a class="new_appointment_det" id="09nappointments123">'; } echo ''.$new_appointment_arr[8].'';if($new_appointment_arr[8] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[9] != 0){ echo '<a class="new_appointment_det" id="10nappointments123">'; } echo ''.$new_appointment_arr[9].'';if($new_appointment_arr[9] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[10] != 0){ echo '<a class="new_appointment_det" id="11nappointments123">'; } echo ''.$new_appointment_arr[10].'';if($new_appointment_arr[10] != 0){ echo '</a>'; } echo '</td>
                <td>'; if($new_appointment_arr[11] != 0){ echo '<a class="new_appointment_det" id="12nappointments123">'; } echo ''.$new_appointment_arr[11].'';if($new_appointment_arr[11] != 0){ echo '</a>'; } echo '</td>
                <td class="total-td">'.array_sum($new_appointment_arr).'</td>
            </tr>';
    }
    public function add_holiday(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ClientManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['category'] = BusinessCategory::get();
        $data['religion'] = Religion::get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('add_holiday')->with($data);
    }
    public function front_holiday_entry(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $holiday = $request->holiday;
        $date = explode('-', $request->date);
        $year = $date[0];
        $month = $date[1];
        $day = $date[2];
        $values = array(
            'holiday'   => $holiday,
            'year'      => $year,
            'month'     => $month,
            'day'       => $day,
            'date'      => $request->date,
        );
        DB::table('holiday')->insert($values);
         $notification  = getNotificationMessage(61);
        $message = $notification;
        $subject = "Holiday Added";
         addUserActivity($subject,'add',$notification,$message);
        Session::flash('success', "Success!");
        return redirect('schedule_holiday')->with('status',"Inserted successfully");
    }
    public function all_monthly_budget_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('decem');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_monthly_budget_chart')->with($data);
    }
    public function other_monthly_budget_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['jantotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('jan');
        $data['febtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('feb');
        $data['martotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('mar');
        $data['aprtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('apr');
        $data['maytotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('may');
        $data['juntotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('jun');
        $data['jultotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('jul');
        $data['augtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('aug');
        $data['septotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('sep');
        $data['octtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('oct');
        $data['novtotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('nov');
        $data['dectotal'] = DB::table('revenue_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('decem');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_monthly_budget_chart')->with($data);
    }
    public function other_quarterly_budget_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', 'Other Revenue')->sum('octdec');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_quarterly_budget_chart')->with($data);
    }
    public function all_quarterly_budget_chart()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('total_quarterly_budget_chart')->with($data);
    }
    public function monthlyyearlycomappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody><tr><td class="fixed-side">New Clients</td></tr><tr><td class="fixed-side">New Appointments</td></tr><tr><td class="fixed-side">Change Appointments</td></tr><tr><td class="fixed-side">Cancel Appointments</td></tr></tbody></table></td>';
        foreach($allyearmonth as $details){
            $det = explode('nqd', $details);
            $year = $det[0];
            $month = $det[1];
            $mon = "";
            if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
            $uid = "";
            if((Auth::user()->role) == "affiliate"){
                $uid = Auth::id();
            }
            else{
                $uid = Auth::user()->affiliate_user_id;
            }
            $contacts = DB::table('contacts')->get();
            $month_year = $year."-".$month;
            $emcnt = 0;
            $emailarr = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            $getclnt = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getcount = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getcount2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            echo '<td style="padding: 0"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody><tr>
                        <td>'; if($getclnt != 0){ echo '<a class="new_client_det" id="01nclient123">'; } echo ''.$getclnt.'';if($getclnt != 0){ echo '</a>'; } echo '</td>
                    </tr><tr>
                    <td>'; if($emcnt != 0){ echo '<a class="new_appointment_det" id="01nappointments123">'; } echo ''.$emcnt.'';if($emcnt != 0){ echo '</a>'; } echo '</td>
                </tr><tr>
                    <td>'; if($getcount != 0){ echo '<a class="change_appointment_det" id="01cappointments123">'; } echo ''.$getcount.'';if($getcount != 0){ echo '</a>'; } echo '</td>
                </tr><tr>
                    <td>'; if($getcount2 != 0){ echo '<a class="cancel_appointment_det" id="01canappointments123">'; } echo ''.$getcount2.'';if($getcount2 != 0){ echo '</a>'; } echo '</td>
                </tr></tbody></table></td>';
        }
        echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
        $allval1 = "New Clientszpq".$request->allyearmonth;
        $allval1 = base64_encode($allval1);
        $allval2 = "New Appointmentszpq".$request->allyearmonth;
        $allval2 = base64_encode($allval2);
        $allval3 = "Change Appointmentszpq".$request->allyearmonth;
        $allval3 = base64_encode($allval3);
        $allval4 = "Cancel Appointmentszpq".$request->allyearmonth;
        $allval4 = base64_encode($allval4);
        echo '<tr><td><a href="'.url("acommonthgraph").'/'.$allval1.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph").'/'.$allval2.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph").'/'.$allval3.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph").'/'.$allval4.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
        echo '</tbody></table></td></tr></table>';
    }
    public function monthlyyearlycomemail_campaign(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = EmailCampaign::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("ecommonthgraph").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function monthlyyearlycomsend_email(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        // print_r($allyearmonth);die();
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendEmail::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("ecommonthgraphse").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function monthlyyearlycomsend_card(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendCard::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("ecommonthgraphsc").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function monthlyyearlycomsend_video(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendVideo::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("ecommonthgraphsv").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function monthlyyearlycomsend_sms(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendSms::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("ecommonthgraphss").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function monthlyyearlyrevenue(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('revenue_account')->where('uid', $uid)->groupBy('account_name')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->account_name.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $mnt = $det[1];
                $month = "";
                if($mnt == 'Jan'){ $month = '01'; }elseif($mnt == 'Feb'){ $month = '02'; }elseif($mnt == 'Mar'){ $month = '03'; }elseif($mnt == 'Apr'){ $month = '04'; }elseif($mnt == 'May'){ $month = '05'; }elseif($mnt == 'Jun'){ $month = '06'; }elseif($mnt == 'Jul'){ $month = '07'; }elseif($mnt == 'Aug'){ $month = '08'; }elseif($mnt == 'Sep'){ $month = '09'; }elseif($mnt == 'Oct'){ $month = '10'; }elseif($mnt == 'Nov'){ $month = '11'; }elseif($mnt == 'Dec'){ $month = '12'; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mnt.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_name)->sum('bill');
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_name.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->account_name."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcommonthgraph").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function fcomparisonmonthlygraph(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $description = $request->description;
        $allyearmonth = explode(',', $request->allyearmonth);
        echo '<div style="padding: 30px 0px;">
                <div class="modal_chart" id="bar-chartm" style="width: 100%;"></div>
                <script type="text/javascript">
                      $(function () {
                            "use strict";
                            var bar = new Morris.Bar({
                              element: "bar-chartm",
                              resize: true,
                              data: [';
                                foreach($allyearmonth as $details){
                                    $det = explode('nqd', $details);
                                    $year = $det[0];
                                    $month = $det[1];
                                    $mon = "";
                                    if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
                                    $month_year = $year."-".$month;
                                    $monyr = $mon." ".$year;
                                    $mailcount = DB::table('revenue_record_update')->where('updated_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->count();
                                    echo '{y: "'.$monyr.'", a: '.$mailcount.'},';
                                }
                        echo '],
                              barColors: ["#00a65a"],
                              xkey: "y",
                              ykeys: ["a"],
                              labels: ["Budget"],
                              hideHover: "auto",
                              resize: true
                            });
                          });
                </script>
            </div>';
    }
    public function monthlyyearlycomexpenses(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('expenses_account')->where('uid', $uid)->groupBy('account_name')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->account_name.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
               $mnt = $det[1];
                $month = "";
                if($mnt == 'Jan'){ $month = '01'; }elseif($mnt == 'Feb'){ $month = '02'; }elseif($mnt == 'Mar'){ $month = '03'; }elseif($mnt == 'Apr'){ $month = '04'; }elseif($mnt == 'May'){ $month = '05'; }elseif($mnt == 'Jun'){ $month = '06'; }elseif($mnt == 'Jul'){ $month = '07'; }elseif($mnt == 'Aug'){ $month = '08'; }elseif($mnt == 'Sep'){ $month = '09'; }elseif($mnt == 'Oct'){ $month = '10'; }elseif($mnt == 'Nov'){ $month = '11'; }elseif($mnt == 'Dec'){ $month = '12'; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mnt.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_name)->sum('amount_paid');
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_name.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->account_name."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcommonthgraphex").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function monthlyyearlycomasset(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('asset_record')->where('uid', $uid)->groupBy('description')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->description.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $mnt = $det[1];
                $month = "";
                if($mnt == 'Jan'){ $month = '01'; }elseif($mnt == 'Feb'){ $month = '02'; }elseif($mnt == 'Mar'){ $month = '03'; }elseif($mnt == 'Apr'){ $month = '04'; }elseif($mnt == 'May'){ $month = '05'; }elseif($mnt == 'Jun'){ $month = '06'; }elseif($mnt == 'Jul'){ $month = '07'; }elseif($mnt == 'Aug'){ $month = '08'; }elseif($mnt == 'Sep'){ $month = '09'; }elseif($mnt == 'Oct'){ $month = '10'; }elseif($mnt == 'Nov'){ $month = '11'; }elseif($mnt == 'Dec'){ $month = '12'; }
                $month_year = $year."-".$month;
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mnt.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('description', $value->description)->sum('price');
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->description.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->description."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcommonthgraphas").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public static function calculatepaidamount($email)
    {
        // return $email;
        $paidamount = "";
        $amount = DB::table('revenue_record')->where('client_email', $email)->whereYear('transaction_date', date('Y'))->sum('amount_paid');
        if($amount != "")
        {
            $paidamount = $amount;
        }
        else{
            $paidamount = 0;
        }
        return $paidamount;
    }
    public static function calculatebalance($email)
    {
        $balance = "";
        $amount = DB::table('revenue_record')->where('client_email', $email)->whereYear('transaction_date', date('Y'))->sum('balance');
        if($amount != "")
        {
            $balance = $amount;
        }
        else{
            $balance = 0;
        }
        return $balance;
    }
    public function comparisontab11()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->join('appointments', 'client_appointment_lists.id', 'appointments.appointment_id')->groupBy('appointments.appointment_id')->get();
        $data['changedappointments'] = DB::table('client_appointment_lists')->join('change_appointment', 'client_appointment_lists.id', 'change_appointment.appointment_id')->groupBy('change_appointment.appointment_id')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab11')->with($data);
    }
    public function quarterlyyearlycomappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody><tr><td class="fixed-side">New Clients</td></tr><tr><td class="fixed-side">New Appointments</td></tr><tr><td class="fixed-side">Change Appointments</td></tr><tr><td class="fixed-side">Cancel Appointments</td></tr></tbody></table></td>';
        foreach($allyearmonth as $details){
            $det = explode('nqd', $details);
            $year = $det[0];
            $month = $det[1];
            $mon = "";
            if($month == '01'){ $mon = "January - March"; }elseif($month == '04'){ $mon = "April - June"; }elseif($month == '07'){ $mon = "July - September"; }elseif($month == '10'){ $mon = "October - December"; }
            $uid = "";
            if((Auth::user()->role) == "affiliate"){
                $uid = Auth::id();
            }
            else{
                $uid = Auth::user()->affiliate_user_id;
            }
            $contacts = DB::table('contacts')->get();
            $month_year = $year."-".$month;
            $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
            $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
            $emcnt = 0;
            $emcnt2  = 0;
            $emcnt3 = 0;
            $emailarr = [];
            $emailarr2 = [];
            $emailarr3 = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            $apptn2 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn2 as $aptn2) {
                if(($aptn2->email1 != "") && (in_array($aptn2->email1, $emailarr2) == false)){
                    array_push($emailarr2, $aptn2->email1);
                    $emcnt2++;
                }
                if(($aptn2->email2 != "") && (in_array($aptn2->email2, $emailarr2) == false)){
                    array_push($emailarr2, $aptn2->email2);
                    $emcnt2++;
                }
                if(($aptn2->email3 != "") && (in_array($aptn2->email3, $emailarr2) == false)){
                    array_push($emailarr2, $aptn2->email3);
                    $emcnt2++;
                }
            }
            $apptn3 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn3 as $aptn3) {
                if(($aptn3->email1 != "") && (in_array($aptn3->email1, $emailarr3) == false)){
                    array_push($emailarr3, $aptn3->email1);
                    $emcnt3++;
                }
                if(($aptn3->email2 != "") && (in_array($aptn3->email2, $emailarr3) == false)){
                    array_push($emailarr3, $aptn3->email2);
                    $emcnt3++;
                }
                if(($aptn3->email3 != "") && (in_array($aptn3->email3, $emailarr3) == false)){
                    array_push($emailarr3, $aptn3->email3);
                    $emcnt3++;
                }
            }
            $new_appointmentt = $emcnt + $emcnt2 + $emcnt3;
            $getclnt1 = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getclnt2 = ClientAppointmentList::where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
            $getclnt3 = ClientAppointmentList::where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getclnt = $getclnt1 + $getclnt2 + $getclnt3;
            $getcount1 = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getcount22 = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
            $getcount3 = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getcount = $getcount1 + $getcount22 + $getcount3;
            $getcountt1 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
            $getcountt2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
            $getcountt3 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getcount2 = $getcountt1 + $getcountt2 + $getcountt3;
            echo '<td style="padding: 0"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody><tr>
                        <td>'; if($getclnt != 0){ echo '<a class="new_client_det" id="01nclient123">'; } echo ''.$getclnt.'';if($getclnt != 0){ echo '</a>'; } echo '</td>
                    </tr><tr>
                    <td>'; if($new_appointmentt != 0){ echo '<a class="new_appointment_det" id="01nappointments123">'; } echo ''.($new_appointmentt).'';if($new_appointmentt != 0){ echo '</a>'; } echo '</td>
                </tr><tr>
                    <td>'; if($getcount != 0){ echo '<a class="change_appointment_det" id="01cappointments123">'; } echo ''.$getcount.'';if($getcount != 0){ echo '</a>'; } echo '</td>
                </tr><tr>
                    <td>'; if($getcount2 != 0){ echo '<a class="cancel_appointment_det" id="01canappointments123">'; } echo ''.$getcount2.'';if($getcount2 != 0){ echo '</a>'; } echo '</td>
                </tr></tbody></table></td>';
        }
        echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
        $allval1 = "New Clientszpq".$request->allyearmonth;
        $allval1 = base64_encode($allval1);
        $allval2 = "New Appointmentszpq".$request->allyearmonth;
        $allval2 = base64_encode($allval2);
        $allval3 = "Change Appointmentszpq".$request->allyearmonth;
        $allval3 = base64_encode($allval3);
        $allval4 = "Cancel Appointmentszpq".$request->allyearmonth;
        $allval4 = base64_encode($allval4);
        echo '<tr><td><a href="'.url("acommonthgraph2").'/'.$allval1.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph2").'/'.$allval2.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph2").'/'.$allval3.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph2").'/'.$allval4.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
        echo '</tbody></table></td></tr></table>';
    }
    public function comparisontab111()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->join('appointments', 'client_appointment_lists.id', 'appointments.appointment_id')->groupBy('appointments.appointment_id')->get();
        $data['changedappointments'] = DB::table('client_appointment_lists')->join('change_appointment', 'client_appointment_lists.id', 'change_appointment.appointment_id')->groupBy('change_appointment.appointment_id')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab111')->with($data);
    }
    public function yearlycomappointment(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr></tr></thead><tbody><tr><td class="fixed-side">New Clients</td></tr><tr><td class="fixed-side">New Appointments</td></tr><tr><td class="fixed-side">Change Appointments</td></tr><tr><td class="fixed-side">Cancel Appointments</td></tr></tbody></table></td>';
        foreach($allyearmonth as $year){
            $uid = "";
            if((Auth::user()->role) == "affiliate"){
                $uid = Auth::id();
            }
            else{
                $uid = Auth::user()->affiliate_user_id;
            }
            $contacts = DB::table('contacts')->get();
            $month = "01";
            $month_year = $year."-".$month; $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT); $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT); $month_year3 = $year."-".str_pad(($month +3), 2, '0', STR_PAD_LEFT);
            $month_year4 = $year."-".str_pad(($month +4), 2, '0', STR_PAD_LEFT); $month_year5 = $year."-".str_pad(($month +5), 2, '0', STR_PAD_LEFT); $month_year6 = $year."-".str_pad(($month +6), 2, '0', STR_PAD_LEFT); $month_year7 = $year."-".str_pad(($month +7), 2, '0', STR_PAD_LEFT); $month_year8 = $year."-".str_pad(($month +8), 2, '0', STR_PAD_LEFT); $month_year9 = $year."-".str_pad(($month +9), 2, '0', STR_PAD_LEFT); $month_year10 = $year."-".str_pad(($month +10), 2, '0', STR_PAD_LEFT); $month_year11 = $year."-".str_pad(($month +11), 2, '0', STR_PAD_LEFT); $month_year12 = $year."-".str_pad(($month +12), 2, '0', STR_PAD_LEFT);
            $emcnt = 0; $emcnt2  = 0; $emcnt3 = 0; $emcnt4 = 0; $emcnt5 = 0; $emcnt6 = 0; $emcnt7 = 0; $emcnt8 = 0; $emcnt9 = 0; $emcnt10 = 0; $emcnt11 = 0; $emcnt12 = 0;
            $emailarr = []; $emailarr2 = []; $emailarr3 = []; $emailarr4 = []; $emailarr5 = []; $emailarr6 = []; $emailarr7 = []; $emailarr8 = []; $emailarr9 = []; $emailarr10 = []; $emailarr11 = []; $emailarr12 = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            $apptn2 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn2 as $aptn2) {
                if(($aptn2->email1 != "") && (in_array($aptn2->email1, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email1);
                    $emcnt2++;
                }
                if(($aptn2->email2 != "") && (in_array($aptn2->email2, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email2);
                    $emcnt2++;
                }
                if(($aptn2->email3 != "") && (in_array($aptn2->email3, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email3);
                    $emcnt2++;
                }
            }
            $apptn3 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn3 as $aptn3) {
                if(($aptn3->email1 != "") && (in_array($aptn3->email1, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email1);
                    $emcnt3++;
                }
                if(($aptn3->email2 != "") && (in_array($aptn3->email2, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email2);
                    $emcnt3++;
                }
                if(($aptn3->email3 != "") && (in_array($aptn3->email3, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email3);
                    $emcnt3++;
                }
            }
            $apptn4 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year3 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn4 as $aptn4) {
                if(($aptn4->email1 != "") && (in_array($aptn4->email1, $emailarr4) == false)){
                    array_push($emailarr, $aptn4->email1);
                    $emcnt4++;
                }
                if(($aptn4->email2 != "") && (in_array($aptn4->email2, $emailarr4) == false)){
                    array_push($emailarr, $aptn4->email2);
                    $emcnt4++;
                }
                if(($aptn4->email3 != "") && (in_array($aptn4->email3, $emailarr4) == false)){
                    array_push($emailarr, $aptn4->email3);
                    $emcnt4++;
                }
            }
            $apptn5 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year4 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn5 as $aptn5) {
                if(($aptn5->email1 != "") && (in_array($aptn5->email1, $emailarr5) == false)){
                    array_push($emailarr, $aptn5->email1);
                    $emcnt5++;
                }
                if(($aptn5->email2 != "") && (in_array($aptn5->email2, $emailarr5) == false)){
                    array_push($emailarr, $aptn5->email2);
                    $emcnt5++;
                }
                if(($aptn5->email3 != "") && (in_array($aptn5->email3, $emailarr5) == false)){
                    array_push($emailarr, $aptn5->email3);
                    $emcnt5++;
                }
            }
            $apptn6 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year5 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn6 as $aptn6) {
                if(($aptn6->email1 != "") && (in_array($aptn6->email1, $emailarr6) == false)){
                    array_push($emailarr, $aptn6->email1);
                    $emcnt6++;
                }
                if(($aptn6->email2 != "") && (in_array($aptn6->email2, $emailarr6) == false)){
                    array_push($emailarr, $aptn6->email2);
                    $emcnt6++;
                }
                if(($aptn6->email3 != "") && (in_array($aptn6->email3, $emailarr6) == false)){
                    array_push($emailarr, $aptn6->email3);
                    $emcnt6++;
                }
            }
            $apptn7 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year6 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn7 as $aptn7) {
                if(($aptn7->email1 != "") && (in_array($aptn7->email1, $emailarr7) == false)){
                    array_push($emailarr, $aptn7->email1);
                    $emcnt7++;
                }
                if(($aptn7->email2 != "") && (in_array($aptn7->email2, $emailarr7) == false)){
                    array_push($emailarr, $aptn7->email2);
                    $emcnt7++;
                }
                if(($aptn7->email3 != "") && (in_array($aptn7->email3, $emailarr7) == false)){
                    array_push($emailarr, $aptn7->email3);
                    $emcnt7++;
                }
            }
            $apptn8 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year7 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn8 as $aptn8) {
                if(($aptn8->email1 != "") && (in_array($aptn8->email1, $emailarr8) == false)){
                    array_push($emailarr, $aptn8->email1);
                    $emcnt8++;
                }
                if(($aptn8->email2 != "") && (in_array($aptn8->email2, $emailarr8) == false)){
                    array_push($emailarr, $aptn8->email2);
                    $emcnt8++;
                }
                if(($aptn8->email3 != "") && (in_array($aptn8->email3, $emailarr8) == false)){
                    array_push($emailarr, $aptn8->email3);
                    $emcnt8++;
                }
            }
            $apptn9 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year8 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn9 as $aptn9) {
                if(($aptn9->email1 != "") && (in_array($aptn9->email1, $emailarr9) == false)){
                    array_push($emailarr, $aptn9->email1);
                    $emcnt9++;
                }
                if(($aptn9->email2 != "") && (in_array($aptn9->email2, $emailarr9) == false)){
                    array_push($emailarr, $aptn9->email2);
                    $emcnt9++;
                }
                if(($aptn9->email3 != "") && (in_array($aptn9->email3, $emailarr9) == false)){
                    array_push($emailarr, $aptn9->email3);
                    $emcnt9++;
                }
            }
            $apptn10 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year9 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn10 as $aptn10) {
                if(($aptn10->email1 != "") && (in_array($aptn10->email1, $emailarr10) == false)){
                    array_push($emailarr, $aptn10->email1);
                    $emcnt10++;
                }
                if(($aptn10->email2 != "") && (in_array($aptn10->email2, $emailarr10) == false)){
                    array_push($emailarr, $aptn10->email2);
                    $emcnt10++;
                }
                if(($aptn10->email3 != "") && (in_array($aptn10->email3, $emailarr10) == false)){
                    array_push($emailarr, $aptn10->email3);
                    $emcnt10++;
                }
            }
            $apptn11 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year10 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn11 as $aptn11) {
                if(($aptn11->email1 != "") && (in_array($aptn11->email1, $emailarr11) == false)){
                    array_push($emailarr, $aptn11->email1);
                    $emcnt11++;
                }
                if(($aptn11->email2 != "") && (in_array($aptn11->email2, $emailarr11) == false)){
                    array_push($emailarr, $aptn11->email2);
                    $emcnt11++;
                }
                if(($aptn11->email3 != "") && (in_array($aptn11->email3, $emailarr11) == false)){
                    array_push($emailarr, $aptn11->email3);
                    $emcnt11++;
                }
            }
            $apptn12 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year11 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn12 as $aptn12) {
                if(($aptn12->email1 != "") && (in_array($aptn12->email1, $emailarr12) == false)){
                    array_push($emailarr, $aptn12->email1);
                    $emcnt12++;
                }
                if(($aptn12->email2 != "") && (in_array($aptn12->email2, $emailarr12) == false)){
                    array_push($emailarr, $aptn12->email2);
                    $emcnt12++;
                }
                if(($aptn12->email3 != "") && (in_array($aptn12->email3, $emailarr12) == false)){
                    array_push($emailarr, $aptn12->email3);
                    $emcnt12++;
                }
            }
            $new_appointmentt = $emcnt + $emcnt2 + $emcnt3 + $emcnt4 + $emcnt5 + $emcnt6 + $emcnt7 + $emcnt8 + $emcnt9 + $emcnt10 + $emcnt11 + $emcnt12;
            $getclnt = ClientAppointmentList::where('created_at', 'like', '%' . $year . '%')->where('uid', $uid)->count();
            $getcount = DB::table('change_appointment')->where('created_at', 'like', '%' . $year . '%')->where('uid', $uid)->count();
            $getcount2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $year . '%')->where('uid', $uid)->count();
            echo '<td style="padding: 0"><table class="table table-striped table-bordered table-hover" style="min-width: 150px; margin-bottom: 0;"><thead><tr><th colspan="2">'.$year.'</th></tr></thead><tbody><tr>
                        <td>'; if($getclnt != 0){ echo '<a class="new_client_det" id="01nclient123">'; } echo ''.$getclnt.'';if($getclnt != 0){ echo '</a>'; } echo '</td>
                    </tr><tr>
                    <td>'; if($new_appointmentt != 0){ echo '<a class="new_appointment_det" id="01nappointments123">'; } echo ''.$new_appointmentt.'';if($new_appointmentt != 0){ echo '</a>'; } echo '</td>
                </tr><tr>
                    <td>'; if($getcount != 0){ echo '<a class="change_appointment_det" id="01cappointments123">'; } echo ''.$getcount.'';if($getcount != 0){ echo '</a>'; } echo '</td>
                </tr><tr>
                    <td>'; if($getcount2 != 0){ echo '<a class="cancel_appointment_det" id="01canappointments123">'; } echo ''.$getcount2.'';if($getcount2 != 0){ echo '</a>'; } echo '</td>
                </tr></tbody></table></td>';
        }
        echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
        $allval1 = "New Clientszpq".$request->allyearmonth;
        $allval1 = base64_encode($allval1);
        $allval2 = "New Appointmentszpq".$request->allyearmonth;
        $allval2 = base64_encode($allval2);
        $allval3 = "Change Appointmentszpq".$request->allyearmonth;
        $allval3 = base64_encode($allval3);
        $allval4 = "Cancel Appointmentszpq".$request->allyearmonth;
        $allval4 = base64_encode($allval4);
        echo '<tr><td><a href="'.url("acommonthgraph3").'/'.$allval1.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph3").'/'.$allval2.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph3").'/'.$allval3.'"><i class="fa fa-bar-chart"></i></a></td></tr><tr><td><a href="'.url("acommonthgraph3").'/'.$allval4.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
        echo '</tbody></table></td></tr></table>';
    }
    public function comparisontab33()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['email_campaigns'] = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_email'] = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_card'] = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_video'] = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_sms'] = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab33')->with($data);
    }
    public function quarterlyyearlycomemail_campaign(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January - March"; }elseif($month == '04'){ $mon = "April - June"; }elseif($month == '07'){ $mon = "July - September"; }elseif($month == '10'){ $mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = EmailCampaign::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->orWhere('date', 'like', '%' . $month_year1 . '%')->orWhere('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraph2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function quarterlyyearlycomsend_email(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January - March"; }elseif($month == '04'){ $mon = "April - June"; }elseif($month == '07'){ $mon = "July - September"; }elseif($month == '10'){ $mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendEmail::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->orWhere('date', 'like', '%' . $month_year1 . '%')->orWhere('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphse2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function quarterlyyearlycomsend_card(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January - March"; }elseif($month == '04'){ $mon = "April - June"; }elseif($month == '07'){ $mon = "July - September"; }elseif($month == '10'){ $mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendCard::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->orWhere('date', 'like', '%' . $month_year1 . '%')->orWhere('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphsc2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function quarterlyyearlycomsend_video(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January - March"; }elseif($month == '04'){ $mon = "April - June"; }elseif($month == '07'){ $mon = "July - September"; }elseif($month == '10'){ $mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendVideo::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->orWhere('date', 'like', '%' . $month_year1 . '%')->orWhere('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphsv2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function quarterlyyearlycomsend_sms(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $month = $det[1];
                $mon = "";
                if($month == '01'){ $mon = "January - March"; }elseif($month == '04'){ $mon = "April - June"; }elseif($month == '07'){ $mon = "July - September"; }elseif($month == '10'){ $mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendSms::where('email', $value->email)->where('date', 'like', '%' . $month_year . '%')->orWhere('date', 'like', '%' . $month_year1 . '%')->orWhere('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$month.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphss2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function comparisontab333()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['email_campaigns'] = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_email'] = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_card'] = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_video'] = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['send_sms'] = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab333')->with($data);
    }
    public function yearlycomemail_campaign(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = EmailCampaign::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Email</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = EmailCampaign::where('email', $value->email)->where('date', 'like', '%' . $details . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$details.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraph3").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function yearlycomsend_email(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendEmail::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Email</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendEmail::where('email', $value->email)->where('date', 'like', '%' . $details . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$details.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphse3").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function yearlycomsend_card(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendCard::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Email</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendCard::where('email', $value->email)->where('date', 'like', '%' . $details . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$details.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphsc3").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function yearlycomsend_video(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendVideo::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Email</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendVideo::where('email', $value->email)->where('date', 'like', '%' . $details . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$details.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphsv3").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function yearlycomsend_sms(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = SendSms::groupBy('email')->where('uid', $uid)->orderBy('id', 'desc')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->email.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = SendSms::where('email', $value->email)->where('date', 'like', '%' . $details . '%')->where('uid', $uid)->count();
                    if($mailcount > 0){
                        echo '<tr><td><a class="email_campaign_details" id="'.$details.'email_campaign'.$value->email.'">'.$mailcount.'</a></td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->email."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                echo '<tr><td><a href="'.url("ecommonthgraphss3").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function comparisontab44()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab44')->with($data);
    }
    public function quarterlyyearlyrevenue(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('revenue_account')->where('uid', $uid)->groupBy('account_name')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->account_name.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $mnt = $det[1];
                $month = "";
                $mon = "";
                if($mnt == 'Jan'){ $month = '01';$mon = "January - March"; }elseif($mnt == 'Apr'){ $month = '04';$mon = "April - June"; }elseif($mnt == 'Jul'){ $month = '07';$mon = "July - September"; }elseif($mnt == 'Oct'){ $month = '10';$mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad((intval($month) +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad((intval($month) +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount1 = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_name)->sum('bill');
                    $mailcount2 = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->where('account_description', $value->account_name)->sum('bill');
                    $mailcount3 = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->where('account_description', $value->account_name)->sum('bill');
                    $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_name.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->account_name."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_name.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcommonthgraph2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function quarterlyyearlycomexpenses(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('expense_record')->where('uid', $uid)->groupBy('account_description')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->account_description.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $mnt = $det[1];
                $month = "";
                $mon = "";
                if($mnt == 'Jan'){ $month = '01';$mon = "January - March"; }elseif($mnt == 'Apr'){ $month = '04';$mon = "April - June"; }elseif($mnt == 'Jul'){ $month = '07';$mon = "July - September"; }elseif($mnt == 'Oct'){ $month = '10';$mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad((intval($month) +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad((intval($month) +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount1 = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $value->account_description)->sum('amount_paid');
                    $mailcount2 = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->where('account_description', $value->account_description)->sum('amount_paid');
                    $mailcount3 = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->where('account_description', $value->account_description)->sum('amount_paid');
                    $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_description.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->account_description."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcommonthgraphex2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function quarterlyyearlycomasset(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('asset_record')->where('uid', $uid)->groupBy('description')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr><tr><th>Month</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->description.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                $det = explode('nqd', $details);
                $year = $det[0];
                $mnt = $det[1];
                $month = "";
                $mon = "";
                if($mnt == 'Jan'){ $month = '01';$mon = "January - March"; }elseif($mnt == 'Apr'){ $month = '04';$mon = "April - June"; }elseif($mnt == 'Jul'){ $month = '07';$mon = "July - September"; }elseif($mnt == 'Oct'){ $month = '10';$mon = "October - December"; }
                $month_year = $year."-".$month;
                $month_year1 = $year."-".str_pad((intval($month) +1), 2, '0', STR_PAD_LEFT);
                $month_year2 = $year."-".str_pad((intval($month) +2), 2, '0', STR_PAD_LEFT);
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$year.'</th></tr><tr><th colspan="2">'.$mon.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount1 = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('description', $value->description)->sum('price');
                    $mailcount2 = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->where('description', $value->description)->sum('price');
                    $mailcount3 = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->where('description', $value->description)->sum('price');
                    $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->description.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr><tr><th style="padding: 18px;"></th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->description."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcommonthgraphas2").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function comparisontab444()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = ArchivesBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('comparisontab444')->with($data);
    }
    public function yearlyrevenue(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('revenue_record_update')->where('uid', $uid)->groupBy('account_description')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->account_description.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = DB::table('revenue_record')->where('created_at', 'like', '%' . $details . '%')->where('uid', $uid)->where('account_description', $value->account_description)->sum('bill');
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_description.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->account_description."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcomyeargraph").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function yearlycomexpenses(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('expense_record_update')->where('uid', $uid)->groupBy('account_description')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->account_description.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = DB::table('expense_record')->where('created_at', 'like', '%' . $details . '%')->where('uid', $uid)->where('account_description', $value->account_description)->sum('amount_paid');
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->account_description.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->account_description."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcomyeargraphex").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function yearlycomasset(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $allyearmonth = explode(',', $request->allyearmonth);
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $email_campaigns = DB::table('asset_record')->where('uid', $uid)->groupBy('description')->get();
        if(count($email_campaigns) > 0){
            echo '<table class="table table-striped table-hover" style="overflow-x: auto;display: block;margin-top: 10px;"><tr><td style="padding: 0"><table class="table table-striped table-bordered" style="margin-bottom: 0;"><thead><tr><th>Year</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                echo '<tr><td>'.$value->description.'</td></tr>';
            }
            echo '</tbody></table></td>';
            foreach($allyearmonth as $details){
                echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 150px;"><thead><tr><th colspan="2">'.$details.'</th></tr></thead><tbody>';
                foreach($email_campaigns as $value){
                    $mailcount = DB::table('asset_record')->whereYear('created_at', $details)->where('uid', $uid)->where('description', $value->description)->sum('price');
                    if($mailcount > 0){
                        echo '<tr><td>'; if($mailcount != 0){ echo '<a class="revenue_det" id="01n123'.$value->description.'">'; } echo ''.$mailcount.'';if($mailcount != 0){ echo '</a>'; } echo '</td></tr>';
                    }
                    else{
                        echo '<tr><td>'.$mailcount.'</td></tr>';
                    }
                }
                echo '</tbody></table></td>';
            }
            echo '<td style="padding: 0;"><table class="table table-striped table-bordered table-hover" style="margin-bottom: 0; min-width: 50px;"><thead><tr><th>Graph</th></tr></thead><tbody>';
            foreach($email_campaigns as $value){
                $allval = $value->description."zpq".$request->allyearmonth;
                $allval = base64_encode($allval);
                // echo '<tr><td><a onclick="monyrcomgraph(this.id)" id="'.$value->account_description.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
                echo '<tr><td><a href="'.url("fcomyeargraphas").'/'.$allval.'"><i class="fa fa-bar-chart"></i></a></td></tr>';
            }
            echo '</tbody></table></td></tr></table>';
        }
        else{
            echo '<table class="table table-striped table-bordered table-hover" style="min-width: 300px; margin-top: 10px; text-align: center"><tbody><tr><td style="text-align: center !important;">No Records Found.</tr></tbody></table>';
        }
    }
    public function comparison_finance2()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_finance2')->with($data);
    }
    public function comparison_finance3()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('comparison_finance3')->with($data);
    }
// ram code here
  public function update_financial_invoice_setup(Request $request)
  {
        //\LogActivity::addToLog('Invoice Setup','view',Auth::user());
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $val = $request->is_tax;
        if($val == 1){
            $value1 = array(
                'account_name'  => "Sales Tax Collected",
                'amount'        => "",
                'date'          => date('Y-m-d'),
                'uid'           => $uid
            );
            $exist1 = DB::table('revenue_account')->where('account_name', "Sales Tax Collected")->where('uid', $uid)->get();
            if(count($exist1) == 0){
                DB::table('revenue_account')->insert($value1);
            }
        $notification  = getNotificationMessage(62);
        $message = $notification;
        $subject = "Sales Tax Collected ";
         addUserActivity($subject,'update',$notification,$message);
            $value2 = array(
                'name'      => "Sales Tax Collected",
                'jan'       => 0,
                'feb'       => 0,
                'mar'       => 0,
                'apr'       => 0,
                'may'       => 0,
                'jun'       => 0,
                'jul'       => 0,
                'aug'       => 0,
                'sep'       => 0,
                'oct'       => 0,
                'nov'       => 0,
                'decem'     => 0,
                'uid'       => $uid
            );
            $exist2 = DB::table('revenue_budget')->where('name', "Sales Tax Collected")->where('uid', $uid)->get();
            if(count($exist2) == 0){
                DB::table('revenue_budget')->insert($value2);
                DB::table('revenue_projection')->insert($value2);
            }
            $value3 = array(
                'name'          => "Sales Tax Collected",
                'janmar'        => 0,
                'aprjun'        => 0,
                'julsep'        => 0,
                'octdec'        => 0,
                'uid'           => $uid
            );
            $exist3 = DB::table('revenue_quaterly_budget')->where('name', "Sales Tax Collected")->where('uid', $uid)->get();
            if(count($exist3) == 0){
                DB::table('revenue_quaterly_budget')->insert($value3);
                DB::table('revenue_quaterly_projection')->insert($value3);
            }
            $value4 = array(
                'account_name'  => "Sales Tax Paid",
                'amount'        => "",
                'date'          => date('Y-m-d'),
                'uid'           => $uid
            );
            $exist4 = DB::table('expenses_account')->where('account_name', "Sales Tax Paid")->where('uid', $uid)->get();
            if(count($exist4) == 0){
                DB::table('expenses_account')->insert($value4);
            }
            $value5 = array(
                'name'      => "Sales Tax Paid",
                'jan'       => 0,
                'feb'       => 0,
                'mar'       => 0,
                'apr'       => 0,
                'may'       => 0,
                'jun'       => 0,
                'jul'       => 0,
                'aug'       => 0,
                'sep'       => 0,
                'oct'       => 0,
                'nov'       => 0,
                'decem'     => 0,
                'uid'       => $uid
            );
            $exist5 = DB::table('expense_budget')->where('name', "Sales Tax Paid")->where('uid', $uid)->get();
            if(count($exist5) == 0){
                DB::table('expense_budget')->insert($value5);
                DB::table('expense_projection')->insert($value5);
            }
            $value6 = array(
                'name'          => "Sales Tax Paid",
                'janmar'        => 0,
                'aprjun'        => 0,
                'julsep'        => 0,
                'octdec'        => 0,
                'uid'           => $uid
            );
            $exist6 = DB::table('expense_quaterly_budget')->where('name', "Sales Tax Paid")->where('uid', $uid)->get();
            if(count($exist6) == 0){
                DB::table('expense_quaterly_budget')->insert($value6);
                DB::table('expense_quaterly_projection')->insert($value6);
            }
            $data['years'] = [];
            for($i = 0; $i < 10; $i++){
                $lastYear = date("Y", strtotime("-$i years"));
                if($lastYear > 2019){
                    array_push($data['years'], $lastYear);
                }
            }
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
            foreach($data['years'] as $year){
                foreach($months as $month){
                    $tax = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('tax');
                    $revrecrd = DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                    if(count($revrecrd) == 0){
                        DB::table('revenue_record')->insert([
                            'transaction_date'      => $year."-".$month."-01",
                            'account_description'   => "Sales Tax Collected",
                            'bill'                  => $tax,
                            'tax'                   => "0",
                            'shipping'              => "0",
                            'total'                 => $tax,
                            'amount_paid'           => $tax,
                            'balance'               => "0",
                            'created_at'            => $year."-".$month."-01",
                            'uid'                   => $uid
                        ]);
                    }
                    // $exprecrd = DB::table('expense_record')->where('account_description', '!=', 'Sales Tax Paid')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->get();
                    // if(count($exprecrd) == 0){
                    //     DB::table('expense_record')->insert([
                    //         'transaction_date'      => $year."-".$month."-01",
                    //         'account_description'   => "Sales Tax Paid",
                    //         'total'                 => $tax,
                    //         'amount_paid'           => $tax,
                    //         'balance'               => "0",
                    //         'created_at'            => $year."-".$month."-01",
                    //         'uid'                   => $uid
                    //     ]);
                    // }
                }
            }
        }
        else{
            DB::table('revenue_account')->where('account_name', "Sales Tax Collected")->where('uid', $uid)->delete();
            DB::table('expenses_account')->where('account_name', "Sales Tax Paid")->where('uid', $uid)->delete();
            DB::table('expense_quaterly_budget')->where('name', "Sales Tax Paid")->where('uid', $uid)->delete();
            DB::table('expense_quaterly_projection')->where('name', "Sales Tax Paid")->where('uid', $uid)->delete();
            DB::table('expense_budget')->where('name', "Sales Tax Paid")->where('uid', $uid)->delete();
            DB::table('expense_projection')->where('name', "Sales Tax Paid")->where('uid', $uid)->delete();
            DB::table('revenue_quaterly_budget')->where('name', "Sales Tax Collected")->where('uid', $uid)->delete();
            DB::table('revenue_quaterly_projection')->where('name', "Sales Tax Collected")->where('uid', $uid)->delete();
            DB::table('revenue_budget')->where('name', "Sales Tax Collected")->where('uid', $uid)->delete();
            DB::table('revenue_projection')->where('name', "Sales Tax Collected")->where('uid', $uid)->delete();
            DB::table('revenue_record')->where('account_description', 'Sales Tax Collected')->where('uid', $uid)->delete();
            // DB::table('expense_record')->where('account_description', 'Sales Tax Paid')->where('uid', $uid)->delete();
        }
        $vall = $request->shipping_cost;
        if($vall == 1){
            $value7 = array(
                'account_name'  => "Shipping Collected",
                'amount'        => "",
                'date'          => date('Y-m-d'),
                'uid'           => $uid
            );
            $exist7 = DB::table('revenue_account')->where('account_name', "Shipping Collected")->where('uid', $uid)->get();
            if(count($exist7) == 0){
                DB::table('revenue_account')->insert($value7);
            }
            $value8 = array(
                'name'      => "Shipping Collected",
                'jan'       => 0,
                'feb'       => 0,
                'mar'       => 0,
                'apr'       => 0,
                'may'       => 0,
                'jun'       => 0,
                'jul'       => 0,
                'aug'       => 0,
                'sep'       => 0,
                'oct'       => 0,
                'nov'       => 0,
                'decem'     => 0,
                'uid'       => $uid
            );
            $exist8 = DB::table('revenue_budget')->where('name', "Shipping Collected")->where('uid', $uid)->get();
            if(count($exist8) == 0){
                DB::table('revenue_budget')->insert($value8);
                DB::table('revenue_projection')->insert($value8);
            }
            $value9 = array(
                'name'          => "Shipping Collected",
                'janmar'        => 0,
                'aprjun'        => 0,
                'julsep'        => 0,
                'octdec'        => 0,
                'uid'           => $uid
            );
            $exist9 = DB::table('revenue_quaterly_budget')->where('name', "Shipping Collected")->where('uid', $uid)->get();
            if(count($exist9) == 0){
                DB::table('revenue_quaterly_budget')->insert($value9);
                DB::table('revenue_quaterly_projection')->insert($value9);
            }
            $value10 = array(
                'account_name'  => "Shipping Paid",
                'amount'        => "",
                'date'          => date('Y-m-d'),
                'uid'           => $uid
            );
            $exist10 = DB::table('expenses_account')->where('account_name', "Shipping Paid")->where('uid', $uid)->get();
            if(count($exist10) == 0){
                DB::table('expenses_account')->insert($value10);
            }
            $value11 = array(
                'name'      => "Shipping Paid",
                'jan'       => 0,
                'feb'       => 0,
                'mar'       => 0,
                'apr'       => 0,
                'may'       => 0,
                'jun'       => 0,
                'jul'       => 0,
                'aug'       => 0,
                'sep'       => 0,
                'oct'       => 0,
                'nov'       => 0,
                'decem'     => 0,
                'uid'       => $uid
            );
            $exist11 = DB::table('expense_budget')->where('name', "Shipping Paid")->where('uid', $uid)->get();
            if(count($exist11) == 0){
                DB::table('expense_budget')->insert($value11);
                DB::table('expense_projection')->insert($value11);
            }
            $value12 = array(
                'name'          => "Shipping Paid",
                'janmar'        => 0,
                'aprjun'        => 0,
                'julsep'        => 0,
                'octdec'        => 0,
                'uid'           => $uid
            );
            $exist12 = DB::table('expense_quaterly_budget')->where('name', "Shipping Paid")->where('uid', $uid)->get();
            if(count($exist12) == 0){
                DB::table('expense_quaterly_budget')->insert($value12);
                DB::table('expense_quaterly_projection')->insert($value12);
            }
            $data['years'] = [];
            for($i = 0; $i < 10; $i++){
                $lastYear = date("Y", strtotime("-$i years"));
                if($lastYear > 2019){
                    array_push($data['years'], $lastYear);
                }
            }
            $months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
            foreach($data['years'] as $year){
                foreach($months as $month){
                    $shipping = DB::table('revenue_record')->where('account_description', '!=', 'Sales Tax Collected')->where('account_description', '!=', 'Shipping Collected')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->sum('shipping');
                    $revrecrd = DB::table('revenue_record')->where('account_description', 'Shipping Collected')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->where('uid', $uid)->get();
                    if(count($revrecrd) == 0){
                        DB::table('revenue_record')->insert([
                            'transaction_date'      => $year."-".$month."-01",
                            'account_description'   => "Shipping Collected",
                            'bill'                  => $shipping,
                            'tax'                   => "0",
                            'shipping'              => "0",
                            'total'                 => $shipping,
                            'amount_paid'           => $shipping,
                            'balance'               => "0",
                            'created_at'            => $year."-".$month."-01",
                            'uid'                   => $uid
                        ]);
                    }
                    // $exprecrd = DB::table('expense_record')->where('account_description', '!=', 'Shipping Paid')->whereYear('transaction_date', $year)->whereMonth('transaction_date', $month)->get();
                    // if(count($exprecrd) == 0){
                    //     DB::table('expense_record')->insert([
                    //             'transaction_date'      => $year."-".$month."-01",
                    //             'account_description'   => "Shipping Paid",
                    //             'total'                 => $shipping,
                    //             'amount_paid'           => $shipping,
                    //             'balance'               => "0",
                    //             'created_at'            => $year."-".$month."-01",
                    //             'uid'                   => $uid
                    //         ]);
                    // }
                }
            }
        }
        else{
            DB::table('revenue_account')->where('account_name', "Shipping Collected")->where('uid', $uid)->delete();
            DB::table('expenses_account')->where('account_name', "Shipping Paid")->where('uid', $uid)->delete();
            DB::table('expense_quaterly_budget')->where('name', "Shipping Paid")->where('uid', $uid)->delete();
            DB::table('expense_quaterly_projection')->where('name', "Shipping Paid")->where('uid', $uid)->delete();
            DB::table('expense_budget')->where('name', "Shipping Paid")->where('uid', $uid)->delete();
            DB::table('expense_projection')->where('name', "Shipping Paid")->where('uid', $uid)->delete();
            DB::table('revenue_quaterly_budget')->where('name', "Shipping Collected")->where('uid', $uid)->delete();
            DB::table('revenue_quaterly_projection')->where('name', "Shipping Collected")->where('uid', $uid)->delete();
            DB::table('revenue_budget')->where('name', "Shipping Collected")->where('uid', $uid)->delete();
            DB::table('revenue_projection')->where('name', "Shipping Collected")->where('uid', $uid)->delete();
            DB::table('revenue_record')->where('account_description', 'Shipping Collected')->where('uid', $uid)->delete();
            // DB::table('expense_record')->where('account_description', 'Shipping Paid')->where('uid', $uid)->delete();
        }
        if(!empty($request->id))
        {
                $Contacts = FinancialInvoiceSetup::where('id', $request->id)->update([
                     'is_tax'           => $request->is_tax,
                    'tax_rate'          => $request->tax_rate,
                    'shipping_cost'     => $request->shipping_cost,
                    'shipping_rate'     => $request->shipping_rate,
                    'shipping_amount'   => $request->shipping_amount,
                    'shipping_method'   => $request->shipping_method,
                ]);
                Session::flash('success', "Success!");
                return redirect('financial_mgmt_invoice_setup')->with('status',"Inserted successfully");
        }
        else{
            $Contacts = FinancialInvoiceSetup::create([
                'is_tax'            => $request->is_tax,
                'tax_rate'          => $request->tax_rate,
                'shipping_cost'     => $request->shipping_cost,
                'shipping_rate'     => $request->shipping_rate,
                'shipping_amount'   => $request->shipping_amount,
                'shipping_method'   => $request->shipping_method,
                'uid'               => $uid
            ]);
            return redirect('financial_mgmt_invoice_setup')->with('status',"Updated successfully");
        }
    }
    public function appointment_stepp3()
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = AppointmentBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $clientid = Session::get('clientid');
        $data['id'] = $clientid;
        $data['appointment_settings_day'] = DB::table('appointment_settings')->where('uemail',$uemail)->first();
        //print_r($data['top_banners']);die();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('appointment_step3')->with($data);
    }
    public function balancesheet_report()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['client'] = DB::table('client_appointment_lists')->where('uid', $uid)->orderBy('id', 'desc')->whereYear('created_at',date('Y'))->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('balancesheet_report')->with($data);
    }
   public function paymentbalance_report()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['client'] = DB::table('client_appointment_lists')->where('uid', $uid)->orderBy('id', 'desc')->get();
        $data['revenue'] = DB::table('revenue_record')->where('uid', $uid)->whereNotIn('account_description',['Sales Tax Collected','Shipping Collected'])->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', date('m'))->orderBy('transaction_date', 'desc')->groupBy('account_description')->get();
         $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('paymentbalance_report')->with($data);
    }
    public function paymentbalance_quaterly_report()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['client'] = DB::table('client_appointment_lists')->where('uid', $uid)->orderBy('id', 'desc')->get();
         $data['category'] = CardCategory::orderBy('category','desc')->get();
        $data['cards'] = UploadCard::groupBy('category')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('paymentbalance_quaterly_report')->with($data);
    }
    public static function get_month_balance($months, $email)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = DB::table('revenue_record')->where('client_email', $email)->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->sum('balance');
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public static function get_month_paymentbalance($months, $email)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $current_year = date('Y');
        $month_year = $current_year."-".$months;
        // DB::enableQueryLog();
        $getcount = DB::table('revenue_record')->where('client_email', $email)->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->sum('amount_paid');
        // print_r(DB::getQueryLog());die();
        return $getcount;
    }
    public function upload_files()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['clients'] = DB::table('client_appointment_lists')->where('uid', $uid)->get();
        $data['revenue_account'] = DB::table('revenue_account')->where('uid', $uid)->get();
        $data['revenue_records'] = DB::table('revenue_record')->where('uid', $uid)->get();
        $data['banner'] = DB::table('affiliate_banner')->where('affiliate_email', $uemail)->first();
        $data['files'] = DB::table('upload_files')->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('upload_files')->with($data);
    }
    public function upload_file_submit(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        if($request->hasFile('image'))
            {
                $file = $request->file('image');
                $filenames = explode('.', $file->getClientOriginalName());
                $filename = $filenames[0];
                $extension = $file->getClientOriginalExtension();
                $fileNameToStore = $filename.'_'.time().'.'.$extension;
                $destinationPath = 'public/assets/files_upload';
                if($file->move($destinationPath,$fileNameToStore))
                {
                    $val = DB::table('upload_files')->insert([
                        'file'                 => $fileNameToStore,
                        'uid'                   => $uid
                    ]);
                    Session::flash('success', "Success!");
         $notification  = getNotificationMessage(25);
        $message = $notification;
        $subject = "File Uploaded ";
         addUserActivity($subject,'update',$notification,$message);
                    return redirect()->back()->with('status',"Inserted successfully");
                }
                else {
                    return redirect()->back()->with('status',"Something went wrong!!!");
                }
            }
            abort(500, 'Could not upload image :(');
    }
    public function clientprevdetails(Request $request)
    {
        $email = $request->email;
        $arr = "";
        $user1=User::where('email',$email)->first();
        $show_pass=$user1->show_pass;
        $details1 = ClientAppointmentList::where('email', $email)->orderBy('id', 'desc')->get();
        if(count($details1) > 0){
            $arr = ["client", $details1[0]->first_name, $details1[0]->last_name, $details1[0]->address, $details1[0]->dob, $details1[0]->home_phone, $details1[0]->cell_phone, $show_pass];
        }
        else{
            $details2 = AffiliateRegistration::where('email', $email)->get();
            if(count($details2) > 0){
                $arr = ["affiliate",$details2[0]->first_name, $details2[0]->last_name, $details2[0]->address, $details2[0]->cellphone, $show_pass];
            }
            else{
                $details3 = DB::table('user_access_role')->join('users', 'user_access_role.email', 'users.email')->where('user_access_role.email', $email)->get();
                if(count($details3) > 0){
                    $arr = ["user", $details3[0]->first_name, $details3[0]->last_name, $details3[0]->address, $details3[0]->cellphone, $show_pass];
                }
            }
        }
        return $arr;
    }
    public function clientemailavailability(Request $request)
    {
        //\LogActivity::addToLog('visited profile','view',Auth::user());
        $email = $request->email;
        $cdata = User::where('email', $email)->get();
        if (count($cdata) > 0) {
            if($cdata[0]->role == "client"){
                echo "success";
            }
            else{
                echo "unuseable";
            }
        }
        else{
            echo "fail";
        }
    }
    public function apppointmentnotificationpopup(Request $request)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $popuptime = DB::table('appointment_settings')->where('uemail', $uemail)->get();
        if(count($popuptime) > 0 ){
            $allappointment  = DB::table('appointments')->where('appointment_date', date('Y-m-d'))->where('appointment_time', date("H:i", strtotime("+".$popuptime[0]->popup_reminder." minutes")))->where('uid', $uid)->get();
            // print_r(date("H:i", strtotime("+".$popuptime->popup_reminder." minutes")));die();
            if(count($allappointment) > 0)
            {
                foreach ($allappointment as $value) {
                    $appointments = DB::table('appointments')
                        ->select('client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category')
                        ->join('users', 'users.id', '=', 'appointments.uid')
                        ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                        ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
                        ->where('appointments.id', $value->id)
                        ->where('appointments.cstatus', "on")
                        ->first();
                    echo '<div class="col-md-12 shadow-boxx margin-bottom-10">
                            <div class="col-md-12 text-center margin-bottom-20" style="background-color: #da291c; padding: 0px; border-radius: 10px;">
                                <h4 style="color: #fff; font-weight: 400; margin-top: 10px; margin-bottom: 10px;">Appointment for '.$appointments->client_first_name.' '.$appointments->client_last_name.'</h4>
                            </div>
                            <div class="col-md-12 text-center padding-0">
                                <table class="profile-info margin-bottom-10" style="width: 100%">
                                    <tbody>
                                        <tr>
                                            <td style="width: 30%"><b>Date : </b></td>
                                            <td style="width: 70%"><b>'.date('d F Y', strtotime($appointments->appointment_date)).', '.Carbon::parse($appointments->appointment_date)->format('l').'</b></td>
                                        </tr>
                                        <tr>
                                            <td style="width: 30%"><b>Time : </b></td>
                                            <td style="width: 70%"><b>'.date('h:i A', strtotime($appointments->appointment_time)).'</b></td>
                                        </tr>
                                        <tr>
                                            <td style="width: 30%"><b>With : </b></td>
                                            <td style="width: 70%">'.$appointments->affiliate_first_name.' '.$appointments->affiliate_last_name.'</td>
                                        </tr>
                                        <tr>
                                            <td><b>Company: </b></td>
                                            <td>&nbsp;'.$appointments->client_company.'</td>
                                        </tr>
                                        <tr>
                                            <td style="vertical-align: baseline;"><b>Address: </b></td>
                                            <td>&nbsp;'.$appointments->client_address.',<br> State- '.$appointments->client_state.', Country- '.$appointments->client_country.', '.$appointments->client_city.'-'.$appointments->client_zip.'</td>
                                        </tr>
                                        <tr>
                                            <td><b>Phone: </b></td>
                                            <td>&nbsp;'.$appointments->client_phone.'</td>
                                        </tr>
                                        <tr>
                                            <td style="width: 30%; vertical-align: baseline;"><b>Reason : </b></td>
                                            <td style="width: 70%">'.$appointments->appointment_reason.'</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>';
                }
            }
            else{
                echo "false";
            }
        }
        else{
            echo "false";
        }
    }
    public function apppointmentnotification(Request $request)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $popuptime = DB::table('appointment_settings')->where('uemail', $uemail)->first();
        $notification_unit = $popuptime->notification_unit;
        $allappointment = "";
        if($notification_unit == "hours"){
            $allappointment  = DB::table('appointments')->where('appointment_date', date('Y-m-d'))->where('appointment_time', date("H:i", strtotime("+".$popuptime->notification_time." hours")))->where('uid', $uid)->get();
        }
        else{
            $allappointment  = DB::table('appointments')->where('appointment_date', date("Y-m-d", strtotime("+".$popuptime->notification_time." days")))->where('uid', $uid)->get();
        }
        // print_r(date("H:i", strtotime("+".$popuptime->popup_reminder." minutes")));die();
        if(count($allappointment) > 0)
        {
            foreach ($allappointment as $value) {
                $appointments = DB::table('appointments')
                    ->select('client_appointment_lists.first_name as client_first_name', 'client_appointment_lists.last_name as client_last_name', 'client_appointment_lists.email as client_email', 'client_appointment_lists.company as client_company', 'client_appointment_lists.address as client_address', 'client_appointment_lists.state as client_state','client_appointment_lists.country as client_country', 'client_appointment_lists.zip_code as client_zip', 'client_appointment_lists.city as client_city', 'client_appointment_lists.cell_phone as client_phone', 'appointments.appointment_date as appointment_date', 'appointments.appointment_time as appointment_time', 'appointments.appointment_end as appointment_end', 'appointments.appointment_reason as appointment_reason', 'affiliate_registrations.first_name as affiliate_first_name', 'affiliate_registrations.last_name as affiliate_last_name', 'affiliate_registrations.email as affiliate_email', 'affiliate_registrations.image as affiliate_image', 'affiliate_registrations.cellphone as affiliate_phone', 'affiliate_registrations.address as affiliate_address', 'affiliate_registrations.state as affiliate_state', 'affiliate_registrations.country as affiliate_country', 'affiliate_registrations.city as affiliate_city', 'affiliate_registrations.zip_code as affiliate_zip', 'affiliate_registrations.religion as affiliate_religion', 'affiliate_registrations.business_category as affiliate_category')
                    ->join('users', 'users.id', '=', 'appointments.uid')
                    ->join('affiliate_registrations', 'affiliate_registrations.email', '=', 'users.email')
                    ->join('client_appointment_lists', 'appointments.appointment_id', '=', 'client_appointment_lists.id')
                    ->where('appointments.id', $value->id)
                    ->where('appointments.cstatus', "on")
                    ->first();
                $message = '<div class="col-md-12 shadow-boxx margin-bottom-10">
                        <div class="col-md-12 text-center margin-bottom-20" style="background-color: #da291c; padding: 0px; border-radius: 10px; text-align: center; margin-bottom: 20px">
                            <h4 style="color: #fff; font-weight: 400; padding: 10px; margin: 0;">Appointment for '.$appointments->client_first_name.' '.$appointments->client_last_name.'</h4>
                        </div>
                        <div class="col-md-12 text-center padding-0">
                            <table class="profile-info margin-bottom-10" style="width: 100%">
                                <tbody>
                                    <tr>
                                        <td style="width: 30%"><b>Date : </b></td>
                                        <td style="width: 70%"><b>'.date('d F Y', strtotime($appointments->appointment_date)).', '.Carbon::parse($appointments->appointment_date)->format('l').'</b></td>
                                    </tr>
                                    <tr>
                                        <td style="width: 30%"><b>Time : </b></td>
                                        <td style="width: 70%"><b>'.date('h:i A', strtotime($appointments->appointment_time)).'</b></td>
                                    </tr>
                                    <tr>
                                        <td style="width: 30%"><b>With : </b></td>
                                        <td style="width: 70%">'.$appointments->affiliate_first_name.' '.$appointments->affiliate_last_name.'</td>
                                    </tr>
                                    <tr>
                                        <td><b>Company: </b></td>
                                        <td>&nbsp;'.$appointments->client_company.'</td>
                                    </tr>
                                    <tr>
                                        <td style="vertical-align: baseline;"><b>Address: </b></td>
                                        <td>&nbsp;'.$appointments->client_address.',<br> State- '.$appointments->client_state.', Country- '.$appointments->client_country.', '.$appointments->client_city.'-'.$appointments->client_zip.'</td>
                                    </tr>
                                    <tr>
                                        <td><b>Phone: </b></td>
                                        <td>&nbsp;'.$appointments->client_phone.'</td>
                                    </tr>
                                    <tr>
                                        <td style="width: 30%; vertical-align: baseline;"><b>Reason : </b></td>
                                        <td style="width: 70%">'.$appointments->appointment_reason.'</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>';
                $malto = $uemail;
                $subject = "Appointment Notification";
                $emaildetails = array(
                    'malto'             => $malto,
                    'subject'           => $subject,
                    'body'              => $message,
                );
                Mail::send('email_appointment_notification', $emaildetails, function($message) use ($malto, $subject) {
                     $message->to($malto)
                     ->subject($subject);
                     $message->from('support@mafama.com', Auth::user()->name);
                  });
                User::where('email', Auth::user()->email)->update(['total_send_emails'=> DB::raw('total_send_emails+1')]);
                echo $message;
            }
        }
        else{
            echo "false";
        }
    }
    public function apppointmentnotificationtime(Request $request)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $popuptime = DB::table('appointment_settings')->where('uemail', $uemail)->first();
        if($popuptime != ""){
            $notification_unit = $popuptime->notification_unit;
            if($notification_unit == "hours"){
                echo "hours";
            }
            else{
                echo "days";
            }
        }
        else{
            echo "none";
        }
    }
    public function change_password_front()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        // print_r($data['top_banners']);die();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('change_password_front')->with($data);
    }
    public function flat_shipping_charges(Request $request)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $uemail = "";
        if((Auth::user()->role) == "affiliate"){
            $uemail = Auth::user()->email;
        }
        else{
            $uemail = Auth::user()->affiliate_user_email;
        }
        $shipping_amount = DB::table('financial_invoice_setups')->where('uid', $uid)->first();
        return $shipping_amount->shipping_amount;
    }
    public function tab32()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['janmargrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjungrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julsepgrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdecgrosstotal2'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['monthgrosstotal2'] = $data['janmargrosstotal2'] + $data['aprjungrosstotal2'] + $data['julsepgrosstotal2'] + $data['octdecgrosstotal2'];
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmargrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'];
        $data['aprjungrossactual'] = $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'];
        $data['julsepgrossactual'] = $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'];
        $data['octdecgrossactual'] = $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['monthgrossactual'] = $data['janmargrossactual'] + $data['aprjungrossactual'] + $data['julsepgrossactual'] + $data['octdecgrossactual'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['janmarothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('janmar');
        $data['aprjunothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aprjun');
        $data['julsepothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('julsep');
        $data['octdecothrevenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('octdec');
        $data['monthothrevenue'] = $data['janmarothrevenue'] + $data['aprjunothrevenue'] + $data['julsepothrevenue'] + $data['octdecothrevenue'];
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['janmarotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'];
        $data['aprjunotherrevenue'] = $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'];
        $data['julsepotherrevenue'] = $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'];
        $data['octdecotherrevenue'] = $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['monthotherrevenue'] = $data['janmarotherrevenue'] + $data['aprjunotherrevenue'] + $data['julsepotherrevenue'] + $data['octdecotherrevenue'];
        $data['expense'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal2'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal2'] = $data['janmartotal2'] + $data['aprjuntotal2'] + $data['julseptotal2'] + $data['octdectotal2'];
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotal2actual'] = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'];
        $data['aprjuntotal2actual'] = $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'];
        $data['julseptotal2actual'] = $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'];
        $data['octdectotal2actual'] = $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['monthtotal2actual'] = $data['janmartotal2actual'] + $data['aprjuntotal2actual'] + $data['julseptotal2actual'] + $data['octdectotal2actual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab32')->with($data);
    }
    public function tab332()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['janmargrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjungrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julsepgrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdecgrosstotal2'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['monthgrosstotal2'] = $data['janmargrosstotal2'] + $data['aprjungrosstotal2'] + $data['julsepgrosstotal2'] + $data['octdecgrosstotal2'];
        $data['jangrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmargrossactual'] = $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'];
        $data['aprjungrossactual'] = $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'];
        $data['julsepgrossactual'] = $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'];
        $data['octdecgrossactual'] = $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['monthgrossactual'] = $data['janmargrossactual'] + $data['aprjungrossactual'] + $data['julsepgrossactual'] + $data['octdecgrossactual'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['janmarothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('janmar');
        $data['aprjunothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('aprjun');
        $data['julsepothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('julsep');
        $data['octdecothrevenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->where('name', '==', 'Other Revenue')->sum('octdec');
        $data['monthothrevenue'] = $data['janmarothrevenue'] + $data['aprjunothrevenue'] + $data['julsepothrevenue'] + $data['octdecothrevenue'];
        $data['janotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['janmarotherrevenue'] = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'];
        $data['aprjunotherrevenue'] = $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'];
        $data['julsepotherrevenue'] = $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'];
        $data['octdecotherrevenue'] = $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['monthotherrevenue'] = $data['janmarotherrevenue'] + $data['aprjunotherrevenue'] + $data['julsepotherrevenue'] + $data['octdecotherrevenue'];
        $data['expense'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal2'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal2'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal2'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal2'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal2'] = $data['janmartotal2'] + $data['aprjuntotal2'] + $data['julseptotal2'] + $data['octdectotal2'];
        $data['jantotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] = DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotal2actual'] = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'];
        $data['aprjuntotal2actual'] = $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'];
        $data['julseptotal2actual'] = $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'];
        $data['octdectotal2actual'] = $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['monthtotal2actual'] = $data['janmartotal2actual'] + $data['aprjuntotal2actual'] + $data['julseptotal2actual'] + $data['octdectotal2actual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab332')->with($data);
    }

    public function tab33_quaterly_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] =$status= DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] =$links= Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] =$top_videos= HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] =$aabanner= DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] =$top_banners= FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] =$slidetime= DB::table('carouselplaytime')->where('id', 1)->get();
        $data['janmartotal'] =$janmartotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal'] =$aprjuntotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal'] =$julseptotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal'] =$octdectotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal'] =$monthtotal= $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['janmargrosstotal2'] =$janmargrosstotal2= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('janmar');
        $data['aprjungrosstotal2'] =$aprjungrosstotal2= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('aprjun');
        $data['julsepgrosstotal2'] =$julsepgrosstotal2= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('julsep');
        $data['octdecgrosstotal2'] =$octdecgrosstotal2= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '!=', 'Other Revenue')->sum('octdec');
        $data['monthgrosstotal2'] =$monthgrosstotal2= $data['janmargrosstotal2'] + $data['aprjungrosstotal2'] + $data['julsepgrosstotal2'] + $data['octdecgrosstotal2'];
        $data['jangrossactual'] =$jangrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febgrossactual'] =$febgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['margrossactual'] =$margrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprgrossactual'] =$aprgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maygrossactual'] =$maygrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jungrossactual'] =$jungrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['julgrossactual'] =$julgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['auggrossactual'] =$auggrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['sepgrossactual'] =$sepgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octgrossactual'] =$octgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novgrossactual'] =$novgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['decgrossactual'] =$decgrossactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmargrossactual'] =$janmargrossactual= $data['jangrossactual'] + $data['febgrossactual'] + $data['margrossactual'];
        $data['aprjungrossactual'] =$aprjungrossactual= $data['aprgrossactual'] + $data['maygrossactual'] + $data['jungrossactual'];
        $data['julsepgrossactual'] =$julsepgrossactual= $data['julgrossactual'] + $data['auggrossactual'] + $data['sepgrossactual'];
        $data['octdecgrossactual'] =$octdecgrossactual= $data['octgrossactual'] + $data['novgrossactual'] + $data['decgrossactual'];
        $data['monthgrossactual'] =$monthgrossactual= $data['janmargrossactual'] + $data['aprjungrossactual'] + $data['julsepgrossactual'] + $data['octdecgrossactual'];
        $data['jantotalactual'] =$jantotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('bill');
        $data['febtotalactual'] =$febtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('bill');
        $data['martotalactual'] =$martotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('bill');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('bill');
        $data['maytotalactual'] =$maytotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('bill');
        $data['juntotalactual'] =$juntotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('bill');
        $data['jultotalactual'] =$jultotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('bill');
        $data['augtotalactual'] =$augtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('bill');
        $data['septotalactual'] =$septotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('bill');
        $data['octtotalactual'] =$octtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('bill');
        $data['novtotalactual'] =$novtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('bill');
        $data['dectotalactual'] =$dectotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('bill');
        $data['janmartotalactual'] =$janmartotalactual= $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] =$aprjuntotalactual= $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] =$julseptotalactual= $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] =$octdectotalactual= $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] =$monthtotalactual= $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['janmarothrevenue'] =$janmarothrevenue= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('janmar');
        $data['aprjunothrevenue'] =$aprjunothrevenue= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('aprjun');
        $data['julsepothrevenue'] =$julsepothrevenue= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('julsep');
        $data['octdecothrevenue']=$octdecothrevenue = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->where('name', '==', 'Other Revenue')->sum('octdec');
        $data['monthothrevenue']=$monthothrevenue = $data['janmarothrevenue'] + $data['aprjunothrevenue'] + $data['julsepothrevenue'] + $data['octdecothrevenue'];
        $data['janotherrevenue']=$janotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', 'Other Revenue')->sum('bill');
        $data['febotherrevenue']=$febotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', 'Other Revenue')->sum('bill');
        $data['marotherrevenue']=$marotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', 'Other Revenue')->sum('bill');
        $data['aprotherrevenue']=$aprotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', 'Other Revenue')->sum('bill');
        $data['mayotherrevenue']=$mayotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', 'Other Revenue')->sum('bill');
        $data['junotherrevenue']=$junotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', 'Other Revenue')->sum('bill');
        $data['julotherrevenue']=$julotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', 'Other Revenue')->sum('bill');
        $data['augotherrevenue']=$augotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', 'Other Revenue')->sum('bill');
        $data['sepotherrevenue']=$sepotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', 'Other Revenue')->sum('bill');
        $data['octotherrevenue']=$octotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', 'Other Revenue')->sum('bill');
        $data['novotherrevenue']=$novotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', 'Other Revenue')->sum('bill');
        $data['decotherrevenue']=$decotherrevenue = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', 'Other Revenue')->sum('bill');
        $data['janmarotherrevenue']=$janmarotherrevenue = $data['janotherrevenue'] + $data['febotherrevenue'] + $data['marotherrevenue'];
        $data['aprjunotherrevenue']=$aprjunotherrevenue = $data['aprotherrevenue'] + $data['mayotherrevenue'] + $data['junotherrevenue'];
        $data['julsepotherrevenue']=$julsepotherrevenue = $data['julotherrevenue'] + $data['augotherrevenue'] + $data['sepotherrevenue'];
        $data['octdecotherrevenue']=$octdecotherrevenue = $data['octotherrevenue'] + $data['novotherrevenue'] + $data['decotherrevenue'];
        $data['monthotherrevenue']=$monthotherrevenue = $data['janmarotherrevenue'] + $data['aprjunotherrevenue'] + $data['julsepotherrevenue'] + $data['octdecotherrevenue'];
        $data['expense']=$expense = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal2']=$janmartotal2 = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal2']=$aprjuntotal2 = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal2']=$julseptotal2 = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal2'] =$octdectotal2= DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal2'] =$monthtotal2= $data['janmartotal2'] + $data['aprjuntotal2'] + $data['julseptotal2'] + $data['octdectotal2'];
        $data['jantotal2actual'] =$jantotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotal2actual'] =$febtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotal2actual'] =$martotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotal2actual'] =$aprtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotal2actual'] =$maytotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotal2actual'] =$juntotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotal2actual'] =$jultotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotal2actual'] =$augtotal2actual= DB::table('expense_record')->where('uid',$uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotal2actual'] =$septotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotal2actual'] =$octtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotal2actual'] =$novtotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotal2actual'] =$dectotal2actual= DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotal2actual'] =$janmartotal2actual= $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'];
        $data['aprjuntotal2actual'] =$aprjuntotal2actual= $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'];
        $data['julseptotal2actual'] =$julseptotal2actual= $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'];
        $data['octdectotal2actual'] =$octdectotal2actual= $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
        $data['monthtotal2actual'] =$monthtotal2actual= $data['janmartotal2actual'] + $data['aprjuntotal2actual'] + $data['julseptotal2actual'] + $data['octdectotal2actual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat']=$chat = "off";
            }
            if($cdet->tools == "on"){
                $data['tools']=$tools = "on";
            }
            else{
                $data['tools']=$tools = "off";
            }
        }

        ob_start();
        ?>
        <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan-Mar</th>
                                                            <th colspan="3">Apr-Jun</th>
                                                            <th colspan="3">Jul-Sep</th>
                                                            <th colspan="3">Oct-Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Gross Revenue</td>
                                                            <td><?= $janmargrosstotal2 ?></td>
                                                            <td><?= $janmargrossactual ?></td>
                                                            <td><?= ($janmargrosstotal2-$janmargrossactual) ?></td>
                                                            <td><?= $aprjungrosstotal2 ?></td>
                                                            <td><?= $aprjungrossactual ?></td>
                                                            <td><?= ($aprjungrosstotal2-$aprjungrossactual) ?></td>
                                                            <td><?= $julsepgrosstotal2 ?></td>
                                                            <td><?= $julsepgrossactual ?></td>
                                                            <td><?= ($julsepgrosstotal2-$julsepgrossactual) ?></td>
                                                            <td><?= $octdecgrosstotal2 ?></td>
                                                            <td><?= $octdecgrossactual ?></td>
                                                            <td><?= ($octdecgrosstotal2-$octdecgrossactual) ?></td>
                                                            <td><?= $monthgrosstotal2 ?></td>
                                                            <td><?= $monthgrossactual ?></td>
                                                            <td><?= ($monthgrosstotal2-$monthgrossactual) ?></td>
                                                            <td>
                                                                <a href="<?=url('gross_quarter_revenue_chart2')?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="odd gradeX">
                                                            <td class="fixed-side">Other Revenue</td>
                                                            <td><?= $janmarothrevenue ?></td>
                                                            <td><?= $janmarotherrevenue ?></td>
                                                            <td><?= ($janmarothrevenue-$janmarotherrevenue) ?></td>
                                                            <td><?= $aprjunothrevenue ?></td>
                                                            <td><?= $aprjunotherrevenue ?></td>
                                                            <td><?= ($aprjunothrevenue-$aprjunotherrevenue) ?></td>
                                                            <td><?= $julsepothrevenue ?></td>
                                                            <td><?= $julsepotherrevenue ?></td>
                                                            <td><?= ($julsepothrevenue-$julsepotherrevenue) ?></td>
                                                            <td><?= $octdecothrevenue ?></td>
                                                            <td><?= $octdecotherrevenue ?></td>
                                                            <td><?= ($octdecothrevenue-$octdecotherrevenue) ?></td>
                                                            <td><?= $monthothrevenue ?></td>
                                                            <td><?= $monthotherrevenue ?></td>
                                                            <td><?= ($monthothrevenue-$monthotherrevenue) ?></td>
                                                            <td>
                                                                <a href="<?=url('other_quarter_revenue_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Revenue</b></td>
                                                            <td><?= $janmartotal ?></td>
                                                            <td><?= $janmartotalactual ?></td>
                                                            <td><?= ($janmartotal-$janmartotalactual) ?></td>
                                                            <td><?= $aprjuntotal ?></td>
                                                            <td><?= $aprjuntotalactual ?></td>
                                                            <td><?= ($aprjuntotal-$aprjuntotalactual) ?></td>
                                                            <td><?= $julseptotal ?></td>
                                                            <td><?= $julseptotalactual ?></td>
                                                            <td><?= ($julseptotal-$julseptotalactual) ?></td>
                                                            <td><?= $octdectotal ?></td>
                                                            <td><?= $octdectotalactual ?></td>
                                                            <td><?= ($octdectotal-$octdectotalactual) ?></td>
                                                            <td><?= $monthtotal ?></td>
                                                            <td><?= $monthtotalactual ?></td>
                                                            <td><?= ($monthtotal-$monthtotalactual) ?></td>
                                                            <td>
                                                                <a href="<?=url('all_quarter_revenue_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->

                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($expense as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->janmar ?></td>
                                                                <td><?php echo $actual_janmar = HomeController::getjanmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->janmar - $actual_janmar) ?></td>
                                                                <td><?= $value->aprjun ?></td>
                                                                <td><?php echo $actual_aprjun = HomeController::getaprjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->aprjun - $actual_aprjun) ?></td>
                                                                <td><?= $value->julsep ?></td>
                                                                <td><?php echo $actual_julsep = HomeController::getjulsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->julsep - $actual_julsep) ?></td>
                                                                <td><?= $value->octdec ?></td>
                                                                <td><?php echo $actual_octdec = HomeController::getoctdecactualexp($value->name); ?></td>
                                                                <td><?= ($value->octdec - $actual_octdec) ?></td>

                                                                <td> <?= $tot = ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?></td>
                                                                <td><?php echo $actual_total2 =HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total2) ?></td>
                                                                <td>
                                                                    <a href="<?=url('expense_variance_quarterly_graph2')."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total2-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $janmartotal2 ?></td>
                                                            <td><?= $janmartotal2actual ?></td>
                                                            <td><?= ($janmartotal2-$janmartotal2actual) ?></td>
                                                            <td><?= $aprjuntotal2 ?></td>
                                                            <td><?= $aprjuntotal2actual ?></td>
                                                            <td><?= ($aprjuntotal2-$aprjuntotal2actual) ?></td>
                                                            <td><?= $julseptotal2 ?></td>
                                                            <td><?= $julseptotal2actual ?></td>
                                                            <td><?= ($julseptotal2-$julseptotal2actual) ?></td>
                                                            <td><?= $octdectotal2 ?></td>
                                                            <td><?= $octdectotal2actual ?></td>
                                                            <td><?= ($octdectotal2-$octdectotal2actual) ?></td>
                                                            <td><?= $tott = ($janmartotal2 + $aprjuntotal2 + $julseptotal2 + $octdectotal2) ?></td>
                                                            <td><?= $tott2 = ($janmartotal2actual + $aprjuntotal2actual + $julseptotal2actual + $octdectotal2actual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?=url('expense_quarterly_vary_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>

                                                    <tbody></tbody>
                                                    <tfoot>
                                                        <tr>
                                                            <td class="fixed-side" style="text-align: left;"><b>Estimated Profit & Loss</b></td>
                                                            <td><?= ($janmartotal-$janmartotal2) ?></td>
                                                            <td><?= ($janmartotalactual-$janmartotal2actual) ?></td>
                                                            <td><?= (($janmartotal-$janmartotal2)-($janmartotalactual-$janmartotal2actual)) ?></td>
                                                            <td><?= ($aprjuntotal-$aprjuntotal2) ?></td>
                                                            <td><?= ($aprjuntotalactual-$aprjuntotal2actual) ?></td>
                                                            <td><?= (($aprjuntotal-$aprjuntotal2)-($aprjuntotalactual-$aprjuntotal2actual)) ?></td>
                                                            <td><?= ($julseptotal-$julseptotal2) ?></td>
                                                            <td><?= ($julseptotalactual-$julseptotal2actual) ?></td>
                                                            <td><?= (($julseptotal-$julseptotal2)-($julseptotalactual-$julseptotal2actual)) ?></td>
                                                            <td><?= ($octdectotal-$octdectotal2) ?></td>
                                                            <td><?= ($octdectotalactual-$octdectotal2actual) ?></td>
                                                            <td><?= (($octdectotal-$octdectotal2)-($octdectotalactual-$octdectotal2actual)) ?></td>
                                                            <td><?= ($monthtotal-$tott) ?></td>
                                                            <td><?= ($monthtotalactual-$tott2) ?></td>
                                                            <td><?= (($monthtotal-$tott)-($monthtotalactual-$tott2)) ?></td>
                                                            <td>
                                                                <!-- <a href="#"><i class="fa fa-bar-chart"></i></a> -->
                                                            </td>
                                                        </tr>
                                                        <!-- .nk-tb-item  -->
                                                    </tfoot>
                                                </table>
                                            </div>
        <?php
        $html=ob_get_clean();
        echo $html;
    }
    public function tab42()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab42')->with($data);
    }
    public function tab442()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab442')->with($data);
    }

    public function tab44_quaterly_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] =$status= DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] =$links= Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] =$top_videos= HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] =$aabanner= DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] =$top_banners= FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] =$slidetime= DB::table('carouselplaytime')->where('id', 1)->get();
        $data['revenue'] =$revenue= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['janmartotal'] =$janmartotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal'] =$aprjuntotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal'] =$julseptotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal'] =$octdectotal= DB::table('revenue_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal'] =$monthtotal= $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual'] =$jantotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['febtotalactual'] =$febtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['martotalactual'] =$martotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['aprtotalactual'] =$aprtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['maytotalactual'] =$maytotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['juntotalactual'] =$juntotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['jultotalactual'] =$jultotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['augtotalactual'] =$augtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['septotalactual'] =$septotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['octtotalactual'] =$octtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['novtotalactual'] =$novtotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['dectotalactual'] =$dectotalactual= DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->where('account_description', '!=', 'Other Revenue')->sum('bill');
        $data['janmartotalactual'] =$janmartotalactual= $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] =$aprjuntotalactual= $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] =$julseptotalactual= $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] =$octdectotalactual= $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] =$monthtotalactual= $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat']=$chat = "on";
            }
            else{
                $data['chat']=$chat = "off";
            }
            if($cdet->tools == "on"){
                $data['tools']=$tools = "on";
            }
            else{
                $data['tools']=$tools = "off";
            }
        }
        ob_start();
        ?>
        <div class="table-wrap">
            <table class="table table-striped table-bordered table-hover main-table" id="">
                <thead>
                    <tr class="top-tr">
                        <th class="fixed-side"></th>
                        <th colspan="3">Jan-Mar</th>
                        <th colspan="3">Apr-Jun</th>
                        <th colspan="3">Jul-Sep</th>
                        <th colspan="3">Oct-Dec</th>
                        <th colspan="3">Total</th>
                        <th>Graph</th>
                    </tr>
                    <tr>
                        <th class="fixed-side"></th>
                        <th>Budget</th>
                        <th>Actual</th>
                        <th>Variance</th>
                        <th>Budget</th>
                        <th>Actual</th>
                        <th>Variance</th>
                        <th>Budget</th>
                        <th>Actual</th>
                        <th>Variance</th>
                        <th>Budget</th>
                        <th>Actual</th>
                        <th>Variance</th>
                        <th>Budget</th>
                        <th>Actual</th>
                        <th>Variance</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Revenue</b></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                    <?php
                    foreach($revenue as $value){
                    ?>
                        <tr class="odd gradeX">
                            <td class="fixed-side"><?= $value->name ?></td>
                            <td><?= $value->janmar ?></td>
                            <td><?php echo $actual_janmar =HomeController::getjanmaractual($value->name); ?></td>
                            <td><?= ($value->janmar - $actual_janmar) ?></td>
                            <td><?= $value->aprjun ?></td>
                            <td><?php echo $actual_aprjun =HomeController::getaprjunactual($value->name); ?></td>
                            <td><?= ($value->aprjun - $actual_aprjun) ?></td>
                            <td><?= $value->julsep ?></td>
                            <td><?php echo $actual_julsep = HomeController::getjulsepactual($value->name); ?></td>
                            <td><?= ($value->julsep - $actual_julsep) ?></td>
                            <td><?= $value->octdec ?></td>
                            <td><?php echo $actual_octdec =HomeController::getoctdecactual($value->name); ?></td>
                            <td><?= ($value->octdec - $actual_octdec) ?></td>

                            <td> <?= $tot = ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?></td>
                            <td><?php echo $actual_total =HomeController::gettotalactual($value->name); ?></td>
                            <td><?= ($tot-$actual_total) ?></td>
                            <td>
                                <a href="<?=url('revenue_variance_quarterly_graph2')."/".$value->name ?>"><i class="fa fa-bar-chart"></i></a>
                            </td>
                        </tr>
                    <?php } ?>
                    <tr class="total-tr">
                        <td class="fixed-side" style=""><b>Total Revenue</b></td>
                        <td><?= $janmartotal ?></td>
                        <td><?= $janmartotalactual ?></td>
                        <td><?= ($janmartotal-$janmartotalactual) ?></td>
                        <td><?= $aprjuntotal ?></td>
                        <td><?= $aprjuntotalactual ?></td>
                        <td><?= ($aprjuntotal-$aprjuntotalactual) ?></td>
                        <td><?= $julseptotal ?></td>
                        <td><?= $julseptotalactual ?></td>
                        <td><?= ($julseptotal-$julseptotalactual) ?></td>
                        <td><?= $octdectotal ?></td>
                        <td><?= $octdectotalactual ?></td>
                        <td><?= ($octdectotal-$octdectotalactual) ?></td>
                        <td><?= $tott = ($janmartotal + $aprjuntotal + $julseptotal + $octdectotal) ?></td>
                        <td><?= $tott2 = ($janmartotalactual + $aprjuntotalactual + $julseptotalactual + $octdectotalactual) ?></td>
                        <td><?= ($tott - $tott2) ?></td>
                        <td>
                            <a href="<?=url('revenue_quarterly_vary_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <?php
        $html=ob_get_clean();
        echo $html;
    }
    public static function getjanmaractual($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['jantotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->where('account_description', $name)->sum('bill');
        $data['febtotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->where('account_description', $name)->sum('bill');
        $data['martotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->where('account_description', $name)->sum('bill');
        return $janmartotal2actual = $data['jantotal2actual'] + $data['febtotal2actual'] + $data['martotal2actual'];
    }
    public static function getaprjunactual($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['aprtotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->where('account_description', $name)->sum('bill');
        $data['maytotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->where('account_description', $name)->sum('bill');
        $data['juntotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->where('account_description', $name)->sum('bill');
        return $aprjuntotal2actual = $data['aprtotal2actual'] + $data['maytotal2actual'] + $data['juntotal2actual'];
    }
    public static function getjulsepactual($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['jultotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->where('account_description', $name)->sum('bill');
        $data['augtotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->where('account_description', $name)->sum('bill');
        $data['septotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->where('account_description', $name)->sum('bill');
        return $julseptotal2actual = $data['jultotal2actual'] + $data['augtotal2actual'] + $data['septotal2actual'];
    }
    public static function getoctdecactual($name)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['octtotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->where('account_description', $name)->sum('bill');
        $data['novtotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->where('account_description', $name)->sum('bill');
        $data['dectotal2actual'] = DB::table('revenue_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->where('account_description', $name)->sum('bill');
        return $octdectotal2actual = $data['octtotal2actual'] + $data['novtotal2actual'] + $data['dectotal2actual'];
    }
    public function tab52()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
         $data['revenue'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_budget')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }

        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab52')->with($data);
    }
    public function tab552()
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
         $data['revenue'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->get();
        $data['janmartotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('janmar');
        $data['aprjuntotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('aprjun');
        $data['julseptotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('julsep');
        $data['octdectotal'] = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', date('Y'))->sum('octdec');
        $data['monthtotal'] = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual'] = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', date('Y'))->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotalactual'] = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual'] = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual'] = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual'] = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual'] = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $data['years'] = [];
        for($i = 0; $i < 10; $i++){
            $lastYear = date("Y", strtotime("-$i years"));
            if($lastYear > 2019){
                array_push($data['years'], $lastYear);
            }
        }
        return view('tab552')->with($data);
    }


    public function tab55_quaterly_year(Request $request)
    {
        $year=$request->year;
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $data['status'] =$status= DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] =$links= Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] =$top_videos= HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] =$aabanner= DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] =$top_banners= FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] =$slidetime= DB::table('carouselplaytime')->where('id', 1)->get();
         $data['revenue'] =$revenue= DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->get();
        $data['janmartotal'] =$janmartotal= DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('janmar');
        $data['aprjuntotal'] =$aprjuntotal= DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('aprjun');
        $data['julseptotal'] =$julseptotal= DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('julsep');
        $data['octdectotal']=$octdectotal = DB::table('expense_quaterly_projection')->where('uid', $uid)->whereYear('created_at', $year)->sum('octdec');
        $data['monthtotal']=$monthtotal = $data['janmartotal'] + $data['aprjuntotal'] + $data['julseptotal'] + $data['octdectotal'];
        $data['jantotalactual']=$jantotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '01')->sum('amount_paid');
        $data['febtotalactual']=$febtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '02')->sum('amount_paid');
        $data['martotalactual']=$martotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '03')->sum('amount_paid');
        $data['aprtotalactual']=$aprtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '04')->sum('amount_paid');
        $data['maytotalactual']=$maytotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '05')->sum('amount_paid');
        $data['juntotalactual']=$juntotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '06')->sum('amount_paid');
        $data['jultotalactual']=$jultotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '07')->sum('amount_paid');
        $data['augtotalactual']=$augtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '08')->sum('amount_paid');
        $data['septotalactual']=$septotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '09')->sum('amount_paid');
        $data['octtotalactual']=$octtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '10')->sum('amount_paid');
        $data['novtotalactual']=$novtotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '11')->sum('amount_paid');
        $data['dectotalactual']=$dectotalactual = DB::table('expense_record')->where('uid', $uid)->whereYear('transaction_date', $year)->whereMonth('transaction_date', '12')->sum('amount_paid');
        $data['janmartotalactual']=$janmartotalactual = $data['jantotalactual'] + $data['febtotalactual'] + $data['martotalactual'];
        $data['aprjuntotalactual']=$aprjuntotalactual = $data['aprtotalactual'] + $data['maytotalactual'] + $data['juntotalactual'];
        $data['julseptotalactual']=$julseptotalactual = $data['jultotalactual'] + $data['augtotalactual'] + $data['septotalactual'];
        $data['octdectotalactual']=$octdectotalactual = $data['octtotalactual'] + $data['novtotalactual'] + $data['dectotalactual'];
        $data['monthtotalactual']=$monthtotalactual = $data['janmartotalactual'] + $data['aprjuntotalactual'] + $data['julseptotalactual'] + $data['octdectotalactual'];
        $data['chat']=$chat = "";
        $data['tools']=$tools = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] =$chat= "on";
            }
            else{
                $data['chat'] =$chat= "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] =$tools= "on";
            }
            else{
                $data['tools'] =$tools= "off";
            }
        }
        ob_start();
        ?>
        <div class="table-wrap">
                                                <table class="table table-striped table-bordered table-hover main-table" id="">
                                                    <thead>
                                                        <tr class="top-tr">
                                                            <th class="fixed-side"></th>
                                                            <th colspan="3">Jan - Mar</th>
                                                            <th colspan="3">Apr - Jun</th>
                                                            <th colspan="3">Jul - Sep</th>
                                                            <th colspan="3">Oct - Dec</th>
                                                            <th colspan="3">Total</th>
                                                            <th>Graph</th>
                                                        </tr>
                                                        <tr>
                                                            <th class="fixed-side"></th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th>Budget</th>
                                                            <th>Actual</th>
                                                            <th>Variance</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                         <tr>
                                                            <td class="fixed-side" style="text-align: left; color: #da291c;"><b>Expenses</b></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                        </tr>
                                                        <?php
                                                        foreach($revenue as $value){
                                                        ?>
                                                            <tr class="odd gradeX">
                                                                <td class="fixed-side"><?= $value->name ?></td>
                                                                <td><?= $value->janmar ?></td>
                                                                <td><?php echo $actual_janmar = HomeController::getjanmaractualexp($value->name); ?></td>
                                                                <td><?= ($value->janmar - $actual_janmar) ?></td>
                                                                <td><?= $value->aprjun ?></td>
                                                                <td><?php echo $actual_aprjun =HomeController::getaprjunactualexp($value->name); ?></td>
                                                                <td><?= ($value->aprjun - $actual_aprjun) ?></td>
                                                                <td><?= $value->julsep ?></td>
                                                                <td><?php echo $actual_julsep = HomeController::getjulsepactualexp($value->name); ?></td>
                                                                <td><?= ($value->julsep - $actual_julsep) ?></td>
                                                                <td><?= $value->octdec ?></td>
                                                                <td><?php echo $actual_octdec =HomeController::getoctdecactualexp($value->name); ?></td>
                                                                <td><?= ($value->octdec - $actual_octdec) ?></td>

                                                                <td> <?= $tot = ($value->janmar + $value->aprjun + $value->julsep + $value->octdec) ?></td>
                                                                <td><?php echo $actual_total =HomeController::gettotalactualexp($value->name); ?></td>
                                                                <td><?= ($tot-$actual_total) ?></td>
                                                                <td>
                                                                    <a href="<?= url('expense_variance_quarterly_graph2') ."/". $value->name ?>"><i class="fa fa-bar-chart"></i></a>
                                                                </td>
                                                            </tr>
                                                        <?php } ?>
                                                        <tr class="total-tr">
                                                            <td class="fixed-side" style=""><b>Total Expenses</b></td>
                                                            <td><?= $janmartotal ?></td>
                                                            <td><?= $janmartotalactual ?></td>
                                                            <td><?= ($janmartotal-$janmartotalactual) ?></td>
                                                            <td><?= $aprjuntotal ?></td>
                                                            <td><?= $aprjuntotalactual ?></td>
                                                            <td><?= ($aprjuntotal-$aprjuntotalactual) ?></td>
                                                            <td><?= $julseptotal ?></td>
                                                            <td><?= $julseptotalactual ?></td>
                                                            <td><?= ($julseptotal-$julseptotalactual) ?></td>
                                                            <td><?= $octdectotal ?></td>
                                                            <td><?= $octdectotalactual ?></td>
                                                            <td><?= ($octdectotal-$octdectotalactual) ?></td>

                                                            <td><?= $tott = ($janmartotal + $aprjuntotal + $julseptotal + $octdectotal) ?></td>
                                                            <td><?= $tott2 = ($janmartotalactual + $aprjuntotalactual + $julseptotalactual + $octdectotalactual) ?></td>
                                                            <td><?= ($tott - $tott2) ?></td>
                                                            <td>
                                                                <a href="<?= url('expense_quarterly_vary_chart2') ?>"><i class="fa fa-bar-chart"></i></a>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
        <?php
        $html=ob_get_clean();
        echo $html;
    }
    public function fcommonthgraph(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcommonthgraph')->with($data);
        // $data['paged'] =  echo '<div style="padding: 30px 0px;">
        //         <div class="modal_chart" id="bar-chartm" style="width: 100%;"></div>
        //         <script type="text/javascript">
        //               $(function () {
        //                     "use strict";
        //                     var bar = new Morris.Bar({
        //                       element: "bar-chartm",
        //                       resize: true,
        //                       data: [';
        //                         foreach($allyearmonth as $details){
        //                             $det = explode('nqd', $details);
        //                             $year = $det[0];
        //                             $month = $det[1];
        //                             $mon = "";
        //                             if($month == '01'){ $mon = "January"; }elseif($month == '02'){ $mon = "February"; }elseif($month == '03'){ $mon = "March"; }elseif($month == '04'){ $mon = "April"; }elseif($month == '05'){ $mon = "May"; }elseif($month == '06'){ $mon = "June"; }elseif($month == '07'){ $mon = "July"; }elseif($month == '08'){ $mon = "August"; }elseif($month == '09'){ $mon = "September"; }elseif($month == '10'){ $mon = "October"; }elseif($month == '11'){ $mon = "November"; }elseif($month == '12'){ $mon = "December"; }
        //                             $month_year = $year."-".$month;
        //                             $monyr = $mon." ".$year;
        //                             $mailcount = DB::table('revenue_record_update')->where('updated_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->count();
        //                             echo '{y: "'.$monyr.'", a: '.$mailcount.'},';
        //                         }
        //                 echo '],
        //                       barColors: ["#00a65a"],
        //                       xkey: "y",
        //                       ykeys: ["a"],
        //                       labels: ["Budget"],
        //                       hideHover: "auto",
        //                       resize: true
        //                     });
        //                   });
        //         </script>
        //     </div>';
        // echo $data['paged'];
        // foreach ($monthyr as $value) {
        //     $mnyr = explode('n', $value);
        //     $year = $mnyr[0];
        //     $month = $mnyr[1];
        //     $month_year = $year."-".
        // }
    }
    public static function getfcommonthgrp($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->sum('bill');
        return $mailcount;
    }
    public function fcommonthgraphex(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcommonthgraphex')->with($data);
    }
    public static function getfcommonthgrpex($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->sum('amount_paid');
        return $mailcount;
    }
    public function fcommonthgraphas(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcommonthgraphas')->with($data);
    }
    public static function getfcommonthgrpas($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('description', $description)->sum('price');
        return $mailcount;
    }
    public function fcommonthgraph2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcommonthgraph2')->with($data);
    }
    public static function getfcommonthgrp2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->sum('bill');
        $mailcount2 = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->where('account_description', $description)->sum('bill');
        $mailcount3 = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->where('account_description', $description)->sum('bill');
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function fcommonthgraphex2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcommonthgraphex2')->with($data);
    }
    public static function getfcommonthgrpex2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->sum('amount_paid');
        $mailcount2 = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->where('account_description', $description)->sum('amount_paid');
        $mailcount3 = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->where('account_description', $description)->sum('amount_paid');
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function fcommonthgraphas2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcommonthgraphas2')->with($data);
    }
    public static function getfcommonthgrpas2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('description', $description)->sum('price');
        $mailcount2 = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->where('description', $description)->sum('price');
        $mailcount3 = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->where('description', $description)->sum('price');
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function fcomyeargraph(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcomyeargraph')->with($data);
    }
    public static function getfcomyeargrp($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = DB::table('revenue_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->sum('bill');
        return $mailcount;
    }
    public function fcomyeargraphex(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcomyeargraphex')->with($data);
    }
    public static function getfcomyeargrpex($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = DB::table('expense_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('account_description', $description)->sum('amount_paid');
        return $mailcount;
    }
    public function fcomyeargraphas(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        // print_r($val); die();
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('fcomyeargraphas')->with($data);
    }
    public static function getfcomyeargrpas($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = DB::table('asset_record')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->where('description', $description)->sum('price');
        return $mailcount;
    }
    public static function getclientmenu($email)
    {
        $menu = DB::table('user_menu_access')->where('uemail', $email)->first();
        return $menu;
    }
    public static function getclientmenu2($email)
    {
        $menu = DB::table('user_menu_access2')->where('uemail', $email)->first();
        return $menu;
    }
    public static function getclienttime($email)
    {
        $date = date('l');
        // print_r($email);die();
        $day = DB::table('user_day_access')->where('uemail', $email)->first();
        $time = "";
        if($date == 'Monday'){ $time = $day->monday; }
        elseif($date == 'Tuesday'){ $time = $day->tuesday; }
        elseif($date == 'Wednesday'){ $time = $day->wednesday; }
        elseif($date == 'Thursday'){ $time = $day->thursday; }
        elseif($date == 'Friday'){ $time = $day->friday; }
        elseif($date == 'Saturday'){ $time = $day->saturday; }
        elseif($date == 'Sunday'){ $time = $day->sunday; }
        return $time;
    }
    public function acommonthgraph(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('acommonthgraph')->with($data);
    }
    public static function getacommonthgrp($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $emcnt = 0;
        $emailarr = [];
        $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
        foreach ($apptn as $aptn) {
            if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                array_push($emailarr, $aptn->email1);
                $emcnt++;
            }
            if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                array_push($emailarr, $aptn->email2);
                $emcnt++;
            }
            if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                array_push($emailarr, $aptn->email3);
                $emcnt++;
            }
        }
        $getclnt = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        $getcount = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        $getcount2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        if($description == "New Clients"){
            return $getclnt;
        }
        elseif($description == "New Appointments"){
            return $emcnt;
        }
        elseif($description == "Change Appointments"){
            return $getcount;
        }
        elseif($description == "Cancel Appointments"){
            return $getcount2;
        }
    }
    public function acommonthgraph2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('acommonthgraph2')->with($data);
    }
    public static function getacommonthgrp2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
            $monthyear = explode('-', $month_year);
            $year = $monthyear[0];
            $month = $monthyear[1];
            $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
            $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
            $emcnt = 0;
            $emcnt2  = 0;
            $emcnt3 = 0;
            $emailarr = [];
            $emailarr2 = [];
            $emailarr3 = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            $apptn2 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn2 as $aptn2) {
                if(($aptn2->email1 != "") && (in_array($aptn2->email1, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email1);
                    $emcnt2++;
                }
                if(($aptn2->email2 != "") && (in_array($aptn2->email2, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email2);
                    $emcnt2++;
                }
                if(($aptn2->email3 != "") && (in_array($aptn2->email3, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email3);
                    $emcnt2++;
                }
            }
            $apptn3 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn3 as $aptn3) {
                if(($aptn3->email1 != "") && (in_array($aptn3->email1, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email1);
                    $emcnt3++;
                }
                if(($aptn3->email2 != "") && (in_array($aptn3->email2, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email2);
                    $emcnt3++;
                }
                if(($aptn3->email3 != "") && (in_array($aptn3->email3, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email3);
                    $emcnt3++;
                }
            }
            $new_appointmentt = $emcnt + $emcnt2 + $emcnt3;
            $getclnt = ClientAppointmentList::where('created_at', 'like', '%' . $month_year . '%')->orWhere('created_at', 'like', '%' . $month_year1 . '%')->orWhere('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getcount = DB::table('change_appointment')->where('created_at', 'like', '%' . $month_year . '%')->orWhere('created_at', 'like', '%' . $month_year1 . '%')->orWhere('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
            $getcount2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $month_year . '%')->orWhere('created_at', 'like', '%' . $month_year1 . '%')->orWhere('created_at', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
        if($description == "New Clients"){
            return $getclnt;
        }
        elseif($description == "New Appointments"){
            return $new_appointmentt;
        }
        elseif($description == "Change Appointments"){
            return $getcount;
        }
        elseif($description == "Cancel Appointments"){
            return $getcount2;
        }
    }
    public function acommonthgraph3(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('acommonthgraph3')->with($data);
    }
    public static function getacommonthgrp3($year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
            $month = "01";
            $month_year = $year."-".$month; $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT); $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT); $month_year3 = $year."-".str_pad(($month +3), 2, '0', STR_PAD_LEFT);
            $month_year4 = $year."-".str_pad(($month +4), 2, '0', STR_PAD_LEFT); $month_year5 = $year."-".str_pad(($month +5), 2, '0', STR_PAD_LEFT); $month_year6 = $year."-".str_pad(($month +6), 2, '0', STR_PAD_LEFT); $month_year7 = $year."-".str_pad(($month +7), 2, '0', STR_PAD_LEFT); $month_year8 = $year."-".str_pad(($month +8), 2, '0', STR_PAD_LEFT); $month_year9 = $year."-".str_pad(($month +9), 2, '0', STR_PAD_LEFT); $month_year10 = $year."-".str_pad(($month +10), 2, '0', STR_PAD_LEFT); $month_year11 = $year."-".str_pad(($month +11), 2, '0', STR_PAD_LEFT); $month_year12 = $year."-".str_pad(($month +12), 2, '0', STR_PAD_LEFT);
            $emcnt = 0; $emcnt2  = 0; $emcnt3 = 0; $emcnt4 = 0; $emcnt5 = 0; $emcnt6 = 0; $emcnt7 = 0; $emcnt8 = 0; $emcnt9 = 0; $emcnt10 = 0; $emcnt11 = 0; $emcnt12 = 0;
            $emailarr = []; $emailarr2 = []; $emailarr3 = []; $emailarr4 = []; $emailarr5 = []; $emailarr6 = []; $emailarr7 = []; $emailarr8 = []; $emailarr9 = []; $emailarr10 = []; $emailarr11 = []; $emailarr12 = [];
            $apptn = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn as $aptn) {
                if(($aptn->email1 != "") && (in_array($aptn->email1, $emailarr) == false)){
                    array_push($emailarr, $aptn->email1);
                    $emcnt++;
                }
                if(($aptn->email2 != "") && (in_array($aptn->email2, $emailarr) == false)){
                    array_push($emailarr, $aptn->email2);
                    $emcnt++;
                }
                if(($aptn->email3 != "") && (in_array($aptn->email3, $emailarr) == false)){
                    array_push($emailarr, $aptn->email3);
                    $emcnt++;
                }
            }
            $apptn2 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn2 as $aptn2) {
                if(($aptn2->email1 != "") && (in_array($aptn2->email1, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email1);
                    $emcnt2++;
                }
                if(($aptn2->email2 != "") && (in_array($aptn2->email2, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email2);
                    $emcnt2++;
                }
                if(($aptn2->email3 != "") && (in_array($aptn2->email3, $emailarr2) == false)){
                    array_push($emailarr, $aptn2->email3);
                    $emcnt2++;
                }
            }
            $apptn3 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn3 as $aptn3) {
                if(($aptn3->email1 != "") && (in_array($aptn3->email1, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email1);
                    $emcnt3++;
                }
                if(($aptn3->email2 != "") && (in_array($aptn3->email2, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email2);
                    $emcnt3++;
                }
                if(($aptn3->email3 != "") && (in_array($aptn3->email3, $emailarr3) == false)){
                    array_push($emailarr, $aptn3->email3);
                    $emcnt3++;
                }
            }
            $apptn4 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year3 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn4 as $aptn4) {
                if(($aptn4->email1 != "") && (in_array($aptn4->email1, $emailarr4) == false)){
                    array_push($emailarr, $aptn4->email1);
                    $emcnt4++;
                }
                if(($aptn4->email2 != "") && (in_array($aptn4->email2, $emailarr4) == false)){
                    array_push($emailarr, $aptn4->email2);
                    $emcnt4++;
                }
                if(($aptn4->email3 != "") && (in_array($aptn4->email3, $emailarr4) == false)){
                    array_push($emailarr, $aptn4->email3);
                    $emcnt4++;
                }
            }
            $apptn5 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year4 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn5 as $aptn5) {
                if(($aptn5->email1 != "") && (in_array($aptn5->email1, $emailarr5) == false)){
                    array_push($emailarr, $aptn5->email1);
                    $emcnt5++;
                }
                if(($aptn5->email2 != "") && (in_array($aptn5->email2, $emailarr5) == false)){
                    array_push($emailarr, $aptn5->email2);
                    $emcnt5++;
                }
                if(($aptn5->email3 != "") && (in_array($aptn5->email3, $emailarr5) == false)){
                    array_push($emailarr, $aptn5->email3);
                    $emcnt5++;
                }
            }
            $apptn6 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year5 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn6 as $aptn6) {
                if(($aptn6->email1 != "") && (in_array($aptn6->email1, $emailarr6) == false)){
                    array_push($emailarr, $aptn6->email1);
                    $emcnt6++;
                }
                if(($aptn6->email2 != "") && (in_array($aptn6->email2, $emailarr6) == false)){
                    array_push($emailarr, $aptn6->email2);
                    $emcnt6++;
                }
                if(($aptn6->email3 != "") && (in_array($aptn6->email3, $emailarr6) == false)){
                    array_push($emailarr, $aptn6->email3);
                    $emcnt6++;
                }
            }
            $apptn7 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year6 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn7 as $aptn7) {
                if(($aptn7->email1 != "") && (in_array($aptn7->email1, $emailarr7) == false)){
                    array_push($emailarr, $aptn7->email1);
                    $emcnt7++;
                }
                if(($aptn7->email2 != "") && (in_array($aptn7->email2, $emailarr7) == false)){
                    array_push($emailarr, $aptn7->email2);
                    $emcnt7++;
                }
                if(($aptn7->email3 != "") && (in_array($aptn7->email3, $emailarr7) == false)){
                    array_push($emailarr, $aptn7->email3);
                    $emcnt7++;
                }
            }
            $apptn8 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year7 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn8 as $aptn8) {
                if(($aptn8->email1 != "") && (in_array($aptn8->email1, $emailarr8) == false)){
                    array_push($emailarr, $aptn8->email1);
                    $emcnt8++;
                }
                if(($aptn8->email2 != "") && (in_array($aptn8->email2, $emailarr8) == false)){
                    array_push($emailarr, $aptn8->email2);
                    $emcnt8++;
                }
                if(($aptn8->email3 != "") && (in_array($aptn8->email3, $emailarr8) == false)){
                    array_push($emailarr, $aptn8->email3);
                    $emcnt8++;
                }
            }
            $apptn9 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year8 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn9 as $aptn9) {
                if(($aptn9->email1 != "") && (in_array($aptn9->email1, $emailarr9) == false)){
                    array_push($emailarr, $aptn9->email1);
                    $emcnt9++;
                }
                if(($aptn9->email2 != "") && (in_array($aptn9->email2, $emailarr9) == false)){
                    array_push($emailarr, $aptn9->email2);
                    $emcnt9++;
                }
                if(($aptn9->email3 != "") && (in_array($aptn9->email3, $emailarr9) == false)){
                    array_push($emailarr, $aptn9->email3);
                    $emcnt9++;
                }
            }
            $apptn10 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year9 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn10 as $aptn10) {
                if(($aptn10->email1 != "") && (in_array($aptn10->email1, $emailarr10) == false)){
                    array_push($emailarr, $aptn10->email1);
                    $emcnt10++;
                }
                if(($aptn10->email2 != "") && (in_array($aptn10->email2, $emailarr10) == false)){
                    array_push($emailarr, $aptn10->email2);
                    $emcnt10++;
                }
                if(($aptn10->email3 != "") && (in_array($aptn10->email3, $emailarr10) == false)){
                    array_push($emailarr, $aptn10->email3);
                    $emcnt10++;
                }
            }
            $apptn11 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year10 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn11 as $aptn11) {
                if(($aptn11->email1 != "") && (in_array($aptn11->email1, $emailarr11) == false)){
                    array_push($emailarr, $aptn11->email1);
                    $emcnt11++;
                }
                if(($aptn11->email2 != "") && (in_array($aptn11->email2, $emailarr11) == false)){
                    array_push($emailarr, $aptn11->email2);
                    $emcnt11++;
                }
                if(($aptn11->email3 != "") && (in_array($aptn11->email3, $emailarr11) == false)){
                    array_push($emailarr, $aptn11->email3);
                    $emcnt11++;
                }
            }
            $apptn12 = DB::table('appointments')->where('appointments.cstatus', "on")->where('appointment_date', 'like', '%' . $month_year11 . '%')->where('uid', $uid)->groupBy('email1','email2','email3')->get();
            foreach ($apptn12 as $aptn12) {
                if(($aptn12->email1 != "") && (in_array($aptn12->email1, $emailarr12) == false)){
                    array_push($emailarr, $aptn12->email1);
                    $emcnt12++;
                }
                if(($aptn12->email2 != "") && (in_array($aptn12->email2, $emailarr12) == false)){
                    array_push($emailarr, $aptn12->email2);
                    $emcnt12++;
                }
                if(($aptn12->email3 != "") && (in_array($aptn12->email3, $emailarr12) == false)){
                    array_push($emailarr, $aptn12->email3);
                    $emcnt12++;
                }
            }
            $new_appointmentt = $emcnt + $emcnt2 + $emcnt3 + $emcnt4 + $emcnt5 + $emcnt6 + $emcnt7 + $emcnt8 + $emcnt9 + $emcnt10 + $emcnt11 + $emcnt12;
            $getclnt = ClientAppointmentList::where('created_at', 'like', '%' . $year . '%')->where('uid', $uid)->count();
            $getcount = DB::table('change_appointment')->where('created_at', 'like', '%' . $year . '%')->where('uid', $uid)->count();
            $getcount2 = DB::table('cancel_appointment')->where('created_at', 'like', '%' . $year . '%')->where('uid', $uid)->count();
        if($description == "New Clients"){
            return $getclnt;
        }
        elseif($description == "New Appointments"){
            return $new_appointmentt;
        }
        elseif($description == "Change Appointments"){
            return $getcount;
        }
        elseif($description == "Cancel Appointments"){
            return $getcount2;
        }
    }
    public function ecommonthgraph(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraph')->with($data);
    }
    public static function getecommonthgrp($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount =EmailCampaign::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphse(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphse')->with($data);
    }
    public static function getecommonthgrpse($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount =SendEmail::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphsc(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphsc')->with($data);
    }
    public static function getecommonthgrpsc($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount =SendCard::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphsv(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphsv')->with($data);
    }
    public static function getecommonthgrpsv($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount =SendVideo::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphss(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphss')->with($data);
    }
    public static function getecommonthgrpss($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount =SendSms::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraph2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraph2')->with($data);
    }
    public static function getecommonthgrp2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = EmailCampaign::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        $mailcount2 = EmailCampaign::where('email', $description)->where('date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
        $mailcount3 = EmailCampaign::where('email', $description)->where('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function ecommonthgraphse2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphse2')->with($data);
    }
    public static function getecommonthgrpse2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = SendEmail::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        $mailcount2 = SendEmail::where('email', $description)->where('date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
        $mailcount3 = SendEmail::where('email', $description)->where('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function ecommonthgraphsc2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphsc2')->with($data);
    }
    public static function getecommonthgrpsc2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = SendCard::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        $mailcount2 = SendCard::where('email', $description)->where('date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
        $mailcount3 = SendCard::where('email', $description)->where('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function ecommonthgraphsv2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphsv2')->with($data);
    }
    public static function getecommonthgrpsv2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = SendVideo::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        $mailcount2 = SendVideo::where('email', $description)->where('date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
        $mailcount3 = SendVideo::where('email', $description)->where('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function ecommonthgraphss2(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphss2')->with($data);
    }
    public static function getecommonthgrpss2($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $monthyear = explode('-', $month_year);
        $year = $monthyear[0];
        $month = $monthyear[1];
        $month_year1 = $year."-".str_pad(($month +1), 2, '0', STR_PAD_LEFT);
        $month_year2 = $year."-".str_pad(($month +2), 2, '0', STR_PAD_LEFT);
        $mailcount1 = SendSms::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        $mailcount2 = SendSms::where('email', $description)->where('date', 'like', '%' . $month_year1 . '%')->where('uid', $uid)->count();
        $mailcount3 = SendSms::where('email', $description)->where('date', 'like', '%' . $month_year2 . '%')->where('uid', $uid)->count();
        $mailcount = $mailcount1 + $mailcount2 + $mailcount3;
        return $mailcount;
    }
    public function ecommonthgraph3(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraph3')->with($data);
    }
    public static function getecomyeargrp($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = EmailCampaign::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphse3(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphse3')->with($data);
    }
    public static function getecomyeargrpse($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = SendEmail::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphsc3(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphsc3')->with($data);
    }
    public static function getecomyeargrpsc($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = SendCard::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphsv3(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphsv3')->with($data);
    }
    public static function getecomyeargrpsv($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = SendVideo::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }
    public function ecommonthgraphss3(Request $request)
    {
        if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
                return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = FinancialManagementBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        $val = base64_decode($request->id);
        $vall = explode('zpq', $val);
        $data['description'] = $vall[0];
        $data['allyearmonth'] = explode(',', $vall[1]);
        return view('ecommonthgraphss3')->with($data);
    }
    public static function getecomyeargrpss($month_year, $description)
    {
        $uid = "";
        if((Auth::user()->role) == "affiliate"){
            $uid = Auth::id();
        }
        else{
            $uid = Auth::user()->affiliate_user_id;
        }
        $mailcount = SendSms::where('email', $description)->where('date', 'like', '%' . $month_year . '%')->where('uid', $uid)->count();
        return $mailcount;
    }



    public function client_report_view()
    {
      if(Auth::id() == NULL){
            return redirect('/')->with('status',"Please login or register to access this page.");
        }
        if((Auth::user()->role == "temp_user") || (Auth::user()->role == "client")){
            return redirect('/')->with('status', "You can't access this page.");
        }
        if(Auth::user()->role == "admin"){
         return redirect('/')->with('status',"Admin can't access this page.");
            }
        $data['status'] = DB::table('affiliatebtn')->where('id', 1)->get();
        $data['links'] = Menulinks::get();
        $now = date('Y-m-d');
        $data['top_videos'] = HomeTopVideo::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now], ['display', "show"]])->get();
        $aaid = "";
        if((Auth::user()->role) == "affiliate"){
            $aaid = Auth::user()->email;
            $uid = Auth::user()->id;
        }
        else{
            $aaid = Auth::user()->affiliate_user_email;
              $uid = Auth::user()->affiliate_user_id;
        }
        $data['aabanner'] = DB::table('affiliate_banner')->where('affiliate_email', $aaid)->get();
        $data['top_banners'] = SettingBanner::select('*')->where([['status', "on"], ['startdate', '<=', $now], ['enddate', '>=', $now]])->get();
        $data['slidetime'] = DB::table('carouselplaytime')->where('id', 1)->get();
        $data['report'] = DB::table('affiliate_member_form')->where('client_appointment_lists.uid',$uid)
                          ->join('users', 'users.id', '=', 'affiliate_member_form.uid')
                          ->join('client_appointment_lists', 'users.email', '=', 'client_appointment_lists.email')
                         ->select('affiliate_member_form.*','client_appointment_lists.first_name','client_appointment_lists.last_name','client_appointment_lists.email')
                        ->get();
        // print_r($a);die;
        $data['chat'] = "";
        $data['tools'] = "";
        if(Auth::user()->role == "affiliate_user"){
            $cdet = DB::table('user_menu_access2')->where('uemail', Auth::user()->email)->first();
            if($cdet->chat == "on"){
                $data['chat'] = "on";
            }
            else{
                $data['chat'] = "off";
            }
            if($cdet->tools == "on"){
                $data['tools'] = "on";
            }
            else{
                $data['tools'] = "off";
            }
        }
        return view('main.client_report_view')->with($data);
    }


    public function get_reports_result(Request $request){
    $html='';
    ob_start();
      $value=DB::table('affiliate_member_form')->where('affiliate_member_form.uid',$request->id)
    ->leftJoin('users', 'users.id', '=', 'affiliate_member_form.uid')
    ->select('affiliate_member_form.*','users.name','users.email')->first();
      // $data=$value->form_data;
      $data=json_decode($value->form_value,true);

      // print_r($data);die;


      ?>
      <style type="text/css">
       .tbl2 tr,.tbl2 td,.tbl2 th {
    text-align: left;
}
      </style>
      <div class="row">
        <?php
      if(!empty($data)){
        foreach($data as $key=>$val){
            if($key!="form_id"){
       ?>
      <div class="col-sm-6">
        <label for=""><?=$key?></label>
        <input type="text" name="" value="<?=$val?>" class="form-control">
      </div>

     <?php
        }
    }
      }
      ?>
      </div>

      <?php
 $html=ob_get_clean();
    echo $html;
}

}
